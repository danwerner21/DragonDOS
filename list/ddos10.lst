                      (       ddos12.asm):00001         ;
                      (       ddos12.asm):00002         ; DragonDos 1.0, Copyright (C) 1982, Dragon Data Ltd.
                      (       ddos12.asm):00003         ;
                      (       ddos12.asm):00004         ; Disassembled 2004-10-28, P.Harvey-Smith.
                      (       ddos12.asm):00005         ;
                      (       ddos12.asm):00006         ; Ported to the Dragon Alpha/Professional hardware,
                      (       ddos12.asm):00007         ; 2004-10-29 P.Harvey-Smith.
                      (       ddos12.asm):00008         ;
                      (       ddos12.asm):00009         ; Problem / Fault fixes from P.G.Scott's May 1985 Dragon User article may be 
                      (       ddos12.asm):00010         ; enabled by defining PGSFix at compile time.
                      (       ddos12.asm):00011         ;
                      (       ddos12.asm):00012         ; The default Makefile builds both versions of the ROM with the fixes applied
                      (       ddos12.asm):00013         ; or not.
                      (       ddos12.asm):00014         ;
                      (       ddos12.asm):00015         ; ddos10.rom    is the vanilla Dragon DOS as supplied on eprom, and should be 
                      (       ddos12.asm):00016         ;               binary identical to it.
                      (       ddos12.asm):00017         ;
                      (       ddos12.asm):00018         ; ddos12.rom    is Dragon DOS with P.G.Scot's fixes compiled in.
                      (       ddos12.asm):00019         ;
                      (       ddos12.asm):00020         ; It is my eventual intention to also merge in the changes from Dragon DOS 2, 
                      (       ddos12.asm):00021         ; as supplied with the Dragon Alpha / Professional.
                      (       ddos12.asm):00022         ;
                      (       ddos12.asm):00023         
                      (       ddos12.asm):00024                         use     cpudefs.asm
                      (      cpudefs.asm):00001         ;
                      (      cpudefs.asm):00002         ; CPUDEFS
                      (      cpudefs.asm):00003         ;
                      (      cpudefs.asm):00004         
                      (      cpudefs.asm):00005         ; bitmasks for flags
     0001             (      cpudefs.asm):00006         FlagCarry               equ             $01
     0002             (      cpudefs.asm):00007         FlagOverflow    equ             $02
     0004             (      cpudefs.asm):00008         FlagZero                equ             $04
     0008             (      cpudefs.asm):00009         FlagNegative    equ             $08
     0010             (      cpudefs.asm):00010         FlagIRQ                 equ             $10
     0020             (      cpudefs.asm):00011         FlagHlafCarry   equ             $20
     0040             (      cpudefs.asm):00012         FlagFIRQ                equ             $40
     0080             (      cpudefs.asm):00013         FlagEntire              equ             $80
                      (       ddos12.asm):00025                         use     dgndefs.asm
                      (      dgndefs.asm):00001         *
                      (      dgndefs.asm):00002         * Deinitions for ports on Dragon 32/64/Alpha.
                      (      dgndefs.asm):00003         *
                      (      dgndefs.asm):00004         * 2004-11-16. P.Harvey-Smith.
                      (      dgndefs.asm):00005         *       Fixed the stupid error I made in the defines below
                      (      dgndefs.asm):00006         *       that made all the non DPxxxxx defines equal to FF00 !!!
                      (      dgndefs.asm):00007         *
                      (      dgndefs.asm):00008         * 2004-10-10. P.Harvey-Smith.
                      (      dgndefs.asm):00009         *       Tidyed up a little, moved romdefs into their own file.
                      (      dgndefs.asm):00010         *
                      (      dgndefs.asm):00011         
     FF00             (      dgndefs.asm):00012         IO              equ             $ff00           ; IO page on Dragon
                      (      dgndefs.asm):00013         
                      (      dgndefs.asm):00014         *
                      (      dgndefs.asm):00015         * Most of these symbols will be defined twice, as some 
                      (      dgndefs.asm):00016         * of the Dragon code, sets DP=$FF, and uses direct page
                      (      dgndefs.asm):00017         * addressing to access the io ports, whilst some of it
                      (      dgndefs.asm):00018         * uses absolute addressing.
                      (      dgndefs.asm):00019         * The versions starting DP must be used with DP=$FF.
                      (      dgndefs.asm):00020         *
                      (      dgndefs.asm):00021         
                      (      dgndefs.asm):00022         *Pia 0 and 1 standard on all Dragons.
                      (      dgndefs.asm):00023         
     0000             (      dgndefs.asm):00024         DPPIA0DA        EQU             $00             ; Side A Data/DDR
     0001             (      dgndefs.asm):00025         DPPIA0CRA       EQU             $01             ; Side A Control.
     0002             (      dgndefs.asm):00026         DPPIA0DB        EQU             $02             ; Side B Data/DDR
     0003             (      dgndefs.asm):00027         DPPIA0CRB       EQU             $03             ; Side B Control.
                      (      dgndefs.asm):00028         
     FF00             (      dgndefs.asm):00029         PIA0DA          EQU             DPPIA0DA+IO     ; Side A Data/DDR
     FF01             (      dgndefs.asm):00030         PIA0CRA         EQU             DPPIA0CRA+IO    ; Side A Control.
     FF02             (      dgndefs.asm):00031         PIA0DB          EQU             DPPIA0DB+IO     ; Side A Data/DDR
     FF03             (      dgndefs.asm):00032         PIA0CRB         EQU             DPPIA0CRB+IO    ; Side A Control.
                      (      dgndefs.asm):00033         
     0020             (      dgndefs.asm):00034         DPPIA1DA        EQU             $20             ; Side A Data/DDR
     0021             (      dgndefs.asm):00035         DPPIA1CRA       EQU             $21             ; Side A Control.
     0022             (      dgndefs.asm):00036         DPPIA1DB        EQU             $22             ; Side B Data/DDR
     0023             (      dgndefs.asm):00037         DPPIA1CRB       EQU             $23             ; Side B Control.
                      (      dgndefs.asm):00038         
     FF20             (      dgndefs.asm):00039         PIA1DA          EQU             DPPIA1DA+IO     ; Side A Data/DDR
     FF21             (      dgndefs.asm):00040         PIA1CRA         EQU             DPPIA1CRA+IO    ; Side A Control.
     FF22             (      dgndefs.asm):00041         PIA1DB          EQU             DPPIA1DB+IO     ; Side A Data/DDR
     FF23             (      dgndefs.asm):00042         PIA1CRB         EQU             DPPIA1CRB+IO    ; Side A Control.
                      (      dgndefs.asm):00043         
                      (      dgndefs.asm):00044         * Dragon Alpha has a third PIA at FF24.
                      (      dgndefs.asm):00045         
     0024             (      dgndefs.asm):00046         DPPIA2DA        EQU             $24             ; Side A Data/DDR
     0025             (      dgndefs.asm):00047         DPPIA2CRA       EQU             $25             ; Side A Control.
     0026             (      dgndefs.asm):00048         DPPIA2DB        EQU             $26             ; Side B Data/DDR
     0027             (      dgndefs.asm):00049         DPPIA2CRB       EQU             $27             ; Side B Control.
                      (      dgndefs.asm):00050         
     FF24             (      dgndefs.asm):00051         PIA2DA          EQU             DPPIA2DA+IO     ; Side A Data/DDR
     FF25             (      dgndefs.asm):00052         PIA2CRA         EQU             DPPIA2CRA+IO    ; Side A Control.
     FF26             (      dgndefs.asm):00053         PIA2DB          EQU             DPPIA2DB+IO     ; Side A Data/DDR
     FF27             (      dgndefs.asm):00054         PIA2CRB         EQU             DPPIA2CRB+IO    ; Side A Control.
                      (      dgndefs.asm):00055         
                      (      dgndefs.asm):00056         ;WD2797 Floppy disk controler, used in Alpha Note registers in reverse order !
     002F             (      dgndefs.asm):00057         DPCmdRegA       EQU             $2F             ; command/status                        
     002E             (      dgndefs.asm):00058         DPTrkRegA       EQU             $2E             ; Track register
     002D             (      dgndefs.asm):00059         DPSecRegA       EQU             $2D             ; Sector register
     002C             (      dgndefs.asm):00060         DPDataRegA      EQU             $2C             ; Data register
                      (      dgndefs.asm):00061         
     FF2F             (      dgndefs.asm):00062         CmdRegA         EQU             DPCmdRegA+IO    ; command/status                        
     FF2E             (      dgndefs.asm):00063         TrkRegA         EQU             DPTrkRegA+IO    ; Track register
     FF2D             (      dgndefs.asm):00064         SecRegA         EQU             DPSecRegA+IO    ; Sector register
     FF2C             (      dgndefs.asm):00065         DataRegA        EQU             DPDataRegA+IO   ; Data register
                      (      dgndefs.asm):00066         
                      (      dgndefs.asm):00067         ; Constants for Alpha AY-8912 sound chip, which is used to control
                      (      dgndefs.asm):00068         ; Drive select and motor on the Alpha
                      (      dgndefs.asm):00069         
     000E             (      dgndefs.asm):00070         AYIOREG         EQU             $0E             ; AY-8912, IO Register number.
     0000             (      dgndefs.asm):00071         AYIdle          EQU             $00             ; Make AY Idle.
     0001             (      dgndefs.asm):00072         AYWriteReg      EQU             $01             ; Write AY Register
     0002             (      dgndefs.asm):00073         AYReadReg       EQU             $02             ; Read AY Register
     0003             (      dgndefs.asm):00074         AYREGLatch      EQU             $03             ; Latch register into AY
                      (      dgndefs.asm):00075         
     0003             (      dgndefs.asm):00076         DSMask          EQU             $03             ; Drive select mask.
     0004             (      dgndefs.asm):00077         MotorMask       EQU             $04             ; Motor enable mask
     0008             (      dgndefs.asm):00078         DDENMask        EQU             $08             ; DDEN Mask
     0010             (      dgndefs.asm):00079         ENPMask         EQU             $10             ; Enable Precomp mask
     0020             (      dgndefs.asm):00080         NMIMask         EQU             $20             ; NMI enable Mask
                      (      dgndefs.asm):00081         
                      (      dgndefs.asm):00082         ; Dragon 64/Alpha Serial port.
     0004             (      dgndefs.asm):00083         DPAciaData      EQU             $04             ; Acia Rx/Tx Register
     0005             (      dgndefs.asm):00084         DPAciaStat      EQU             $05             ; Acia status register
     0006             (      dgndefs.asm):00085         DPAciaCmd       EQU             $06             ; Acia command register
     0007             (      dgndefs.asm):00086         DPAciaCtrl      EQU             $07             ; Acia control register
                      (      dgndefs.asm):00087         
     FF04             (      dgndefs.asm):00088         AciaData        EQU             DPAciaData+IO   ; Acia Rx/Tx Register
     FF05             (      dgndefs.asm):00089         AciaStat        EQU             DPAciaStat+IO   ; Acia status register
     FF06             (      dgndefs.asm):00090         AciaCmd         EQU             DPAciaCmd+IO    ; Acia command register
     FF07             (      dgndefs.asm):00091         AciaCtrl        EQU             DPAciaCtrl+IO   ; Acia control register
                      (      dgndefs.asm):00092         
                      (      dgndefs.asm):00093         ; constants for the ACIA status register
                      (      dgndefs.asm):00094         
     0001             (      dgndefs.asm):00095         AciaSParityErr  EQU             $01             ; parity error
     0002             (      dgndefs.asm):00096         AciaSFrameErr   EQU             $02             ; framing error
     0004             (      dgndefs.asm):00097         AciaSOverrun    EQU             $04             ; data overrun
     0008             (      dgndefs.asm):00098         AciaSRxFull     EQU             $08             ; receiver register full
     0010             (      dgndefs.asm):00099         AciaSTxEmpty    EQU             $10             ; transmit register empty
     0020             (      dgndefs.asm):00100         AciaSDCD        EQU             $20             ; data carrier detect =0detect, 1=not detect
     0040             (      dgndefs.asm):00101         AciaSDSR        EQU             $40             ; data set ready 0=ready, 1=not ready
     0080             (      dgndefs.asm):00102         AciaSIRQ        EQU             $80             ; interrupt, 0=no int, 1=int
                      (      dgndefs.asm):00103         
                      (      dgndefs.asm):00104         ; constants for ACIA command register
     00C0             (      dgndefs.asm):00105         AciaPMCMask     EQU             $C0             ; mask for PMC bits
     000C             (      dgndefs.asm):00106         AciaTICMask     EQU             $0C             ; transmitter interrupt control mask
                      (      dgndefs.asm):00107         
     0000             (      dgndefs.asm):00108         AciaPMCPOdd     EQU             $00             ; odd parity tx/rx
     0040             (      dgndefs.asm):00109         AciaPMCPEven    EQU             $40             ; even parity tx/rx
     0080             (      dgndefs.asm):00110         AciaPMCPMark    EQU             $80             ; mark parity tx, rx parity disabled
     00C0             (      dgndefs.asm):00111         AciaPMCPSpace   EQU             $C0             ; space parity tx, rx parity disabled
     0020             (      dgndefs.asm):00112         AciaPME         EQU             $20             ; parity mode enable = 1, disable = 0
     0010             (      dgndefs.asm):00113         AciaREM         EQU             $10             ; receiver echo mode, 0=no echo, 1=echo
     0000             (      dgndefs.asm):00114         AcidTICRHDis    EQU             $00             ; RTS high, interrupt disabled
     0004             (      dgndefs.asm):00115         AcidTICRLEna    EQU             $04             ; RTS low, interrupt enabled
     0008             (      dgndefs.asm):00116         AcidTICRLDis    EQU             $08             ; RTS low, interrupt disabled
     000C             (      dgndefs.asm):00117         AcidTICRLBrk    EQU             $0C             ; RTS low, interrupt disabled, break on txd
     0002             (      dgndefs.asm):00118         AciaIRD         EQU             $02             ; receiver interrupt disable, 0=int enabled, 1=int disabled
     0001             (      dgndefs.asm):00119         AciaDTR         EQU             $01             ; data terminal ready 0=DTR high, 1=DTR low
                      (      dgndefs.asm):00120         
                      (      dgndefs.asm):00121         ; constants for the ACIA control register 
                      (      dgndefs.asm):00122         ; bits 0..3 specify the baud rate
                      (      dgndefs.asm):00123         
     000F             (      dgndefs.asm):00124         AciaBrdMask     EQU             $0F             ; baud rate mask
     0000             (      dgndefs.asm):00125         AciaCBrdExt     EQU             $00             ; 1/16th external clock
     0001             (      dgndefs.asm):00126         AciaCBrd50      EQU             $01             ; 50 baud
     0002             (      dgndefs.asm):00127         AciaCBrd75      EQU             $02             ; 75 baud
     0003             (      dgndefs.asm):00128         AciaCBrd110     EQU             $03             ; 110 baud
     0004             (      dgndefs.asm):00129         AciaCBrd135     EQU             $04             ; 135 baud
     0005             (      dgndefs.asm):00130         AciaCBrd150     EQU             $05             ; 150 baud
     0006             (      dgndefs.asm):00131         AciaCBrd300     EQU             $06             ; 300 baud
     0007             (      dgndefs.asm):00132         AciaCBrd600     EQU             $07             ; 600 baud
     0008             (      dgndefs.asm):00133         AciaCBrd1200    EQU             $08             ; 1200 baud
     0009             (      dgndefs.asm):00134         AciaCBrd1800    EQU             $09             ; 1800 baud
     000A             (      dgndefs.asm):00135         AciaCBrd2400    EQU             $0A             ; 2400 baud
     000B             (      dgndefs.asm):00136         AciaCBrd3600    EQU             $0B             ; 3600 baud
     000C             (      dgndefs.asm):00137         AciaCBrd4800    EQU             $0C             ; 4800 baud
     000D             (      dgndefs.asm):00138         AciaCBrd7200    EQU             $0D             ; 7200 baud
     000E             (      dgndefs.asm):00139         AciaCBrd9600    EQU             $0E             ; 9600 baud
     000E             (      dgndefs.asm):00140         AciaCBrd19200   EQU             $0E             ; 19200 baud
                      (      dgndefs.asm):00141         
     0010             (      dgndefs.asm):00142         AciaCRxClk      EQU             $10             ; receiver clock source, 0= external, 1=baud rate
     0060             (      dgndefs.asm):00143         AciaWrdMask     EQU             $60             ; word length bits mask
     0000             (      dgndefs.asm):00144         AciaCWrd8       EQU             $00             ; 8 bit word
     0020             (      dgndefs.asm):00145         AciaCWrd7       EQU             $20             ; 7 bit word
     0040             (      dgndefs.asm):00146         AciaCWrd6       EQU             $40             ; 6 bit word
     0060             (      dgndefs.asm):00147         AciaCWrd5       EQU             $60             ; 5 bit word3
     0080             (      dgndefs.asm):00148         AciaCSBN        EQU             $80             ; stop bit number, 0=1 bit, 1=2 bits
                      (      dgndefs.asm):00149         
                      (      dgndefs.asm):00150         ; Dragon Alpha Modem port (6850)
                      (      dgndefs.asm):00151         
     0028             (      dgndefs.asm):00152         DPModemCtrl     EQU             $28             ; Modem Control/Status
     0029             (      dgndefs.asm):00153         DPModemData     EQU             $29             ; Modem Rx/Tx Data
                      (      dgndefs.asm):00154         
     FF28             (      dgndefs.asm):00155         ModemCtrl       EQU             DPModemCtrl+IO  ; Modem Control/Status
     FF29             (      dgndefs.asm):00156         ModemData       EQU             DPModemData+IO  ; Modem Rx/Tx Data
                      (      dgndefs.asm):00157         
                      (      dgndefs.asm):00158         ;DragonDos Cartrage IO for WD2797
                      (      dgndefs.asm):00159         
                      (      dgndefs.asm):00160         ;WD2797 Floppy disk controler, used in DragonDos.
     0040             (      dgndefs.asm):00161         DPCmdRegD       EQU             $40             ; command/status                        
     0041             (      dgndefs.asm):00162         DPTrkRegD       EQU             $41             ; Track register
     0042             (      dgndefs.asm):00163         DPSecRegD       EQU             $42             ; Sector register
     0043             (      dgndefs.asm):00164         DPDataRegD      EQU             $43             ; Data register
                      (      dgndefs.asm):00165         
     FF40             (      dgndefs.asm):00166         CmdRegD         EQU             DPCmdRegD+IO    ; command/status        4               
     FF41             (      dgndefs.asm):00167         TrkRegD         EQU             DPTrkRegD+IO    ; Track register
     FF42             (      dgndefs.asm):00168         SecRegD         EQU             DPSecRegD+IO    ; Sector register
     FF43             (      dgndefs.asm):00169         DataRegD        EQU             DPDataRegD+IO   ; Data register
                      (      dgndefs.asm):00170         
     0048             (      dgndefs.asm):00171         DPDSKCTLD       EQU             $48             ; Disk DS/motor control reg
     FF48             (      dgndefs.asm):00172         DSKCTLD         EQU             DPDSKCTLD+IO            
                      (      dgndefs.asm):00173         
                      (      dgndefs.asm):00174         ; Disk IO bitmasks (DragonDos).
                      (      dgndefs.asm):00175         
     0020             (      dgndefs.asm):00176         NMIEnD          EQU             %00100000 
     0010             (      dgndefs.asm):00177         WPCEnD          EQU             %00010000 
     0008             (      dgndefs.asm):00178         SDensEnD        EQU             %00001000 
     0004             (      dgndefs.asm):00179         MotorOnD        EQU             %00000100 
     0000             (      dgndefs.asm):00180         Drive0D         EQU             %00000000
     0001             (      dgndefs.asm):00181         Drive1D         EQU             %00000001
     0002             (      dgndefs.asm):00182         Drive2D         EQU             %00000010
     0003             (      dgndefs.asm):00183         Drive3D         EQU             %00000011
     0003             (      dgndefs.asm):00184         DriveMaskD      EQU             %00000011       ; Mask to extract drives
                      (      dgndefs.asm):00185         
                      (      dgndefs.asm):00186         ; Disk IO bitmasks (Dragon Alpha).
                      (      dgndefs.asm):00187         
                      (      dgndefs.asm):00188         ;NMIEnA         EQU             %10000000       ; This is just a guess, but in current code just used as a flag 
     0080             (      dgndefs.asm):00189         Drive5or8       EQU             %10000000       ; is drive in 5" or 8" mode Acording to circuit trace on R.Harding's machine
     0040             (      dgndefs.asm):00190         WPCEnA          EQU             %01000000       ; Acording to circuit trace by R.Harding.
     0020             (      dgndefs.asm):00191         SDensEnA        EQU             %00100000       ; DDen Acording to circuit trace on R.Harding's machine
     0010             (      dgndefs.asm):00192         MotorOnA        EQU             %00010000       
     0001             (      dgndefs.asm):00193         Drive0A         EQU             %00000001       ; Drive selects acording to OS9 headers
     0002             (      dgndefs.asm):00194         Drive1A         EQU             %00000010
     0004             (      dgndefs.asm):00195         Drive2A         EQU             %00000100
     0008             (      dgndefs.asm):00196         Drive3A         EQU             %00001000
     000F             (      dgndefs.asm):00197         DriveMaskA      EQU             %00001111       ; Mask to extract drives
                      (      dgndefs.asm):00198         
                      (      dgndefs.asm):00199         ; On the Alpha, NMI is enabled/disabled by setting CA2 of the third PIA, High=enabled.
                      (      dgndefs.asm):00200         
                      (      dgndefs.asm):00201         ;WD1793/1772 Floppy disk controler, used in RS-DOS.
     0048             (      dgndefs.asm):00202         DPCmdRegT       EQU             $48             ; command/status                        
     0049             (      dgndefs.asm):00203         DPTrkRegT       EQU             $49             ; Track register
     004A             (      dgndefs.asm):00204         DPSecRegT       EQU             $4A             ; Sector register
     004B             (      dgndefs.asm):00205         DPDataRegT      EQU             $4B             ; Data registerT
                      (      dgndefs.asm):00206         
     FF48             (      dgndefs.asm):00207         CmdRegT         EQU             DPCmdRegT+IO    ; command/status        4               
     FF49             (      dgndefs.asm):00208         TrkRegT         EQU             DPTrkRegT+IO    ; Track register
     FF4A             (      dgndefs.asm):00209         SecRegT         EQU             DPSecRegT+IO    ; Sector register
     FF4B             (      dgndefs.asm):00210         DataRegT        EQU             DPDataRegT+IO   ; Data register
                      (      dgndefs.asm):00211         
     0040             (      dgndefs.asm):00212         DPDSKCTLT       EQU             $40             ; Disk DS/motor control reg
     FF40             (      dgndefs.asm):00213         DSKCTLT         EQU             DPDSKCTLT+IO            
                      (      dgndefs.asm):00214         
                      (      dgndefs.asm):00215         ; Disk IO bitmasks (RSDos FD-500).
                      (      dgndefs.asm):00216         
     0080             (      dgndefs.asm):00217         HaltEn          EQU             %10000000       ; Halt enable
     0040             (      dgndefs.asm):00218         SS0             EQU             %01000000       ; Side select
     0020             (      dgndefs.asm):00219         SDensEnT        EQU             %00100000       ; Double density enable 
     0020             (      dgndefs.asm):00220         NMIEnT          EQU             %00100000       ; Enable NMI, always enabled when in DD mode
     0010             (      dgndefs.asm):00221         WPCEnT          EQU             %00010000       
     0008             (      dgndefs.asm):00222         MotorOnT        EQU             %00001000       ; Drive selects only 3
     0001             (      dgndefs.asm):00223         Drive0T         EQU             %00000001
     0002             (      dgndefs.asm):00224         Drive1T         EQU             %00000010
     0004             (      dgndefs.asm):00225         Drive2T         EQU             %00000100
     0004             (      dgndefs.asm):00226         Drive3T         EQU             %00000100       ; Drive 3 same as drive 2 !
     0007             (      dgndefs.asm):00227         DriveMaskT      EQU             %00000111       ; Mask to extract drives
     000F             (      dgndefs.asm):00228         DriveOffMaskT   EQU             MotorOnT+DriveMaskT     
                      (      dgndefs.asm):00229         
                      (      dgndefs.asm):00230         ; PIA control register bitmasks
     0080             (      dgndefs.asm):00231         CRIRQ1          EQU             %10000000       ; goes to 1 when an inerrupt is triggered on CA1/CB1
     0040             (      dgndefs.asm):00232         CRIRQ2          EQU             %01000000       ; goes to 1 when an inerrupt is triggered on CA2/CB2
     0020             (      dgndefs.asm):00233         CRC2IO          EQU             %00100000       ; CA2/CB2 output when 1, input when 0
     0004             (      dgndefs.asm):00234         CRDDRDATA       EQU             %00000100       ; DDR register accessed if 1, data if 0
     0002             (      dgndefs.asm):00235         CRIRQDir        EQU             %00000010       ; CA1/CB1 IRQ edge : 0 = falling, 1=rising
     0001             (      dgndefs.asm):00236         CRIRQ           EQU             %00000001       ; CA1/CB1 IRQ enable
                      (      dgndefs.asm):00237         
                      (      dgndefs.asm):00238         ; PIA1 bismasks
                      (      dgndefs.asm):00239         
                      (      dgndefs.asm):00240         ; Port B
                      (      dgndefs.asm):00241         
     0080             (      dgndefs.asm):00242         MaskAG          equ             %10000000       ; VDG A/G
     0040             (      dgndefs.asm):00243         MaskGM2         equ             %01000000       ; VDG GM2
     0020             (      dgndefs.asm):00244         MaskGM1         equ             %00100000       ; VDG GM1
     0010             (      dgndefs.asm):00245         MaskGM0         equ             %00010000       ; VDG GM0
     0008             (      dgndefs.asm):00246         MaskCSS         equ             %00001000       ; VDG CSS
     0004             (      dgndefs.asm):00247         MaskROMSEL      equ             %00000100       ; ROM select output on Dragon 64
     0004             (      dgndefs.asm):00248         MaskRAMType     equ             %00000100       ; RAM type input on Dragon 32
     0002             (      dgndefs.asm):00249         MaskSBS         equ             %00000010       ; Single bit sound sense
     0001             (      dgndefs.asm):00250         MaskBUSY        equ             %00000001       ; Printer busy 
                      (      dgndefs.asm):00251         
                      (      dgndefs.asm):00252         ; following 2 for convenience
     00F8             (      dgndefs.asm):00253         MaskVideo       equ             (MaskAG+MaskGM2+MaskGM1+MaskGM0+MaskCSS)
     0007             (      dgndefs.asm):00254         MaskNONVideo    equ             (MaskRAMType+MaskSBS+MaskBUSY)
                      (       ddos12.asm):00026                         use     dosdefs.asm
                      (      dosdefs.asm):00001         ;
                      (      dosdefs.asm):00002         ; DragonDos,  Copyright (C) 1983,1984 Dragon Data Ltd.
                      (      dosdefs.asm):00003         ;
                      (      dosdefs.asm):00004         ; Disassembled 2004-11-05, P.Harvey-Smith.
                      (      dosdefs.asm):00005         ;
                      (      dosdefs.asm):00006         ; 2005-10-10, forked ram vars into seperate include file.
                      (      dosdefs.asm):00007         ;
                      (      dosdefs.asm):00008                         
     0010             (      dosdefs.asm):00009         TrackPrecomp    EQU     $10             ; Track to enable precomp if greater
                      (      dosdefs.asm):00010         
     0012             (      dosdefs.asm):00011         SectorsPerTrack EQU     $12             ; Sectors per track
     0028             (      dosdefs.asm):00012         FmtDefTracks    EQU     $28             ; Default tracks for format
     0050             (      dosdefs.asm):00013         FmtDefTracksA   EQU     $50             ; Dragon Alpha default tracks for format
     0001             (      dosdefs.asm):00014         FmtDefSides     EQU     $01
                      (      dosdefs.asm):00015         
     0004             (      dosdefs.asm):00016         MaxDriveNo      EQU     $04             ; Maximum valid drive no
     000E             (      dosdefs.asm):00017         MaxFilenameLen  EQU     $0E             ; Max filename length, DriveNo:Filename.EXT
     004F             (      dosdefs.asm):00018         MaxTrack        EQU     $4F             ; Maximum track no (80)
                      (      dosdefs.asm):00019         
                      (      dosdefs.asm):00020         ;
                      (      dosdefs.asm):00021         ; Boot command related.
                      (      dosdefs.asm):00022         ;
                      (      dosdefs.asm):00023         
     0003             (      dosdefs.asm):00024         BootFirstSector EQU     $03             ; Boot sector is track 0 sector 3
     0012             (      dosdefs.asm):00025         BootLastSector  EQU     $12             ; Last sector of boot
     4F53             (      dosdefs.asm):00026         BootSignature   EQU     $4F53           ; Boot signature 'OS'
     2600             (      dosdefs.asm):00027         BootLoadAddr    EQU     $2600           ; Boot area load address.
     2602             (      dosdefs.asm):00028         BootEntryAddr   EQU     $2602           ; Boot entry address
                      (      dosdefs.asm):00029         
                      (      dosdefs.asm):00030         ;
                      (      dosdefs.asm):00031         ; Dir track related
                      (      dosdefs.asm):00032         ;
                      (      dosdefs.asm):00033         
     0014             (      dosdefs.asm):00034         DirPrimary      EQU     $14             ; Primary dir track is track 20
     0010             (      dosdefs.asm):00035         DirBackup       EQU     $10             ; Backup on track 16
                      (      dosdefs.asm):00036         
                      (      dosdefs.asm):00037         ;
                      (      dosdefs.asm):00038         ; DOS Low memory variables
                      (      dosdefs.asm):00039         ;
                      (      dosdefs.asm):00040         
     00FF             (      dosdefs.asm):00041         AutoFlag        EQU     $FF             ; Auto re-number flag, if $613=this then auto enter basic lines
                      (      dosdefs.asm):00042         
     00EA             (      dosdefs.asm):00043         DosCommand      EQU     $00EA           ; Dos function no to execute
     00EB             (      dosdefs.asm):00044         DosDriveNo      EQU     $00EB           ; Last active drive number
     00EC             (      dosdefs.asm):00045         DskTrackNo      EQU     $00EC           ; Disk track no
     00ED             (      dosdefs.asm):00046         DskSectorNo     EQU     $00ED           ; Disk sectror no
     00EE             (      dosdefs.asm):00047         DiskBuffPtr     EQU     $00EE           ; Disk buffer pointer
     00F0             (      dosdefs.asm):00048         DosDiskError    EQU     $00F0           ; Disk error status byte
     00F1             (      dosdefs.asm):00049         DosCurrCtrlBlk  EQU     $00F1           ; Current file control block (FIB) (0..9) $FF=no files open
     00F2             (      dosdefs.asm):00050         DosBytesInDTA   EQU     $00F2           ; Number of bytes in DTA (also used for tracks in DSKINIT).
     00F2             (      dosdefs.asm):00051         DosDSKINITraks  EQU     $00F2           
     00F3             (      dosdefs.asm):00052         DosNoBytesMove  EQU     $00F3           ; Number of bytes to transfer to/from buffer, also head during format
     00F3             (      dosdefs.asm):00053         DosDSKINIHead   EQU     $00F3           
     00F4             (      dosdefs.asm):00054         DosRecLenFlag   EQU     $00F4           ; Record length flag, 00 don'r care $FF=do care, also DS flag in format
     00F5             (      dosdefs.asm):00055         DosRWFlag       EQU     $00F5           ; Read write flag, $00=read, $01= write, $FF=verifying
     00F6             (      dosdefs.asm):00056         DosIOInProgress EQU     $00f6           ; I/O currently in progress flag 0x00 check for time out, Non-0x00 skip timeout check
     00F7             (      dosdefs.asm):00057         DosMakeSysDsk   EQU     $00f7           ; Make system disk during format, $00=no, $FF=yes
                      (      dosdefs.asm):00058         
     00F8             (      dosdefs.asm):00059         DosSectorSeek   EQU     $00F8           ; Sector currently seeking {SuperDos Rom}
                      (      dosdefs.asm):00060         
                      (      dosdefs.asm):00061         *************************************************************************
                      (      dosdefs.asm):00062         
     0600             (      dosdefs.asm):00063         DosAreaStart    EQU     $0600           ; Start of RAM used by DOS
     0600             (      dosdefs.asm):00064         Thrash          EQU     $0600           ; Work byte, yes that's what it's called in the DD sourcecode!
     0601             (      dosdefs.asm):00065         Temps1          EQU     $0601           ; Temp storage for registers #1
     0602             (      dosdefs.asm):00066         Temps2          EQU     $0602           ; Temp storage for registers #2
     0603             (      dosdefs.asm):00067         TempC           EQU     $0603           ; Temp for FREAD
     0604             (      dosdefs.asm):00068         TempL           EQU     $0604           ; Temp for FREAD
                      (      dosdefs.asm):00069         
     0603             (      dosdefs.asm):00070         DosErrorCode    EQU     $0603           ; Error code from DOS
     0605             (      dosdefs.asm):00071         DosTimeout      EQU     $0605           ; Timeout count, Motor timer
                      (      dosdefs.asm):00072                                                 ; timeout occurs when this location is decremented from 0x01 to 0x00,                   
     0606             (      dosdefs.asm):00073         DosHWMaskFF40   EQU     $0606           ; Hardware command byte mask for FF40 (disk option)
     0607             (      dosdefs.asm):00074         DosHWMaskFF48   EQU     $0607           ; hardware control mask for $ff48 (latch temp)
     0608             (      dosdefs.asm):00075         DosVerifyFlag   EQU     $0608           ; Verify flag, 00=no verify $FF=verify
     0609             (      dosdefs.asm):00076         DosErrorMask    EQU     $0609           ; Error mask, ANDed with error code from WD
     060A             (      dosdefs.asm):00077         DosDefDriveNo   EQU     $060A           ; Default drive number
     060B             (      dosdefs.asm):00078         DosFWriteBPtr   EQU     $060B           ; FWrite buffer pointer 
     060D             (      dosdefs.asm):00079         DosBuffStart    EQU     $060D           ; Buffer start
     060F             (      dosdefs.asm):00080         DosBuffEnd      EQU     $060F           ; Buffer end
     0611             (      dosdefs.asm):00081         DosRunLoadFlag  EQU     $0611           ; Run/load flag $00=LOAD
     0612             (      dosdefs.asm):00082         DosFlFreadFlag  EQU     $0612           ; Fread/FLread flag 00=fread, $FF=FLread
                      (      dosdefs.asm):00083         
                      (      dosdefs.asm):00084         *************************************************************************
                      (      dosdefs.asm):00085         
                      (      dosdefs.asm):00086         ; Auto flags share their locations with FWrite buffers as they cannot both be 
                      (      dosdefs.asm):00087         ; active together
     0613             (      dosdefs.asm):00088         DosAutoFlag     EQU     $0613           ; Auto flag, $FF=auto, $00=no auto
     060D             (      dosdefs.asm):00089         DosAutoCurrent  EQU     DosBuffStart    ; AUTO current line no
     060F             (      dosdefs.asm):00090         DosAutoInc      EQU     DosBuffEnd      ; AUTO line increment
                      (      dosdefs.asm):00091         
                      (      dosdefs.asm):00092         *************************************************************************
                      (      dosdefs.asm):00093         
                      (      dosdefs.asm):00094         ; variables for ON ERROR
     0614             (      dosdefs.asm):00095         DosErrGotoFlag  EQU     $0614           ; ERROR GOTO flag, 0x00 Off Non-0x00 On 
     0615             (      dosdefs.asm):00096         DosErrDestLine  EQU     $0615           ; Error destination line
     0617             (      dosdefs.asm):00097         DosErrLineNo    EQU     $0617           ; line no error occured in (ERR line no)
     0619             (      dosdefs.asm):00098         DosErrLast      EQU     $0619           ; Error that occured
     061A             (      dosdefs.asm):00099         DosErrPtr       EQU     $061A           ; pointer to the statement that caused the error
                      (      dosdefs.asm):00100         
                      (      dosdefs.asm):00101         *************************************************************************
                      (      dosdefs.asm):00102         
     061C             (      dosdefs.asm):00103         Drv0Details     EQU     $061C           ; Drive 0 details (6 bytes)
     0622             (      dosdefs.asm):00104         Drv1Details     EQU     $0622           ; Drive 1 details (6 bytes)
     0628             (      dosdefs.asm):00105         Drv2Details     EQU     $0628           ; Drive 2 details (6 bytes)
     062E             (      dosdefs.asm):00106         Drv3Details     EQU     $062E           ; Drive 3 details (6 bytes)
     0006             (      dosdefs.asm):00107         DrvDeatailLen   EQU     $06             ; Entries are 6 bytes long
                      (      dosdefs.asm):00108         
                      (      dosdefs.asm):00109         ; Offsets into drive details
     0000             (      dosdefs.asm):00110         DrvDetDirLSN    EQU     $00             ; LSN of directory
     0002             (      dosdefs.asm):00111         DrvDetFreeLen   EQU     $02             ; Free length
     0003             (      dosdefs.asm):00112         DrvDetFreeEPtr  EQU     $03             ; Free extent pointer (LSN)
     0005             (      dosdefs.asm):00113         DrvDetUseCnt    EQU     $05             ; Usage/open file count ?
                      (      dosdefs.asm):00114         
                      (      dosdefs.asm):00115         *************************************************************************
                      (      dosdefs.asm):00116         
     0004             (      dosdefs.asm):00117         BuffCount       EQU     $04             ; 4 disk buffers
     0007             (      dosdefs.asm):00118         BuffDetailSize  EQU     $07             ; Buffer detail entries ar 7 bytes long
                      (      dosdefs.asm):00119         
     0634             (      dosdefs.asm):00120         Buff1Details    EQU     $0634           ; Disk buffer 1 details
     063B             (      dosdefs.asm):00121         Buff2Details    EQU     $063B           ; Disk buffer 2 details
     0642             (      dosdefs.asm):00122         Buff3Details    EQU     $0642           ; Disk buffer 3 details
     0649             (      dosdefs.asm):00123         Buff4Details    EQU     $0649           ; Disk buffer 4 details
                      (      dosdefs.asm):00124         
                      (      dosdefs.asm):00125         
                      (      dosdefs.asm):00126         ; Disk buffer details offsets for above table
     0000             (      dosdefs.asm):00127         BuffLSN         EQU     $00             ; LSN number 
     0002             (      dosdefs.asm):00128         BuffFlag        EQU     $02             ; Flag, see below...
     0003             (      dosdefs.asm):00129         BuffDrive       EQU     $03             ; Drive no 1..4
     0004             (      dosdefs.asm):00130         BuffAge         EQU     $04             ; Age of buffer since last use, 1=oldest..4=youngest
     0005             (      dosdefs.asm):00131         BuffAddr        EQU     $05             ; Buffer address
                      (      dosdefs.asm):00132         
                      (      dosdefs.asm):00133         ;BuffFlag values
                      (      dosdefs.asm):00134         
     0000             (      dosdefs.asm):00135         BuffFree        EQU     $00             ; Disk buffer is free
     0001             (      dosdefs.asm):00136         BuffUnknown     EQU     $01             ; Valid, clean
     0055             (      dosdefs.asm):00137         BuffInUse       EQU     $55             ; Buffer in use** not documented in DDv2c source.
     00FE             (      dosdefs.asm):00138         BuffDirtyExpire EQU     $FE             ; Buffer has been modified, but not written to disk, grace period expired
     00FF             (      dosdefs.asm):00139         BuffDirty       EQU     $FF             ; Buffer has been modified, but not written to disk
                      (      dosdefs.asm):00140         
                      (      dosdefs.asm):00141         *************************************************************************
                      (      dosdefs.asm):00142         
     0650             (      dosdefs.asm):00143         DosCurDriveInfo EQU     $0650           ; Dos current drive info
     0650             (      dosdefs.asm):00144         DosCurFilename  EQU     $0650           ; Current filename
     0658             (      dosdefs.asm):00145         DosCurExtension EQU     $0658           ; Current extension, used in validation
                      (      dosdefs.asm):00146         
     065B             (      dosdefs.asm):00147         DosCurDriveNo   EQU     $065B           ; Current drive no
     065C             (      dosdefs.asm):00148         DosLSNCounter   EQU     $065C           ; LSN counter in directory search
     065E             (      dosdefs.asm):00149         DosSaveBuffAddr EQU     $065E           ; Save buffer address
                      (      dosdefs.asm):00150         
                      (      dosdefs.asm):00151         
     0660             (      dosdefs.asm):00152         DosCurCount     EQU     $0660           ; Current count, used in various places (extent found?)
                      (      dosdefs.asm):00153                                                 ; marked as "Temp1, extent found" in DDv2c source
     0661             (      dosdefs.asm):00154         DosBytesRead    EQU     $0661           ; Number of bytes to read in DosFRead
     0663             (      dosdefs.asm):00155         DosSecOffset    EQU     $0663           ; Offset within sector for DosFRead to start
     0664             (      dosdefs.asm):00156         DosFWriteAddr   EQU     $0664           ; Fwrite address
     0667             (      dosdefs.asm):00157         DosPageBufAddr  EQU     $0667           ; Page buffer address
     0669             (      dosdefs.asm):00158         DosCurrSector   EQU     $0669           ; Current sector (LSN?)
     066B             (      dosdefs.asm):00159         DosTotalSFound  EQU     $066B           ; Total sectors found
     066D             (      dosdefs.asm):00160         DosFSNToFind    EQU     $066D           ; FSN sought
     066F             (      dosdefs.asm):00161         DosCurLSN       EQU     $066F           ; Current LSN, of current DIR sector being processed
     0671             (      dosdefs.asm):00162         DosFWBufPtr     EQU     $0671           ; Pointer to buffer in FWrite
     0673             (      dosdefs.asm):00163         DosFWByteCount  EQU     $0673           ; Number of bytes to write in FWrite
     0675             (      dosdefs.asm):00164         DosFWFPoint     EQU     $0675           ; File pointer to write at in FWrite
                      (      dosdefs.asm):00165         
     0678             (      dosdefs.asm):00166         DosSaveFCB      EQU     $0678           ; Temparary FCB pointer used by DosCreateFile.
     067A             (      dosdefs.asm):00167         DosSaveExt      EQU     $067A           ; Temporary extension used during DosCreateFile
     067D             (      dosdefs.asm):00168         DosTempFCBNo    EQU     $067D           ; Temporary Fileno / FCB no storage used by DosCreateFile.
     067F             (      dosdefs.asm):00169         DosCurDirBuff   EQU     $067F           ; Pointer to the current Dir sector, Buffer def block
     0681             (      dosdefs.asm):00170         DosTempFileNo   EQU     $0681           ; Temp file no whilst opening file
     0682             (      dosdefs.asm):00171         DosCurFileNo    EQU     $0682           ; Current file number on disk, to get dir entry for
                      (      dosdefs.asm):00172         
     0683             (      dosdefs.asm):00173         DosNewUSRTable  EQU     $0683           ; New USR table, relocated from low ram
                      (      dosdefs.asm):00174         
                      (      dosdefs.asm):00175         ;Drive parameter tables, note these need to be in this order.
     0697             (      dosdefs.asm):00176         DosD0Online     EQU     $0697           ; Drive 0 online flag
     0698             (      dosdefs.asm):00177         DosD1Online     EQU     $0698           ; Drive 1 online flag
     0699             (      dosdefs.asm):00178         DosD2Online     EQU     $0699           ; Drive 2 online flag
     069A             (      dosdefs.asm):00179         DosD3Online     EQU     $069A           ; Drive 3 online flag
                      (      dosdefs.asm):00180         
     069B             (      dosdefs.asm):00181         DosD0Track      EQU     $069B           ; Drive 0 current track
     069C             (      dosdefs.asm):00182         DosD1Track      EQU     $069C           ; Drive 1 current track
     069D             (      dosdefs.asm):00183         DosD2Track      EQU     $069D           ; Drive 2 current track
     069E             (      dosdefs.asm):00184         DosD3Track      EQU     $069E           ; Drive 3 current track
                      (      dosdefs.asm):00185         
     067E             (      dosdefs.asm):00186         DosTemp2        EQU     $067E           ; Temp, used in FindEmptyDir, CmdFLRead.... 
     069F             (      dosdefs.asm):00187         DosLBASec       EQU     $069F           ; as step rates meaningless for disk image
                      (      dosdefs.asm):00188         
     069F             (      dosdefs.asm):00189         DosD0StepRate   EQU     $069F           ; Drive 0 step rate
     06A0             (      dosdefs.asm):00190         DosD1StepRate   EQU     $06A0           ; Drive 1 step rate
     06A1             (      dosdefs.asm):00191         DosD2StepRate   EQU     $06A1           ; Drive 2 step rate
     06A2             (      dosdefs.asm):00192         DosD3StepRate   EQU     $06A2           ; Drive 3 step rate
                      (      dosdefs.asm):00193         
     06A3             (      dosdefs.asm):00194         DosD0Tracks     EQU     $06A3           ; Tracks on disk in drive 0
     06A4             (      dosdefs.asm):00195         DosD1Tracks     EQU     $06A4           ; Tracks on disk in drive 1
     06A5             (      dosdefs.asm):00196         DosD2Tracks     EQU     $06A5           ; Tracks on disk in drive 2
     06A6             (      dosdefs.asm):00197         DosD3Tracks     EQU     $06A6           ; Tracks on disk in drive 3
                      (      dosdefs.asm):00198         
     06A7             (      dosdefs.asm):00199         DosD0SecTrack   EQU     $06A7           ; Sectors per track drive 0
     06A8             (      dosdefs.asm):00200         DosD1SecTrack   EQU     $06A8           ; Sectors per track drive 1
     06A9             (      dosdefs.asm):00201         DosD2SecTrack   EQU     $06A9           ; Sectors per track drive 2
     06AA             (      dosdefs.asm):00202         DosD3SecTrack   EQU     $06AA           ; Sectors per track drive 3
                      (      dosdefs.asm):00203         
                      (      dosdefs.asm):00204         ; Offsets of tables from Online table, this way we can point an index register
                      (      dosdefs.asm):00205         ; at the drive online byte and access the other tables with offset,IR
                      (      dosdefs.asm):00206         
     0004             (      dosdefs.asm):00207         DosTrackTblOfs  EQU     (DosD0Track-DosD0Online)
     0008             (      dosdefs.asm):00208         DosStepTblOfs   EQU     (DosD0StepRate-DosD0Online)
     000C             (      dosdefs.asm):00209         DosTracksTblOfs EQU     (DosD0Tracks-DosD0Online)
     0010             (      dosdefs.asm):00210         DosSecTrkTblOfs EQU     (DosD0SecTrack-DosD0Online)
                      (      dosdefs.asm):00211         
     06AB             (      dosdefs.asm):00212         DosDirSecStatus EQU     $06AB           ; Directory sector status $06ab-$06bc
                      (      dosdefs.asm):00213         
     06BD             (      dosdefs.asm):00214         DosFCB0Addr     EQU     $06BD           ; File Control Block 0 Address 
     06DC             (      dosdefs.asm):00215         DosFCB1Addr     EQU     $06DC           ; File Control Block 1 Address
     06FB             (      dosdefs.asm):00216         DosFCB2Addr     EQU     $06FB           ; File Control Block 2 Address 
     071A             (      dosdefs.asm):00217         DosFCB3Addr     EQU     $071A           ; File Control Block 3 Address 
     0739             (      dosdefs.asm):00218         DosFCB4Addr     EQU     $0739           ; File Control Block 4 Address 
     0758             (      dosdefs.asm):00219         DosFCB5Addr     EQU     $0758           ; File Control Block 5 Address 
     0777             (      dosdefs.asm):00220         DosFCB6Addr     EQU     $0777           ; File Control Block 6 Address 
     0796             (      dosdefs.asm):00221         DosFCB7Addr     EQU     $0796           ; File Control Block 7 Address 
     07B5             (      dosdefs.asm):00222         DosFCB8Addr     EQU     $07B5           ; File Control Block 8 Address 
     07D4             (      dosdefs.asm):00223         DosFCB9Addr     EQU     $07D4           ; File Control Block 9 Address 
     07F3             (      dosdefs.asm):00224         DosFCBEnd       EQU     $07F3           ; First byte beyond last FCB
                      (      dosdefs.asm):00225         
     0800             (      dosdefs.asm):00226         DosDiskBuffBase EQU     $0800           ; Base of Disk buffers
                      (      dosdefs.asm):00227         
     001F             (      dosdefs.asm):00228         DosFCBLength    EQU     $1F             ; 31 bytes per FCB
                      (      dosdefs.asm):00229         
     000A             (      dosdefs.asm):00230         DosNumFCBs      EQU     (DosFCBEnd-DosFCB0Addr)/DosFCBLength    ; number of FCBs
                      (      dosdefs.asm):00231         
                      (      dosdefs.asm):00232         ;
                      (      dosdefs.asm):00233         ; FCB structure is :
                      (      dosdefs.asm):00234         ;
                      (      dosdefs.asm):00235         ; FCB format :
                      (      dosdefs.asm):00236         ; Pos   Len     Use
                      (      dosdefs.asm):00237         ; $00   8       File name
                      (      dosdefs.asm):00238         ; $08   3       Extension
                      (      dosdefs.asm):00239         ; $0B   1       Drive no (1..4)
                      (      dosdefs.asm):00240         ; $0C   3       Next read byte (file pointer?)
                      (      dosdefs.asm):00241         ; $0F   1       Directory flags
                      (      dosdefs.asm):00242         ; $10   3       Length of file
                      (      dosdefs.asm):00243         ; $13   2       First sector number (FSN) of extent 1
                      (      dosdefs.asm):00244         ; $15   2       LSN of extent 1
                      (      dosdefs.asm):00245         ; $17   1       sextors in extent 1
                      (      dosdefs.asm):00246         ; $18   2       First sector number (FSN) of extent 1
                      (      dosdefs.asm):00247         ; $1A   2       LSN of extent 1
                      (      dosdefs.asm):00248         ; $1C   1       sectors in extent 1
                      (      dosdefs.asm):00249         ; $1D   1       Number of dir entry
                      (      dosdefs.asm):00250         ; $1E   1       Directory number of last entry
                      (      dosdefs.asm):00251         
     0000             (      dosdefs.asm):00252         FCBFileName     EQU     $00     ; Filename (zero padded)
     0008             (      dosdefs.asm):00253         FCBExtension    EQU     $08     ; Extension (zero padded)
     000B             (      dosdefs.asm):00254         FCBDrive        EQU     $0B     ; Drive no
     000C             (      dosdefs.asm):00255         FCBFilePointer  EQU     $0C     ; File Pointer 
     000F             (      dosdefs.asm):00256         FCBDirFlags     EQU     $0F     ; Dir flags (attributes)
     0010             (      dosdefs.asm):00257         FCBFileLen      EQU     $10     ; File Length
     0013             (      dosdefs.asm):00258         FCBFSNExtent1   EQU     $13     ; FSN of extent 1
     0015             (      dosdefs.asm):00259         FCBLSNExtent1   EQU     $15     ; LSN of extent 1 
     0017             (      dosdefs.asm):00260         FCBSecExtent1   EQU     $17     ; Sectors in extent 1
     0018             (      dosdefs.asm):00261         FCBFSNExtent2   EQU     $18     ; FSN of extent 2
     001A             (      dosdefs.asm):00262         FCBLSNExtent2   EQU     $1A     ; LSN of extent 2 
     001C             (      dosdefs.asm):00263         FCBSecExtent2   EQU     $1C     ; Sectors in extent 2
     001D             (      dosdefs.asm):00264         FCBDiskFileNo   EQU     $1D     ; File number on disk, (dir entry no).
     001E             (      dosdefs.asm):00265         FCBDirNoLast    EQU     $1E     ; Dir no of last entry
                      (      dosdefs.asm):00266         
                      (      dosdefs.asm):00267         ;
                      (      dosdefs.asm):00268         ; Backup command stack frame offsets
                      (      dosdefs.asm):00269         ;
                      (      dosdefs.asm):00270         ; These are offset from U on stack
                      (      dosdefs.asm):00271         ;
                      (      dosdefs.asm):00272         
     0000             (      dosdefs.asm):00273         BupSrcDrive     EQU     0       ; Drive number of source 
     0001             (      dosdefs.asm):00274         BupSrcTrk       EQU     1       ; Source track 
     0002             (      dosdefs.asm):00275         BupSrcSec       EQU     2       ; Source sector no
     0003             (      dosdefs.asm):00276         BupSrcMess      EQU     3       ; Insert source message ptr
     0005             (      dosdefs.asm):00277         BupSrcBuff      EQU     5       ; Source sector buffer addr 
     0007             (      dosdefs.asm):00278         BupDestDrive    EQU     7       ; Drive number of dest 
     0008             (      dosdefs.asm):00279         BupDestTrk      EQU     8       ; Dest track a
     0009             (      dosdefs.asm):00280         BupDestSec      EQU     9       ; Dest sector no
     000A             (      dosdefs.asm):00281         BupDestMess     EQU     10      ; Insert dest message ptr
     000C             (      dosdefs.asm):00282         BupDestBuff     EQU     12      ; Dest sector buffer addr 
     000E             (      dosdefs.asm):00283         BupSecTrk       EQU     14      ; Sector count per track to copy 
     000F             (      dosdefs.asm):00284         BupAvailPages   EQU     15      ; Pages available to buffer sectors
                      (      dosdefs.asm):00285         
                      (      dosdefs.asm):00286         ;
                      (      dosdefs.asm):00287         ; Offset from X, which will point to BupSrcDrive, or BupDestDrive
                      (      dosdefs.asm):00288         ; 
                      (      dosdefs.asm):00289         
     0000             (      dosdefs.asm):00290         BupDrive        EQU     0       ; Drive number  
     0001             (      dosdefs.asm):00291         BupTrk          EQU     1       ; track 
     0002             (      dosdefs.asm):00292         BupSec          EQU     2       ; sector
     0003             (      dosdefs.asm):00293         BupMess         EQU     3       ; backup message
     0005             (      dosdefs.asm):00294         BupBuff         EQU     5       ; Source sector buffer addr ?
                      (      dosdefs.asm):00295         
     0010             (      dosdefs.asm):00296         BupStackFrame   EQU     16      ; backup stack frame size
                      (      dosdefs.asm):00297         
     D800             (      dosdefs.asm):00298         SpinUpDelay     EQU     $D800   ; Value for timeout loop
                      (      dosdefs.asm):00299         
                      (      dosdefs.asm):00300         
                      (      dosdefs.asm):00301         ;
                      (      dosdefs.asm):00302         ; Sync dir stack frame offsets
                      (      dosdefs.asm):00303         ;
                      (      dosdefs.asm):00304         ; These are offset from U on stack
                      (      dosdefs.asm):00305         ;
                      (      dosdefs.asm):00306         
     0000             (      dosdefs.asm):00307         SyncDriveCount  EQU     0       ; drive counter, done by bitshift
     0001             (      dosdefs.asm):00308         SyncDrive       EQU     1       ; Drive we are syncing
     0002             (      dosdefs.asm):00309         SyncBufferNo    EQU     2       ; Current buffer no
     0003             (      dosdefs.asm):00310         SyncSecNo       EQU     3       ; Sector we are syncing
     0004             (      dosdefs.asm):00311         SyncSectors     EQU     4       ; 4 sector numbers in the disk buffers
                      (      dosdefs.asm):00312         
                      (      dosdefs.asm):00313         ;
                      (      dosdefs.asm):00314         ; Dos function codes used by hardware routine.
                      (      dosdefs.asm):00315         ; 
                      (      dosdefs.asm):00316         
     0000             (      dosdefs.asm):00317         DosFnRestore    EQU     $00     ; Restore to track 0
     0001             (      dosdefs.asm):00318         DosFnSeek       EQU     $01     ; Seek to a track
     0002             (      dosdefs.asm):00319         DosFnReadSec    EQU     $02     ; Read a sector
     0003             (      dosdefs.asm):00320         DosFnWriteSecV  EQU     $03     ; Write a sector with verify
     0004             (      dosdefs.asm):00321         DosFnWriteSecN  EQU     $04     ; Write a sector no verify
     0005             (      dosdefs.asm):00322         DosFnWriteTrack EQU     $05     ; Write (format) track
     0006             (      dosdefs.asm):00323         DosFnReadAddr   EQU     $06     ; Read address mark
     0007             (      dosdefs.asm):00324         DosFnReadSec2   EQU     $07     ; Read first two bytes of a sector
     0008             (      dosdefs.asm):00325         DosFnWriteDef   EQU     $08     ; Write defective sector
                      (      dosdefs.asm):00326         
                      (      dosdefs.asm):00327         *******************************************
                      (      dosdefs.asm):00328         ***** Directory Track realted defines *****
                      (      dosdefs.asm):00329         *******************************************
                      (      dosdefs.asm):00330         
                      (      dosdefs.asm):00331         ;
                      (      dosdefs.asm):00332         ; Dir entry format(s).
                      (      dosdefs.asm):00333         ;
                      (      dosdefs.asm):00334         ; Dragon/Super dos directory entries can take one of 2 formats, they can be either a
                      (      dosdefs.asm):00335         ; filename block, containing filename, attributes & 4 allocation entries, or they can
                      (      dosdefs.asm):00336         ; be a continuation block, containing just allocation entries. 
                      (      dosdefs.asm):00337         ; This is controled by the byte at offset $18, and the attributes.
                      (      dosdefs.asm):00338         ;
                      (      dosdefs.asm):00339         ; if AttrContinued = 0 then 
                      (      dosdefs.asm):00340         ;       the byte at offset $18, contains the number of number of bytes in the last sector (256 bytes = 0).
                      (      dosdefs.asm):00341         ;
                      (      dosdefs.asm):00342         ; if AttrContinued = 1 then 
                      (      dosdefs.asm):00343         ;       the byte at offset $18 controls the format of the entry :
                      (      dosdefs.asm):00344         ;               if 0 then 
                      (      dosdefs.asm):00345         ;                       Entry is a filename entry
                      (      dosdefs.asm):00346         ;               else
                      (      dosdefs.asm):00347         ;                       Entry is a continuation block.
                      (      dosdefs.asm):00348         
                      (      dosdefs.asm):00349         ; Filename block format 
                      (      dosdefs.asm):00350         
     0000             (      dosdefs.asm):00351         DirEntAttr      EQU     $00             ; Attributes (see below)
     0001             (      dosdefs.asm):00352         DirEntFilename  EQU     $01             ; Filename, zero padded
     0009             (      dosdefs.asm):00353         DirEntExtension EQU     $09             ; Extension, zero padded
     000C             (      dosdefs.asm):00354         DirEntFnBlock1  EQU     $0C             ; Allocation block #1
     000F             (      dosdefs.asm):00355         DirEntFnBlock2  EQU     $0F             ; Allocation block #2
     0012             (      dosdefs.asm):00356         DirEntFnBlock3  EQU     $12             ; Allocation block #3
     0015             (      dosdefs.asm):00357         DirEntFnBlock4  EQU     $15             ; Allocation block #4
     0018             (      dosdefs.asm):00358         DirEntFlag      EQU     $18             ; Filename/Continuation flag 0/nonzero
     0018             (      dosdefs.asm):00359         DirEntLastBytes EQU     $18             ; bytes in last sector
                      (      dosdefs.asm):00360         
     0019             (      dosdefs.asm):00361         DirEntryLen     EQU     $19             ; Length of Dir Entry.
     0004             (      dosdefs.asm):00362         DirEntExts      EQU     4               ; 4 allocatoion blocks in filename block
                      (      dosdefs.asm):00363         
                      (      dosdefs.asm):00364         ; Continuation block, DirEntAttr, and DirEntFlag, as above.
                      (      dosdefs.asm):00365         
     0001             (      dosdefs.asm):00366         DirEntCntBlock1 EQU     $01             ; Allocation block #1
     0004             (      dosdefs.asm):00367         DirEntCntBlock2 EQU     $04             ; Allocation block #2
     0007             (      dosdefs.asm):00368         DirEntCntBlock3 EQU     $07             ; Allocation block #3
     000A             (      dosdefs.asm):00369         DirEntCntBlock4 EQU     $0A             ; Allocation block #4
     000D             (      dosdefs.asm):00370         DirEntCntBlock5 EQU     $0D             ; Allocation block #5
     0010             (      dosdefs.asm):00371         DirEntCntBlock6 EQU     $10             ; Allocation block #6
     0013             (      dosdefs.asm):00372         DirEntCntBlock7 EQU     $13             ; Allocation block #7
                      (      dosdefs.asm):00373         
     0007             (      dosdefs.asm):00374         DirEntCntExts   EQU     7               ; 7 allocatoion blocks in continuation block
                      (      dosdefs.asm):00375         
     000A             (      dosdefs.asm):00376         DirBlksPerSec   EQU     $0A             ; Number of dir blocks per dir sector
                      (      dosdefs.asm):00377         
                      (      dosdefs.asm):00378         ;
                      (      dosdefs.asm):00379         ; Allocation block format.
                      (      dosdefs.asm):00380         ;
                      (      dosdefs.asm):00381         
     0000             (      dosdefs.asm):00382         AllocLSN        EQU     $00             ; Logical sector number of start of allocation
     0002             (      dosdefs.asm):00383         AllocCount      EQU     $02             ; Count of number of sectors allocated.
     0003             (      dosdefs.asm):00384         AllocEntrySize  EQU     $03             ; Size of allocation entry
                      (      dosdefs.asm):00385         
     0003             (      dosdefs.asm):00386         AllocLen        EQU     3               ; Allocation length
                      (      dosdefs.asm):00387         
                      (      dosdefs.asm):00388         ;
                      (      dosdefs.asm):00389         ; File Attributes
                      (      dosdefs.asm):00390         ;
                      (      dosdefs.asm):00391         
     0080             (      dosdefs.asm):00392         AttrDeleted     EQU     %10000000       ; Deleted, may be reused
     0020             (      dosdefs.asm):00393         AttrContinued   EQU     %00100000       ; Continuation entry, byte at $18 giver next entry no
     0008             (      dosdefs.asm):00394         AttrEndOfDir    EQU     %00001000       ; End of directory, no more entries need to be scanned
     0002             (      dosdefs.asm):00395         AttrWriteProt   EQU     %00000010       ; Write protect flag
     0001             (      dosdefs.asm):00396         AttrIsCont      EQU     %00000001       ; This is a continuation entry.
                      (      dosdefs.asm):00397         
     0089             (      dosdefs.asm):00398         AttrAtFormat    EQU     AttrDeleted+AttrEndOfDir+AttrIsCont     ; Attributes set in DSKINIT     
     0081             (      dosdefs.asm):00399         AttrAfterDel    EQU     AttrDeleted+AttrIsCont                  ; Attributes set by DosDeleteFile
                      (      dosdefs.asm):00400         
     000A             (      dosdefs.asm):00401         DirEntPerSec    EQU     $0A                             ; Directory entries per sector
     00FA             (      dosdefs.asm):00402         DirLastByte     EQU     (DirEntPerSec*DirEntryLen)      ; First byte beyond last dire entry in sector
                      (      dosdefs.asm):00403         
                      (      dosdefs.asm):00404         ;
                      (      dosdefs.asm):00405         ; Offsets in Sector 0 on Dir track
                      (      dosdefs.asm):00406         ;
                      (      dosdefs.asm):00407         
     0000             (      dosdefs.asm):00408         BitmapPart1     EQU     $00             ; Bitmap uses bytes $00..$FB on first sector
     00FC             (      dosdefs.asm):00409         DirTracks       EQU     $FC             ; Tracks on disk
     00FD             (      dosdefs.asm):00410         DirSecPerTrk    EQU     $FD             ; Sectors/track 18=Single sided, 36=Double sided
     00FE             (      dosdefs.asm):00411         DirTracks1s     EQU     $FE             ; complement of DirTracks (used to validate)
     00FF             (      dosdefs.asm):00412         DirSecPerTrk1s  EQU     $FF             ; Complement of DirSecPerTrk (used to validate)
                      (      dosdefs.asm):00413         
                      (      dosdefs.asm):00414         ;
                      (      dosdefs.asm):00415         ; DOS Error codes.
                      (      dosdefs.asm):00416         ;
                      (      dosdefs.asm):00417         
     0080             (      dosdefs.asm):00418         ErrNR   EQU     $80                     ; not ready
     0082             (      dosdefs.asm):00419         ErrSK   EQU     $82                     ; seek
     0084             (      dosdefs.asm):00420         ErrWP   EQU     $84                     ; write protect
     0086             (      dosdefs.asm):00421         ErrRT   EQU     $86                     ; record type
     0088             (      dosdefs.asm):00422         ErrRF   EQU     $88                     ; record not found
     008A             (      dosdefs.asm):00423         ErrCC   EQU     $8A                     ; CRC
     008C             (      dosdefs.asm):00424         ErrLD   EQU     $8C                     ; Lost data
     008E             (      dosdefs.asm):00425         ErrBT   EQU     $8E                     ; boot
     0090             (      dosdefs.asm):00426         ErrIV   EQU     $90                     ; invalid volume / directory
     0092             (      dosdefs.asm):00427         ErrFD   EQU     $92                     ; Full directory
     0094             (      dosdefs.asm):00428         ErrDF   EQU     $94                     ; Disk full
     0096             (      dosdefs.asm):00429         ErrFS   EQU     $96                     ; File spec
     0098             (      dosdefs.asm):00430         ErrPT   EQU     $98                     ; Protection
     009A             (      dosdefs.asm):00431         ErrPE   EQU     $9A                     ; (read) Past end 
     009C             (      dosdefs.asm):00432         ErrFF   EQU     $9C                     ; File not Found 
     009E             (      dosdefs.asm):00433         ErrFE   EQU     $9E                     ; File exists
     00A0             (      dosdefs.asm):00434         ErrNE   EQU     $A0                     ; (file does) Not Exist
     00A2             (      dosdefs.asm):00435         ErrTF   EQU     $A2                     ; Too many Files open
     00A4             (      dosdefs.asm):00436         ErrPR   EQU     $A4                     ; Parameter
     00A6             (      dosdefs.asm):00437         ErrUD   EQU     $A6                     ; Undefined
     00FF             (      dosdefs.asm):00438         ErrSFF  EQU     $FF                     ; ????
                      (      dosdefs.asm):00439         
                      (      dosdefs.asm):00440                 if 0
0000                  (      dosdefs.asm):00441         DDErrNR         EQU     $80             ; Not ready
0000                  (      dosdefs.asm):00442         DDErrSK         EQU     $82             ; seek
0000                  (      dosdefs.asm):00443         DDErrWP         EQU     $84             ; write protect
0000                  (      dosdefs.asm):00444         DDErrRT         EQU     $86             ; record type
0000                  (      dosdefs.asm):00445         DDErrRF         EQU     $88             ; record not found
0000                  (      dosdefs.asm):00446         DDErrCC         EQU     $8A             ; CRC
0000                  (      dosdefs.asm):00447         DDErrLD         EQU     $8C             ; Lost data
0000                  (      dosdefs.asm):00448         DDErrBT         EQU     $8E             ; boot
0000                  (      dosdefs.asm):00449         DDErrIV         EQU     $90             ; invalid volume / directory
0000                  (      dosdefs.asm):00450         DDErrFD         EQU     $92             ; Full directory
0000                  (      dosdefs.asm):00451         DDErrDF         EQU     $94             ; Disk full
0000                  (      dosdefs.asm):00452         DDErrFS         EQU     $96             ; File spec
0000                  (      dosdefs.asm):00453         DDErrPT         EQU     $98             ; Protection
0000                  (      dosdefs.asm):00454         DDErrPE         EQU     $9A             ; (read) Past end 
0000                  (      dosdefs.asm):00455         DDErrFF         EQU     $9C             ; File not Found 
0000                  (      dosdefs.asm):00456         DDErrFE         EQU     $9E             ; File exists
0000                  (      dosdefs.asm):00457         DDErrNE         EQU     $A0             ; (file does) Not Exist
0000                  (      dosdefs.asm):00458         DDErrTF         EQU     $A2             ; Too many Files open
0000                  (      dosdefs.asm):00459         DDErrPR         EQU     $A4             ; Parameter
0000                  (      dosdefs.asm):00460         DDErrUD         EQU     $A6             ; Undefined
0000                  (      dosdefs.asm):00461         DDErrSFF        EQU     $FF             ; ????
                      (      dosdefs.asm):00462                 endc
     0080             (      dosdefs.asm):00463         DDFirstError    EQU     ErrNR           ; First error code
                      (      dosdefs.asm):00464         
     0012             (      dosdefs.asm):00465         SecTrkSS        EQU     18              ; 18 sectors / track single sided
     0024             (      dosdefs.asm):00466         SecTrkDS        EQU     36              ; 36 sectors / track double sided
                      (      dosdefs.asm):00467         
     0B40             (      dosdefs.asm):00468         MaxLSN          EQU     (SecTrkDS*80)   ; Maximum possible LSN
                      (      dosdefs.asm):00469         
     0800             (      dosdefs.asm):00470         DskInitBuffer   EQU     $0800           ; Address of format disk buffer
     0008             (      dosdefs.asm):00471         SectorsPerBAM   EQU     $08             ; Each BAM entry is for 8 sectors
     005A             (      dosdefs.asm):00472         BAMEntries40SS  EQU     (SectorsPerTrack*40)/SectorsPerBAM      ; Number of BAM entries for a single sided 40 track disk
     00B4             (      dosdefs.asm):00473         BAMEntriesSec   EQU     (MaxLSN/2)/SectorsPerBAM                ; Number of BAM entries per BAM sector
     05A0             (      dosdefs.asm):00474         BAMLSNPerSec    EQU     MaxLSN/2        ; Number of LSNs per BAM sector
                      (      dosdefs.asm):00475         
                      (      dosdefs.asm):00476         ; Offsets within BAM of directory track flags
     002D             (      dosdefs.asm):00477         BAMOffDirPriSS  EQU     (SectorsPerTrack*DirPrimary)/SectorsPerBAM
     0024             (      dosdefs.asm):00478         BAMOffDirBakSS  EQU     (SectorsPerTrack*DirBackup)/SectorsPerBAM
     005A             (      dosdefs.asm):00479         BAMOffDirPriDS  EQU     (SectorsPerTrack*(DirPrimary*2))/SectorsPerBAM
     0048             (      dosdefs.asm):00480         BAMOffDirBakDS  EQU     (SectorsPerTrack*(DirBackup*2))/SectorsPerBAM
                      (      dosdefs.asm):00481         
     0002             (      dosdefs.asm):00482         BAMSecCount     EQU     $02             ; No of BAM Sectors
     0010             (      dosdefs.asm):00483         DIRSecCount     EQU     $10             ; Dir sector count
                      (      dosdefs.asm):00484         
     00FF             (      dosdefs.asm):00485         DosFlagTrue     EQU     $FF             ; flag true / enabled
     0000             (      dosdefs.asm):00486         DosFlagFalse    EQU     $00             ; flag false /disabled
                      (      dosdefs.asm):00487         
     00FF             (      dosdefs.asm):00488         IOInProgress    EQU     DosFlagTrue     ; Flag that DOS IO in progress
     00FF             (      dosdefs.asm):00489         ErrGotoEnabled  EQU     DosFlagTrue     ; Flag that on error goto is enabled
                      (      dosdefs.asm):00490         
     0064             (      dosdefs.asm):00491         AutoStartLine   EQU     100             ; Default start line for AUTO
     000A             (      dosdefs.asm):00492         AutoIncrement   EQU     10              ; Default increment for AUTO
                      (      dosdefs.asm):00493         
                      (      dosdefs.asm):00494         ; DosFRead code shared between file read wrie and verify
                      (      dosdefs.asm):00495         ; DosRWFlag determines the operation to be performed
                      (      dosdefs.asm):00496         
     0000             (      dosdefs.asm):00497         FileOpRead      EQU     $00             ; Reading file
     0001             (      dosdefs.asm):00498         FileOpWrite     EQU     $01             ; Writing file
     00FF             (      dosdefs.asm):00499         FileOpVerify    EQU     $FF             ; verifying written data
                      (      dosdefs.asm):00500         
                      (      dosdefs.asm):00501         ; Extend file stack fram offsets
                      (      dosdefs.asm):00502         
     0000             (      dosdefs.asm):00503         ExtendSecCount  EQU     $00             ; Sector count
                      (      dosdefs.asm):00504         ;ExtendDirEntPtr        EQU     $04             ; Pointer to dir entry with last sector 
                      (      dosdefs.asm):00505         ;ExtendGeomPtr  EQU     $08             ; Pointer to disk geometry buffer
     000A             (      dosdefs.asm):00506         ExtendSecCount2 EQU     $0A             ; Sector count
                      (      dosdefs.asm):00507         
                      (      dosdefs.asm):00508         ;
                      (      dosdefs.asm):00509         ; Offsets within file header, compatible with DragonDos/SuperDos
                      (      dosdefs.asm):00510         ;
     0000             (      dosdefs.asm):00511         HdrID55         EQU     $00             ; magic marker byte #1
     0001             (      dosdefs.asm):00512         HdrType         EQU     $01             ; file type see filetypes below
     0002             (      dosdefs.asm):00513         HdrLoad         EQU     $02             ; Load address of file
     0004             (      dosdefs.asm):00514         HdrLen          EQU     $04             ; length of file
     0006             (      dosdefs.asm):00515         HdrExec         EQU     $06             ; entry address of file
     0008             (      dosdefs.asm):00516         HdrIDAA         EQU     $08             ; magic marker byte #2
                      (      dosdefs.asm):00517         
     0009             (      dosdefs.asm):00518         FileHeadLen     EQU     $09             ; header length in bytes
                      (      dosdefs.asm):00519         
                      (      dosdefs.asm):00520         ; File types
                      (      dosdefs.asm):00521         
     0001             (      dosdefs.asm):00522         FTypeBas        EQU     $01             ; Basic files
     0002             (      dosdefs.asm):00523         FTypeBin        EQU     $02             ; Binary file types
                      (      dosdefs.asm):00524         
                      (      dosdefs.asm):00525         ; Marker bytes
     0055             (      dosdefs.asm):00526         MarkerHeadStart EQU     $55             ; start header marker
     00AA             (      dosdefs.asm):00527         MarkerHeadEnd   EQU     $AA             ; end header marker
                      (      dosdefs.asm):00528         
                      (      dosdefs.asm):00529         ; Device number
     0001             (      dosdefs.asm):00530         DevDisk         EQU     $01             ; disk device
                      (       ddos12.asm):00027                         use     romdefs.asm
     0000             (      romdefs.asm):00001         DStubResWordsOfs                EQU     $0000           Offset of number of reserved words
     0001             (      romdefs.asm):00002         DStubResLookupOfs               EQU     $0001           Offset of reserved word lookup table
     0003             (      romdefs.asm):00003         DStubResJumpOfs                 EQU     $0003           Offset of reserved word jump table
     0005             (      romdefs.asm):00004         DStubFuncsOfs                   EQU     $0005           Offset of nummber of functions
     0006             (      romdefs.asm):00005         DStubFuncsLookupOfs             EQU     $0006           Offset of function lookup table
     0008             (      romdefs.asm):00006         DStubFuncsJumpOfs               EQU     $0008           Offset of functions jump table
                      (      romdefs.asm):00007         
     0021             (      romdefs.asm):00008         DSkip1                          EQU     $0021           Skip 1 byte (BRN)
     008C             (      romdefs.asm):00009         DSkip2                          EQU     $008C           Skip 2 bytes (CMPX)
     0086             (      romdefs.asm):00010         DSkip1LD                        EQU     $0086           Skip 1 byte (LDA)
     007D             (      romdefs.asm):00011         DSkip2TST                       EQU     $007D           Skip 2 bytes (TST)
                      (      romdefs.asm):00012         
     0000             (      romdefs.asm):00013         DCoCoVec167                     EQU     $0000           Vector dest for 167 
     0000             (      romdefs.asm):00014         DCoCoVect16A                    EQU     $0000           Vector dest for 16A
     0000             (      romdefs.asm):00015         DCoCoVect176                    EQU     $0000           Vector dest for 176
     0000             (      romdefs.asm):00016         DCoCoVect179                    EQU     $0000           Vector dest for 179
     0000             (      romdefs.asm):00017         DCoCoVect18B                    EQU     $0000           Vector dest for 18B
     0000             (      romdefs.asm):00018         DCoCoVect191                    EQU     $0000           Vector dest for 191
     0000             (      romdefs.asm):00019         DCoCoVect194                    EQU     $0000           Vector Dest for 194
     0000             (      romdefs.asm):00020         DCoCoVect197                    EQU     $0000           Vector Dest for 197
     0000             (      romdefs.asm):00021         DCoCoVect19A                    EQU     $0000           Vector Dest for 19A
     0000             (      romdefs.asm):00022         DCoCoVect1A3                    EQU     $0000           Vector Dest for 1A3
     0027             (      romdefs.asm):00023         DAddrFWareRamTop                EQU     $0027           Top of firmware RAM CLEAR xxx,yyyy set this to yyyy
     0074             (      romdefs.asm):00024         DAddrRamTop                     EQU     $0074           Physical end of RAM (4K, 16K, 32K or 64K).
     0021             (      romdefs.asm):00025         DAddrStack                      EQU     $0021           Address of top of machine stack
     0123             (      romdefs.asm):00026         DBasAddrCmdDisp                 EQU     $0123           Address of basic command dispatch
     0121             (      romdefs.asm):00027         DBasAddrCmdList                 EQU     $0121           Address of basic command list
     012D             (      romdefs.asm):00028         DBasAddrDskCmdDisp              EQU     $012D           Address of disk basic command dispatch
     012B             (      romdefs.asm):00029         DBasAddrDskCmdList              EQU     $012B           Address of disk basic command list
     0132             (      romdefs.asm):00030         DBasAddrDskFuncDisp             EQU     $0132           Address of disk basic function dispatcher
     0130             (      romdefs.asm):00031         DBasAddrDskFuncList             EQU     $0130           Address of disk basic function list
     0128             (      romdefs.asm):00032         DBasAddrFuncDisp                EQU     $0128           Address of basic function dispatcher
     0126             (      romdefs.asm):00033         DBasAddrFuncList                EQU     $0126           Address of basic function list
     00A6             (      romdefs.asm):00034         DBasAddrSigByte                 EQU     $00A6           Address of current significant bit in command line
     B84E             (      romdefs.asm):00035         DBasAOError                     EQU     $B84E           Print ?AO Error and return to basic
     0005             (      romdefs.asm):00036         DBasArrayEval                   EQU     $0005           Array evaluation flag, 0=eval, 1=dimensioning
     B400             (      romdefs.asm):00037         DBasBootBasic                   EQU     $B400           Restart basic, as if power on, also deletes current program
     0017             (      romdefs.asm):00038         DBasBotStack                    EQU     $0017           Bottom of stack at last check
     84DA             (      romdefs.asm):00039         DBasBRARun                      EQU     $84DA           BRA to main loop, used by DOS
     0000             (      romdefs.asm):00040         DBasBreakFlag                   EQU     $0000           Break flag, +ve=stop,-ve=end
     03D7             (      romdefs.asm):00041         DBasBuffer                      EQU     $03D7           Basic buffer space
     831C             (      romdefs.asm):00042         DBasChkArrSpaceMv               EQU     $831C           Check memory space at top of arrays + move arrays
     8331             (      romdefs.asm):00043         DBasChkB2Free                   EQU     $8331           Check B*2 bytes free above Arrays, OM error if not
     9C76             (      romdefs.asm):00044         DBasChkDirect                   EQU     $9C76           Check for direct mode, ID Error if so
     009F             (      romdefs.asm):00045         DBasChrGet                      EQU     $009F           Get next basic character routine
     00A5             (      romdefs.asm):00046         DBasChrGetCurr                  EQU     $00A5           Get current basic ccharacter
     00D3             (      romdefs.asm):00047         DBasCloadMOffs                  EQU     $00D3           2s complement of CLOADM offset
     8371             (      romdefs.asm):00048         DBasCmdMode                     EQU     $8371           Return to command mode
     0029             (      romdefs.asm):00049         DBasContLine                    EQU     $0029           Line no used by CONT
     0068             (      romdefs.asm):00050         DBasCurrentLine                 EQU     $0068           Current line no $FFFF in direct mode
     0001             (      romdefs.asm):00051         DBasDelim1                      EQU     $0001           First string delimiter
     0002             (      romdefs.asm):00052         DBasDelim2                      EQU     $0002           Second string delimiter
     002F             (      romdefs.asm):00053         DBasDirectTextPtr               EQU     $002F           Direct mode text pointer
     0008             (      romdefs.asm):00054         DBasDisArraySearch              EQU     $0008           Disable array search flag, 0=allow 0<>disable
     B851             (      romdefs.asm):00055         DBasDNError                     EQU     $B851           Print ?DN Error and return to basic
     84ED             (      romdefs.asm):00056         DBasDoDispatch                  EQU     $84ED           Do command dispatech, X must point to dispatch table
     00D7             (      romdefs.asm):00057         DBasEditorLineLen               EQU     $00D7           Editor line length
     82A9             (      romdefs.asm):00058         DBasErrorCodeTable              EQU     $82A9           List of 2 byte error codes eg 'SN' 'OM' 'UL' etc
     009D             (      romdefs.asm):00059         DBasExecAddr                    EQU     $009D           Exec address, on D64, at startup points to routine to boot all ram mode
     8B8D             (      romdefs.asm):00060         DBasFCError                     EQU     $8B8D           Print ?FC Error and return to basic
     83FF             (      romdefs.asm):00061         DBasFindLineNo                  EQU     $83FF           Find a line number in basic program
     B848             (      romdefs.asm):00062         DBasFMError                     EQU     $B848           Print ?FM Error and return to basic
     0007             (      romdefs.asm):00063         DBasGarbageFlag                 EQU     $0007           Garbage collection flag
     0003             (      romdefs.asm):00064         DBasGenCount                    EQU     $0003           General count/scratch var
     B7D4             (      romdefs.asm):00065         DBasGetDevNo                    EQU     $B7D4           Get dev no from line & validate
     869A             (      romdefs.asm):00066         DBasGetLineNo                   EQU     $869A           Get line no and store in BasTempLine
     8DEA             (      romdefs.asm):00067         DBasGetStrFirst                 EQU     $8DEA           Get first character of string into B
     8D9A             (      romdefs.asm):00068         DBasGetStrLenAddr               EQU     $8D9A           Get string len in B and address in X of string desc in FPA2
     8027             (      romdefs.asm):00069         DBasicCassBitIn                 EQU     $8027           Cassette bit input
     8024             (      romdefs.asm):00070         DBasicCassByIn                  EQU     $8024           Cassette byte input
     801E             (      romdefs.asm):00071         DBasicCassByOut                 EQU     $801E           Cassette byte output
     8018             (      romdefs.asm):00072         DBasicCassOff                   EQU     $8018           Cassette player motor off
     8015             (      romdefs.asm):00073         DBasicCassOn                    EQU     $8015           Cassette player motor on
     8021             (      romdefs.asm):00074         DBasicCassOnRd                  EQU     $8021           Cassette on for reading
     8009             (      romdefs.asm):00075         DBasicCursorB                   EQU     $8009           Cursor blink
     8000             (      romdefs.asm):00076         DBasicHWInit                    EQU     $8000           Hardware initialisation
     8012             (      romdefs.asm):00077         DBasicJoyIn                     EQU     $8012           Joystick input
     8006             (      romdefs.asm):00078         DBasicKbdIn                     EQU     $8006           Keyboard input
     800F             (      romdefs.asm):00079         DBasicPrintOut                  EQU     $800F           Printer output
     800C             (      romdefs.asm):00080         DBasicScreenOut                 EQU     $800C           Screen output
     802A             (      romdefs.asm):00081         DBasicSerIn                     EQU     $802A           Read a byte from serial
     802D             (      romdefs.asm):00082         DBasicSerOut                    EQU     $802D           Write a byte to serial port
     8030             (      romdefs.asm):00083         DBasicSetBaud                   EQU     $8030           Set baud rate
     8003             (      romdefs.asm):00084         DBasicSWInit                    EQU     $8003           Software initialisation
     801B             (      romdefs.asm):00085         DBasicWriteLead                 EQU     $801B           Cassette write leader
     9C7C             (      romdefs.asm):00086         DBasIDError                     EQU     $9C7C           Print ?ID Error and return to basic
     0004             (      romdefs.asm):00087         DBasIfCount                     EQU     $0004           If count - how many in a line
     B5D3             (      romdefs.asm):00088         DBasInBuffFromX                 EQU     $B5D3           Read input buffer at X as basic input
     0009             (      romdefs.asm):00089         DBasInputFlag                   EQU     $0009           Iinput/read flag, 0=input 0<>read
     B84B             (      romdefs.asm):00090         DBasIOError                     EQU     $B84B           Print ?IO Error and return to basic
     9D3D             (      romdefs.asm):00091         DBasIRQVec                      EQU     $9D3D           Basic IRQ routine, increments timer
     015A             (      romdefs.asm):00092         DBasJoyVal0                     EQU     $015A           Joystick(0) value
     015B             (      romdefs.asm):00093         DBasJoyVal1                     EQU     $015B           Joystick(1) value
     015C             (      romdefs.asm):00094         DBasJoyVal2                     EQU     $015C           Joystick(2) value
     015D             (      romdefs.asm):00095         DBasJoyVal3                     EQU     $015D           Joystick(3) value
     9DD9             (      romdefs.asm):00096         DBasLineInputEntry              EQU     $9DD9           Entry into LINE INPUT routine, used by DOS
     02DC             (      romdefs.asm):00097         DBasLinInpBuff                  EQU     $02DC           Basic line input buffer
     02DA             (      romdefs.asm):00098         DBasLinInpHead                  EQU     $02DA           Basic line input buffer header
     8EAA             (      romdefs.asm):00099         DBasList                        EQU     $8EAA           List basic program to SysDevN A must be 0 on entry
     0066             (      romdefs.asm):00100         DBasListLine                    EQU     $0066           Current line during list
     AA87             (      romdefs.asm):00101         DBasLocateScreen                EQU     $AA87           Initialise beginning of basic after graphics screen, no of pages in A
     8D6B             (      romdefs.asm):00102         DBasLSError                     EQU     $8D6B           Print ?LS Error and return to basic
     A101             (      romdefs.asm):00103         DBasNEError                     EQU     $A101           Print ?NE Error and return to basic
     8417             (      romdefs.asm):00104         DBasNew                         EQU     $8417           Remove current basic program from meory, like NEW command
     B631             (      romdefs.asm):00105         DBasNOError                     EQU     $B631           Print ?NO Error and return to basic
     0120             (      romdefs.asm):00106         DBasNumCmds                     EQU     $0120           Number of basic commands
     012A             (      romdefs.asm):00107         DBasNumDskCmds                  EQU     $012A           Number of disk basic commands
     012F             (      romdefs.asm):00108         DBasNumDskFuncs                 EQU     $012F           Number of disk basic functions
     0125             (      romdefs.asm):00109         DBasNumFuncs                    EQU     $0125           Number of basic functions
     002D             (      romdefs.asm):00110         DBasOldInputPtr                 EQU     $002D           Pointer to saved input during a STOP
     8342             (      romdefs.asm):00111         DBasOMError                     EQU     $8342           Print ?OM Error and return to basic
     91DB             (      romdefs.asm):00112         DBasOVError                     EQU     $91DB           Print ?OV Error and return to basic
     851B             (      romdefs.asm):00113         DBasPollKeyboard                EQU     $851B           Basic, poll keyboard and check for break
     978E             (      romdefs.asm):00114         DBasRandom8                     EQU     $978E           Generate an 8 bit random number and place in BasRandomSeed+1
     0115             (      romdefs.asm):00115         DBasRandomSeed                  EQU     $0115           Random number seed for RND function
     000A             (      romdefs.asm):00116         DBasRelateFlag                  EQU     $000A           Relational operator flag
     00D1             (      romdefs.asm):00117         DBasRenumStart                  EQU     $00D1           Renum start line no
     00D5             (      romdefs.asm):00118         DBasRenumStartLine              EQU     $00D5           Renum start line number
     00CF             (      romdefs.asm):00119         DBasRenumVal                    EQU     $00CF           Renum increment value
     8434             (      romdefs.asm):00120         DBasResetStack                  EQU     $8434           Reset basic stack to initial position
     8C52             (      romdefs.asm):00121         DBasResStr                      EQU     $8C52           Reserve B bytes of string space return start in X, setup low mem vars
     8CB3             (      romdefs.asm):00122         DBasResStr2                     EQU     $8CB3           Reserve B bytes of string space return start in X
     00AB             (      romdefs.asm):00123         DBasRndData                     EQU     $00AB           Used by RND
     849F             (      romdefs.asm):00124         DBasRun                         EQU     $849F           Run basic program in memory, like RUN
     85EE             (      romdefs.asm):00125         DBasSetProgPtrX                 EQU     $85EE           Sets basic program pointer to X-1
     B4B2             (      romdefs.asm):00126         DBasSignonMess                  EQU     $B4B2           Signon message address, for CoCo this is for Extended basic.
     85E7             (      romdefs.asm):00127         DBasSkipLineNo                  EQU     $85E7           Skip past line no in basic line, UL error if no line no.
     89B4             (      romdefs.asm):00128         DBasSNError                     EQU     $89B4           Print ?SN Error and return to basic
     0019             (      romdefs.asm):00129         DBasStartProg                   EQU     $0019           Start addr of basic program
     8C99             (      romdefs.asm):00130         DBasSTError                     EQU     $8C99           Print ?OM Error and return to basic
     01A9             (      romdefs.asm):00131         DBasStrDescStack                EQU     $01A9           String descriptor stack
     000B             (      romdefs.asm):00132         DBasStrFirstFreeTemp            EQU     $000B           First free temory string space pointer
     000D             (      romdefs.asm):00133         DBasStrLastUsedTemp             EQU     $000D           Last used tempory string space pointer
     0025             (      romdefs.asm):00134         DBasStrUtil                     EQU     $0025           Utility string pointer
     0120             (      romdefs.asm):00135         DBasStub0                       EQU     $0120           Basic Stub 0 (All basic on Dragon, Colour basic on Tandy)
     012A             (      romdefs.asm):00136         DBasStub1                       EQU     $012A           Basic stub 1 (Disk basic on Dragon, Extended basic on Tandy)
     0134             (      romdefs.asm):00137         DBasStub2                       EQU     $0134           Basic Stub 2 (Null on dragon, Disk basic on Tandy)
     013E             (      romdefs.asm):00138         DBasStub3                       EQU     $013E           Basic Stub 3 (do not use on dragon, user stub on Tandy)
     0013             (      romdefs.asm):00139         DBasTempFPA2                    EQU     $0013           Tempory FPA Mantissa for FPA2
     002B             (      romdefs.asm):00140         DBasTempLine                    EQU     $002B           Tempory line no
     000F             (      romdefs.asm):00141         DBasTempPtr                     EQU     $000F           Tempory pointer
     0011             (      romdefs.asm):00142         DBasTempPtr1                    EQU     $0011           Tempory discriptor pointer (stack search)
     003F             (      romdefs.asm):00143         DBasTempRelateFlag              EQU     $003F           Tempory relational operator flag
     003B             (      romdefs.asm):00144         DBasTempVarDesc                 EQU     $003B           Pointer to a tempory var descriptor
     8882             (      romdefs.asm):00145         DBasTMError                     EQU     $8882           Print ?TM Error and return to basic
     00AF             (      romdefs.asm):00146         DBasTronFlag                    EQU     $00AF           Tron flag nonzero=trace on
     8605             (      romdefs.asm):00147         DBasULError                     EQU     $8605           Print ?UL Error and return to basic
     0076             (      romdefs.asm):00148         DBasUnused1                     EQU     $0076           2 unused bytes
     00B0             (      romdefs.asm):00149         DBasUSRTableAddr                EQU     $00B0           Address of USR address table
     0134             (      romdefs.asm):00150         DBasUsrVecNoDisk                EQU     $0134           USR vector tabl when basic not installed
     001D             (      romdefs.asm):00151         DBasVarArrayAddr                EQU     $001D           Start address of Array table
     0052             (      romdefs.asm):00152         DBasVarAssign16                 EQU     $0052           Part of FPA1, used for 16bit assigns
     0033             (      romdefs.asm):00153         DBasVarDataAddr                 EQU     $0033           Address of next item in data
     0031             (      romdefs.asm):00154         DBasVarDataLine                 EQU     $0031           Line number of current data statement
     001F             (      romdefs.asm):00155         DBasVarEnd                      EQU     $001F           End of storage in use by basic
     004F             (      romdefs.asm):00156         DBasVarFPAcc1                   EQU     $004F           Floating point acumulator 1
     005C             (      romdefs.asm):00157         DBasVarFPAcc2                   EQU     $005C           Floating point acumulator 2
     0040             (      romdefs.asm):00158         DBasVarFPAcc3                   EQU     $0040           Floating point accumulator 3 (packed)
     0045             (      romdefs.asm):00159         DBasVarFPAcc4                   EQU     $0045           Floating point accumulator 4 (packed)
     004A             (      romdefs.asm):00160         DBasVarFPAcc5                   EQU     $004A           Floating point accumulator 5 (packed)
     0037             (      romdefs.asm):00161         DBasVarLastInUse                EQU     $0037           Pointer to variable last in use
     0039             (      romdefs.asm):00162         DBasVarPtrLast                  EQU     $0039           Poiinter to VARPTR last in use
     001B             (      romdefs.asm):00163         DBasVarSimpleAddr               EQU     $001B           Start address of simple variables
     0021             (      romdefs.asm):00164         DBasVarStringBase               EQU     $0021           Base address of string space (and stack)
     0023             (      romdefs.asm):00165         DBasVarStrTop                   EQU     $0023           Top of string space in use
     0006             (      romdefs.asm):00166         DBasVarType                     EQU     $0006           Variable type flag 0=numeric, $ff=string
     841F             (      romdefs.asm):00167         DBasVect1                       EQU     $841F           Sets up various basic vectors (after load), should be followed by call to BasVect2
     8424             (      romdefs.asm):00168         DBasVect1a                      EQU     $8424           Same as Vect1, but doesn't reset input pointer
     83ED             (      romdefs.asm):00169         DBasVect2                       EQU     $83ED           Finalises setup of basic vectors (after load), should be preceeded by call to BasVect1
     93B1             (      romdefs.asm):00170         DBasZDError                     EQU     $93B1           Print ?ZD Error and return to basic
     01E3             (      romdefs.asm):00171         DCasASCIIFlag                   EQU     $01E3           ASCII flag byte
     BAC3             (      romdefs.asm):00172         DCasAudioOff                    EQU     $BAC3           Turn off audio from cassette
     BAEC             (      romdefs.asm):00173         DCasAudioOn                     EQU     $BAEC           Turn on Audio from cassete to speaker
     0083             (      romdefs.asm):00174         DCasBitCount                    EQU     $0083           Cassette bit counter
     BDA5             (      romdefs.asm):00175         DCasBitIn                       EQU     $BDA5           Reads a bity into the 'Z' flag
     B93E             (      romdefs.asm):00176         DCasBlockIn                     EQU     $B93E           Reads a block into the cassete buffer pointed to by CasIOBuffAddr
     007D             (      romdefs.asm):00177         DCasBlockLen                    EQU     $007D           Cassete block length, number of bytes read, or to be written
     B999             (      romdefs.asm):00178         DCasBlockOut                    EQU     $B999           Write a block to cassete pointed to by CasIOBuffAddr
     007C             (      romdefs.asm):00179         DCasBlockType                   EQU     $007C           Cassete block type, 0=filename, 1=data, 255=EOF
     BDAD             (      romdefs.asm):00180         DCasByteIn                      EQU     $BDAD           Reads a single byte into the A register
     BE12             (      romdefs.asm):00181         DCasByteOut                     EQU     $BE12           Write byte in A register to cassete
     0080             (      romdefs.asm):00182         DCasCkSum                       EQU     $0080           Used by cassette routines for calculating checksum
     B65F             (      romdefs.asm):00183         DCasClosFiles                   EQU     $B65F           Close any open cassete file
     01E5             (      romdefs.asm):00184         DCasEntryAddr                   EQU     $01E5           Entry address for MC programs
     0070             (      romdefs.asm):00185         DCasEOFFlag                     EQU     $0070           Cassette IO Flag, nonzero if EOF reached
     B8B3             (      romdefs.asm):00186         DCasFindFile                    EQU     $B8B3           Searches a tape for specified filename
     01D2             (      romdefs.asm):00187         DCasFName                       EQU     $01D2           Cassete filename to search for or write out
     01DA             (      romdefs.asm):00188         DCasFNameFound                  EQU     $01DA           Filename found, when reading
     01D1             (      romdefs.asm):00189         DCasFNameLen                    EQU     $01D1           Length of cassette filename can be 0 to 8
     01E2             (      romdefs.asm):00190         DCasFType                       EQU     $01E2           File type 0=tokenized basic, 1=ASCII data, 2=Binary
     01E4             (      romdefs.asm):00191         DCasGapFlag                     EQU     $01E4           Gap flag byte
     007A             (      romdefs.asm):00192         DCasHeadBuffAddr                EQU     $007A           Address of cassette file header
     01DA             (      romdefs.asm):00193         DCasIOBuff                      EQU     $01DA           COS default IO buffer, if this contains filename block then folloing are valid
     007E             (      romdefs.asm):00194         DCasIOBuffAddr                  EQU     $007E           Cassette IO buffer address, where data will be read/written
     0079             (      romdefs.asm):00195         DCasIOBuffSize                  EQU     $0079           Size of cassette IO buffer
     0081             (      romdefs.asm):00196         DCasIOErrorCode                 EQU     $0081           Cassette IO error code 0=no error, 1=CRC, 2=attempt to load in non-ram area
     006E             (      romdefs.asm):00197         DCasIOFlag                      EQU     $006E           Cassette IO Flag, set to $FF when IO in progress
     0085             (      romdefs.asm):00198         DCasLastSine                    EQU     $0085           Casette last sine tabe entry
     0090             (      romdefs.asm):00199         DCasLeadCount                   EQU     $0090           Cassete leader count, number of $55 bytes in the leader
     01E7             (      romdefs.asm):00200         DCasLoadAddr                    EQU     $01E7           Load address
     0093             (      romdefs.asm):00201         DCasMax12                       EQU     $0093           Cassette Upper limit of 1200Hz
     0094             (      romdefs.asm):00202         DCasMax24                       EQU     $0094           Cassette Upper limit of 2400Hz
     0095             (      romdefs.asm):00203         DCasMotorDelay                  EQU     $0095           Cassette motor on delay (also inter-block gap)
     BDDC             (      romdefs.asm):00204         DCasMotorOff                    EQU     $BDDC           Turn off cassette motor
     BDCF             (      romdefs.asm):00205         DCasMotorOn                     EQU     $BDCF           Turn on motor, and wait for delay in CasMotorDelay
     0092             (      romdefs.asm):00206         DCasPartrt                      EQU     $0092           Cassette 1200/2400 partition
     0084             (      romdefs.asm):00207         DCasPhaseFlag                   EQU     $0084           Cassette Phase flag
     B748             (      romdefs.asm):00208         DCasReadBin                     EQU     $B748           Read in a binary file, similar to CLOADM
     B933             (      romdefs.asm):00209         DCasReadBlock1                  EQU     $B933           Turns on motor, reads header and then first block into CasIOBufAddr
     BDE7             (      romdefs.asm):00210         DCasReadLeader                  EQU     $BDE7           Turn on motor and read past leader
     0078             (      romdefs.asm):00211         DCasStatus                      EQU     $0078           Cassette status byte, 0=cassette closed, 1=open for input, 2=open for output
     0082             (      romdefs.asm):00212         DCasTemp                        EQU     $0082           Cassette tempory storage
     B6A5             (      romdefs.asm):00213         DCasWriteBasic                  EQU     $B6A5           Write tokenized basic program out, similar to CSAVE
     991B             (      romdefs.asm):00214         DCasWriteBin                    EQU     $991B           Write a binary file out push return address, then start,end and entry addresses and then JMP to this
     B991             (      romdefs.asm):00215         DCasWriteBlock1                 EQU     $B991           Turn on motor, write leader and then first block
     801B             (      romdefs.asm):00216         DCasWriteLeader                 EQU     $801B           Turn on motor and write out leader
     943E             (      romdefs.asm):00217         DCmdABS                         EQU     $943E           Basic Command
     8A12             (      romdefs.asm):00218         DCmdAND                         EQU     $8A12           Basic Command
     8DE6             (      romdefs.asm):00219         DCmdASC                         EQU     $8DE6           Basic Command
     9877             (      romdefs.asm):00220         DCmdATN                         EQU     $9877           Basic Command
     BADF             (      romdefs.asm):00221         DCmdAudio                       EQU     $BADF           Basic Command
     8DD2             (      romdefs.asm):00222         DCmdCHRS                        EQU     $8DD2           Basic Command
     B238             (      romdefs.asm):00223         DCmdCircle                      EQU     $B238           Basic Command
     8571             (      romdefs.asm):00224         DCmdClear                       EQU     $8571           Basic Command
     B6D5             (      romdefs.asm):00225         DCmdCload                       EQU     $B6D5           Basic Command
     B64D             (      romdefs.asm):00226         DCmdClose                       EQU     $B64D           Basic Command
     BA60             (      romdefs.asm):00227         DCmdCLS                         EQU     $BA60           Basic Command
     A8D4             (      romdefs.asm):00228         DCmdColor                       EQU     $A8D4           Basic Command
     8560             (      romdefs.asm):00229         DCmdCont                        EQU     $8560           Basic Command
     97CB             (      romdefs.asm):00230         DCmdCOS                         EQU     $97CB           Basic Command
     B683             (      romdefs.asm):00231         DCmdCsave                       EQU     $B683           Basic Command
     8613             (      romdefs.asm):00232         DCmdData                        EQU     $8613           Basic Command
     9C81             (      romdefs.asm):00233         DCmdDef                         EQU     $9C81           Basic Command
     9D61             (      romdefs.asm):00234         DCmdDelete                      EQU     $9D61           Basic Command
     8A8B             (      romdefs.asm):00235         DCmdDim                         EQU     $8A8B           Basic Command
     933C             (      romdefs.asm):00236         DCmdDivide                      EQU     $933C           Basic Command
     A049             (      romdefs.asm):00237         DCmdDload                       EQU     $A049           Basic Command
     B051             (      romdefs.asm):00238         DCmdDraw                        EQU     $B051           Basic Command
     9965             (      romdefs.asm):00239         DCmdEdit                        EQU     $9965           Basic Command
     8532             (      romdefs.asm):00240         DCmdEnd                         EQU     $8532           Basic Command
     B801             (      romdefs.asm):00241         DCmdEOF                         EQU     $B801           Basic Command
     B771             (      romdefs.asm):00242         DCmdExec                        EQU     $B771           Basic Command
     9713             (      romdefs.asm):00243         DCmdEXP                         EQU     $9713           Basic Command
     96A0             (      romdefs.asm):00244         DCmdExponet                     EQU     $96A0           Basic Command
     9956             (      romdefs.asm):00245         DCmdFIX                         EQU     $9956           Basic Command
     8448             (      romdefs.asm):00246         DCmdFor                         EQU     $8448           Basic Command
     AAF0             (      romdefs.asm):00247         DCmdGet                         EQU     $AAF0           Basic Command
     85B9             (      romdefs.asm):00248         DCmdGo                          EQU     $85B9           Basic Command
     A00E             (      romdefs.asm):00249         DCmdHexS                        EQU     $A00E           Basic Command
     8647             (      romdefs.asm):00250         DCmdIF                          EQU     $8647           Basic Command
     B797             (      romdefs.asm):00251         DCmdInkeyS                      EQU     $B797           Basic Command
     872B             (      romdefs.asm):00252         DCmdInput                       EQU     $872B           Basic Command
     9BB4             (      romdefs.asm):00253         DCmdInstr                       EQU     $9BB4           Basic Command
     9499             (      romdefs.asm):00254         DCmdINT                         EQU     $9499           Basic Command
     BB0D             (      romdefs.asm):00255         DCmdJoystk                      EQU     $BB0D           Basic Command
     8DF1             (      romdefs.asm):00256         DCmdLeftS                       EQU     $8DF1           Basic Command
     8DC7             (      romdefs.asm):00257         DCmdLEN                         EQU     $8DC7           Basic Command
     86BC             (      romdefs.asm):00258         DCmdLet                         EQU     $86BC           Basic Command
     A749             (      romdefs.asm):00259         DCmdLine                        EQU     $A749           Basic Command
     9DB1             (      romdefs.asm):00260         DCmdLineInput                   EQU     $9DB1           Line input command
     8EAA             (      romdefs.asm):00261         DCmdList                        EQU     $8EAA           Basic Command
     8EA4             (      romdefs.asm):00262         DCmdLList                       EQU     $8EA4           Basic Command
     923C             (      romdefs.asm):00263         DCmdLOG                         EQU     $923C           Basic Command
     8C31             (      romdefs.asm):00264         DCmdMEM                         EQU     $8C31           Basic Command
     8E15             (      romdefs.asm):00265         DCmdMidS                        EQU     $8E15           Basic Command
     9105             (      romdefs.asm):00266         DCmdMinus                       EQU     $9105           Basic Command
     B982             (      romdefs.asm):00267         DCmdMotor                       EQU     $B982           Basic Command
     9275             (      romdefs.asm):00268         DCmdMultiply                    EQU     $9275           Basic Command
     8415             (      romdefs.asm):00269         DCmdNew                         EQU     $8415           Basic Command
     8829             (      romdefs.asm):00270         DCmdNext                        EQU     $8829           Basic Command
     8675             (      romdefs.asm):00271         DCmdON                          EQU     $8675           Basic Command
     B829             (      romdefs.asm):00272         DCmdOpen                        EQU     $B829           Basic Command
     B835             (      romdefs.asm):00273         DCmdOpenEntry                   EQU     $B835           Entry into Basic open command used by Dragon/SuperDos
     8A11             (      romdefs.asm):00274         DCmdOR                          EQU     $8A11           Basic Command
     AC87             (      romdefs.asm):00275         DCmdPaint                       EQU     $AC87           Basic Command
     AA19             (      romdefs.asm):00276         DCmdPClear                      EQU     $AA19           Basic Command
     A8C0             (      romdefs.asm):00277         DCmdPCls                        EQU     $A8C0           Basic Command
     AABE             (      romdefs.asm):00278         DCmdPcopy                       EQU     $AABE           Basic Command
     8E96             (      romdefs.asm):00279         DCmdPeek                        EQU     $8E96           Basic Command
     ADBD             (      romdefs.asm):00280         DCmdPlay                        EQU     $ADBD           Basic Command
     910E             (      romdefs.asm):00281         DCmdPlus                        EQU     $910E           Basic Command
     A9AF             (      romdefs.asm):00282         DCmdPmode                       EQU     $A9AF           Basic Command
     BA45             (      romdefs.asm):00283         DCmdPoint                       EQU     $BA45           Basic Command
     8E9D             (      romdefs.asm):00284         DCmdPoke                        EQU     $8E9D           Basic Command
     9ADE             (      romdefs.asm):00285         DCmdPOS                         EQU     $9ADE           Basic Command
     A6C7             (      romdefs.asm):00286         DCmdPPoint                      EQU     $A6C7           Basic Command
     A6F3             (      romdefs.asm):00287         DCmdPReset                      EQU     $A6F3           Basic Command
     903D             (      romdefs.asm):00288         DCmdPrint                       EQU     $903D           Basic Command
     A6EF             (      romdefs.asm):00289         DCmdPset                        EQU     $A6EF           Basic Command
     AAF3             (      romdefs.asm):00290         DCmdPut                         EQU     $AAF3           Basic Command
     8777             (      romdefs.asm):00291         DCmdRead                        EQU     $8777           Basic Command
     877A             (      romdefs.asm):00292         DCmdReadFromX                   EQU     $877A           As basic READ command but ptr in X supplied by caller
     8616             (      romdefs.asm):00293         DCmdREM                         EQU     $8616           Basic Command
     9DFA             (      romdefs.asm):00294         DCmdRenum                       EQU     $9DFA           Basic Command
     BA04             (      romdefs.asm):00295         DCmdReset                       EQU     $BA04           Basic Command
     8514             (      romdefs.asm):00296         DCmdRestore                     EQU     $8514           Basic Command
     85F3             (      romdefs.asm):00297         DCmdReturn                      EQU     $85F3           Basic Command
     8E0E             (      romdefs.asm):00298         DCmdRightS                      EQU     $8E0E           Basic Command
     9772             (      romdefs.asm):00299         DCmdRND                         EQU     $9772           Basic Command
     85A5             (      romdefs.asm):00300         DCmdRun                         EQU     $85A5           Basic Command
     A9FE             (      romdefs.asm):00301         DCmdScreen                      EQU     $A9FE           Basic Command
     B9D3             (      romdefs.asm):00302         DCmdSet                         EQU     $B9D3           Basic Command
     9425             (      romdefs.asm):00303         DCmdSGN                         EQU     $9425           Basic Command
     97D1             (      romdefs.asm):00304         DCmdSIN                         EQU     $97D1           Basic Command
     B81F             (      romdefs.asm):00305         DCmdSkipf                       EQU     $B81F           Basic Command
     BA9B             (      romdefs.asm):00306         DCmdSound                       EQU     $BA9B           Basic Command
     9697             (      romdefs.asm):00307         DCmdSQR                         EQU     $9697           Basic Command
     8539             (      romdefs.asm):00308         DCmdStop                        EQU     $8539           Basic Command
     9B84             (      romdefs.asm):00309         DCmdStringS                     EQU     $9B84           Basic Command
     8C40             (      romdefs.asm):00310         DCmdSTRS                        EQU     $8C40           Basic Command
     9816             (      romdefs.asm):00311         DCmdTAN                         EQU     $9816           Basic Command
     9D59             (      romdefs.asm):00312         DCmdTimer                       EQU     $9D59           Basic Command
     9ADA             (      romdefs.asm):00313         DCmdTroff                       EQU     $9ADA           Basic Command
     9AD9             (      romdefs.asm):00314         DCmdTron                        EQU     $9AD9           Basic Command
     9D1D             (      romdefs.asm):00315         DCmdUSR                         EQU     $9D1D           Basic Command
     8E5C             (      romdefs.asm):00316         DCmdVAL                         EQU     $8E5C           Basic Command
     9AF4             (      romdefs.asm):00317         DCmdVarptr                      EQU     $9AF4           Basic Command
     00B3             (      romdefs.asm):00318         DGrBackground                   EQU     $00B3           Current background colour
     00B9             (      romdefs.asm):00319         DGrBytesPerLine                 EQU     $00B9           Number of byts/lin in current mode
     BA28             (      romdefs.asm):00320         DGrCalcPixelPos                 EQU     $BA28           Calculates Lo-res pixel pos from data on stack
     00D0             (      romdefs.asm):00321         DGrCircleRadius                 EQU     $00D0           Circle radius
     00CB             (      romdefs.asm):00322         DGrCircleXCo                    EQU     $00CB           Circle command X
     00CD             (      romdefs.asm):00323         DGrCircleYCo                    EQU     $00CD           Circle command Y
     A8C7             (      romdefs.asm):00324         DGrClearGrScreen                EQU     $A8C7           Clears grapics screen to value in B
     00C1             (      romdefs.asm):00325         DGrColourSet                    EQU     $00C1           Colour set currently in use
     00B4             (      romdefs.asm):00326         DGrColourTemp                   EQU     $00B4           Tempory colour in use
     00B5             (      romdefs.asm):00327         DGrCurrColour                   EQU     $00B5           Byte value for current colour, to set all pixels in byte to that colour
     00B6             (      romdefs.asm):00328         DGrCurrPmode                    EQU     $00B6           Current PMODE number
     00BD             (      romdefs.asm):00329         DGrCurrX                        EQU     $00BD           Current X cursor pos
     00C7             (      romdefs.asm):00330         DGrCurrXCo                      EQU     $00C7           Current Cursor X
     00BF             (      romdefs.asm):00331         DGrCurrY                        EQU     $00BF           Current Y cursor pos
     00C9             (      romdefs.asm):00332         DGrCurrYCo                      EQU     $00C9           Current Cursor Y
     00DB             (      romdefs.asm):00333         DGrDirtyFlag                    EQU     $00DB           Flag to tell if graphics screen has changed
     00BA             (      romdefs.asm):00334         DGrDisplayStartAddr             EQU     $00BA           Address of first byte in current display
     B051             (      romdefs.asm):00335         DGrDraw                         EQU     $B051           Draw on pmode screen as in DRAW command
     00E8             (      romdefs.asm):00336         DGrDrawAngle                    EQU     $00E8           Current angle for DRAW command
     00E9             (      romdefs.asm):00337         DGrDrawScale                    EQU     $00E9           Current scale for DRAW command
     00B2             (      romdefs.asm):00338         DGrForeground                   EQU     $00B2           Current foreground colour
     00B7             (      romdefs.asm):00339         DGrLastDisplayAddr              EQU     $00B7           Address of last byte in current display
     00C3             (      romdefs.asm):00340         DGrPixelNoX                     EQU     $00C3           Current horizontal pixel no
     00C5             (      romdefs.asm):00341         DGrPixelNoY                     EQU     $00C5           Current vertical pixel number
     00C2             (      romdefs.asm):00342         DGrPlotFlag                     EQU     $00C2           Plot/Unplot flag, 0=reset, nonzero=set
     AA23             (      romdefs.asm):00343         DGrReserveGrRam                 EQU     $AA23           Reserves memory for graphics, no graphics pages in B
     BA07             (      romdefs.asm):00344         DGrResetLRGPixel                EQU     $BA07           ReSets lo res pixel
     AA10             (      romdefs.asm):00345         DGrSelectColourSet              EQU     $AA10           Selects colour set dependent on B
     A938             (      romdefs.asm):00346         DGrSelectDisplay                EQU     $A938           Sets Text or Graphics screen, if Z=1 then text
     A9E1             (      romdefs.asm):00347         DGrSelectPage                   EQU     $A9E1           On entry B contains Pmode page to be used
     A9A4             (      romdefs.asm):00348         DGrSelectVDGColSet              EQU     $A9A4           Select colour set from data in GrColourSet
     A928             (      romdefs.asm):00349         DGrSetColours                   EQU     $A928           Sets up colours in low memory
     B9DF             (      romdefs.asm):00350         DGrSetLRGPixel                  EQU     $B9DF           Sets lo res pixel
     0086             (      romdefs.asm):00351         DGrSetResetData                 EQU     $0086           Data for Lo-res set/reset
     A989             (      romdefs.asm):00352         DGrSetVDGMode                   EQU     $A989           Set VDG to mode in A register
     A99D             (      romdefs.asm):00353         DGrSetVDGOffset                 EQU     $A99D           Set VDG offset to page in A
     00BC             (      romdefs.asm):00354         DGrStartPages                   EQU     $00BC           Page number of Start of graphics pages
     A006             (      romdefs.asm):00355         DIndCasBlockIn                  EQU     $A006           Indirect Read cassette block
     A008             (      romdefs.asm):00356         DIndCasBlockOut                 EQU     $A008           Indirect Write cassete block
     A004             (      romdefs.asm):00357         DIndCasOnRead                   EQU     $A004           Indirect prepare cassette for read
     A00C             (      romdefs.asm):00358         DIndCasWriteLead                EQU     $A00C           Indirect Write cassette leader
     A002             (      romdefs.asm):00359         DIndCharOutput                  EQU     $A002           Indirect Character output
     A00A             (      romdefs.asm):00360         DIndJoystickIn                  EQU     $A00A           Indirect joystick in
     A000             (      romdefs.asm):00361         DIndKeyInput                    EQU     $A000           Indirect keyboard input jsr()
     0072             (      romdefs.asm):00362         DIndVecReset                    EQU     $0072           Secondary Reset vector address, must point to NOP
     008A             (      romdefs.asm):00363         DMisc16BitScratch               EQU     $008A           Misc 16 bit scratch register (always zero ??)
     A66B             (      romdefs.asm):00364         DPixMaskTable2Col               EQU     $A66B           Pixel mask table 2 colour mode
     A673             (      romdefs.asm):00365         DPixMaskTable4Col               EQU     $A673           Pixel mask table 4 colour mode
     BD0A             (      romdefs.asm):00366         DPrinterCRLF                    EQU     $BD0A           Moves printer head to next line.
     BCF5             (      romdefs.asm):00367         DPrinterDirOut                  EQU     $BCF5           Sends character in A register to printer (uncooked)
     BD1A             (      romdefs.asm):00368         DPrinterOut                     EQU     $BD1A           Sends character in A register to printer
     010F             (      romdefs.asm):00369         DSecVecFIRQ                     EQU     $010F           Secondary FIRQ vector JMP+ address
     010C             (      romdefs.asm):00370         DSecVecIRQ                      EQU     $010C           Secondary IRQ vector JMP+ address
     0109             (      romdefs.asm):00371         DSecVecNMI                      EQU     $0109           Secondary NMI vector JMP+ address
     0106             (      romdefs.asm):00372         DSecVecSWI                      EQU     $0106           Secondary NMI vector JMP+ address
     0103             (      romdefs.asm):00373         DSecVecSWI2                     EQU     $0103           Secondary SWI2 vector JMP+ address
     0100             (      romdefs.asm):00374         DSecVecSWI3                     EQU     $0100           Secondary SWI3 vector JMP+ address
     0000             (      romdefs.asm):00375         DSerDLBaud                      EQU     $0000           Baud rate for DLOAD, unknown for Dragon
     0000             (      romdefs.asm):00376         DSerDLTimeout                   EQU     $0000           Timeourt for DLOAD, unknown for Dragon
     BAA0             (      romdefs.asm):00377         DSndBeep                        EQU     $BAA0           Play a beep duration in B, frequency in SndPitch
     BAC3             (      romdefs.asm):00378         DSndDisable                     EQU     $BAC3           Disables D/A sound output
     00E5             (      romdefs.asm):00379         DSndDotNoteScale                EQU     $00E5           Dotted note scale factor for Play
     BAED             (      romdefs.asm):00380         DSndDTOAOn                      EQU     $BAED           Turn on audio to D/A converter
     BAC5             (      romdefs.asm):00381         DSndEnable                      EQU     $BAC5           Enables D/A sound output
     008D             (      romdefs.asm):00382         DSndLength                      EQU     $008D           Sound duration
     00E1             (      romdefs.asm):00383         DSndNoteLen                     EQU     $00E1           Note length for PLAY
     00DE             (      romdefs.asm):00384         DSndOctave                      EQU     $00DE           Sound octave value for PLAY
     008C             (      romdefs.asm):00385         DSndPitch                       EQU     $008C           Sound pitch value
     AE9A             (      romdefs.asm):00386         DSndPlayNote                    EQU     $AE9A           Plays a note from the A register (ASCII)
     00E2             (      romdefs.asm):00387         DSndTempo                       EQU     $00E2           Tempo for PLAY
     00E3             (      romdefs.asm):00388         DSndTimerPlay                   EQU     $00E3           Timer for the Play command
     00DF             (      romdefs.asm):00389         DSndVolume                      EQU     $00DF           Sound volume for PLAY
     BB80             (      romdefs.asm):00390         DSysBoot64                      EQU     $BB80           Dragon 64 only, boots basic into all ram mode, with 48K available to basic.
     8344             (      romdefs.asm):00391         DSysErr                         EQU     $8344           Report error code in B register, cleanup and return to basic
     835E             (      romdefs.asm):00392         DSysErr2                        EQU     $835E           Report error in B, do NOT hook to RAM, or turn of cas etc
     BD52             (      romdefs.asm):00393         DSysReadJoystick                EQU     $BD52           Read hardware joystick values & update BasJoyVal0..3
     B3B4             (      romdefs.asm):00394         DSysReset                       EQU     $B3B4           Perform soft reset, as if reset button pressed
     BAD4             (      romdefs.asm):00395         DSysResetDA                     EQU     $BAD4           Reset D/A converter to $7E
     BD41             (      romdefs.asm):00396         DSysSelJoystick                 EQU     $BD41           Select joystick alue to read from A
     0112             (      romdefs.asm):00397         DSysTimeVal                     EQU     $0112           Current value of system timer
     BAD6             (      romdefs.asm):00398         DSysWriteDA                     EQU     $BAD6           Write value in A to D/A, bits 0 &1 should be 0
     0149             (      romdefs.asm):00399         DTextCapsLock                   EQU     $0149           Capslock flag, nonzero=uppercase
     BCA0             (      romdefs.asm):00400         DTextClearLine                  EQU     $BCA0           Clears a VDU line from current cursor pos to EOL
     BA77             (      romdefs.asm):00401         DTextCls                        EQU     $BA77           Clear text mode screen, resets cursor to top left
     BA79             (      romdefs.asm):00402         DTextClsChar                    EQU     $BA79           Clears srcrren to character in B register & resets cursor
     008F             (      romdefs.asm):00403         DTextCursFalshCnt               EQU     $008F           Cusrsor flash counter
     006F             (      romdefs.asm):00404         DTextDevN                       EQU     $006F           Current device number
     0035             (      romdefs.asm):00405         DTextKbdBuffAddr                EQU     $0035           Address of keyboard input buffer
     0097             (      romdefs.asm):00406         DTextKbdDelay                   EQU     $0097           Keyboard scan delay constant, used to debounce
     0150             (      romdefs.asm):00407         DTextKbdRollover                EQU     $0150           Rollover table, to check for key releases
     0087             (      romdefs.asm):00408         DTextLastKey                    EQU     $0087           ASCII code of last keypress, not cleard by key release
     B54A             (      romdefs.asm):00409         DTextOutChar                    EQU     $B54A           Outputs character in A to screen
     90A1             (      romdefs.asm):00410         DTextOutCRLF                    EQU     $90A1           Outputs an EOL sequence to the screen
     957A             (      romdefs.asm):00411         DTextOutNum16                   EQU     $957A           Outputs unsigned integer in D to the TextDevN device
     9582             (      romdefs.asm):00412         DTextOutNumFPA0                 EQU     $9582           Outputs number in FPA0 to screen
     90F8             (      romdefs.asm):00413         DTextOutQuestion                EQU     $90F8           Outputs a question mark to screen
     90F5             (      romdefs.asm):00414         DTextOutSpace                   EQU     $90F5           Outputs a space to screen
     90E5             (      romdefs.asm):00415         DTextOutString                  EQU     $90E5           Outputs string pointed to by X to screen, X should point to byte before first byte of string
     0148             (      romdefs.asm):00416         DTextPrnAutoCRLF                EQU     $0148           Printer auto EOL flag, nonzero will send EOL sequence at end of line
     0099             (      romdefs.asm):00417         DTextPrnCommaW                  EQU     $0099           Printer comma width
     009C             (      romdefs.asm):00418         DTextPrnCurrCol                 EQU     $009C           Printer current column
     014A             (      romdefs.asm):00419         DTextPrnEOLCnt                  EQU     $014A           Number of characters in EOL sequence 1..4
     014B             (      romdefs.asm):00420         DTextPrnEOLSeq                  EQU     $014B           End of line characters
     009A             (      romdefs.asm):00421         DTextPrnLastComma               EQU     $009A           Printer last comma width, should be printer line width - prinnter comma width
     009B             (      romdefs.asm):00422         DTextPrnLineW                   EQU     $009B           Printer line width
     03FF             (      romdefs.asm):00423         DTextPrnSelFlag                 EQU     $03FF           Dragon 64 printer selection flag, 0=paralell port, nonzero=RS232
     A93A             (      romdefs.asm):00424         DTextResetVDU                   EQU     $A93A           Resets to text mode and screen base address of $400
     BBE5             (      romdefs.asm):00425         DTextScanKbd                    EQU     $BBE5           Scan keyboard, return Char in A, Zero flag set if no key
     FF07             (      romdefs.asm):00426         DTextSerBaudRate                EQU     $FF07           Serial baud rate, note on Dragon 64, this is the actual hardware baud rate reg.
     03FD             (      romdefs.asm):00427         DTextSerEOLDelay                EQU     $03FD           End of line delay for serial port on Dragon 64 & CoCo
     BBB5             (      romdefs.asm):00428         DTextUpdateCurs                 EQU     $BBB5           Decrements TextCursFlashCnt, if zero resets and flashes cursor
     006A             (      romdefs.asm):00429         DTextVDUCommaW                  EQU     $006A           VDU comma width field
     006C             (      romdefs.asm):00430         DTextVDUCurrCol                 EQU     $006C           Current column for VDU output
     0088             (      romdefs.asm):00431         DTextVDUCursAddr                EQU     $0088           Current VDU cursor address
     006B             (      romdefs.asm):00432         DTextVDULastComma               EQU     $006B           VDU last comma field, should be VDU line width - VDU comma width
     006D             (      romdefs.asm):00433         DTextVDULineW                   EQU     $006D           VDU line width, normally 32
     BCAB             (      romdefs.asm):00434         DTextVDUOut                     EQU     $BCAB           Outputs Char in A to VDU, does not reset screen.
     852B             (      romdefs.asm):00435         DTextWaitKey                    EQU     $852B           Wait for a keypress, calls TextScanKbd, also handles break
     A0EA             (      romdefs.asm):00436         DTextWaitKeyCurs                EQU     $A0EA           Same as TextWaitKey, but with cursor
     B505             (      romdefs.asm):00437         DTextWaitKeyCurs2               EQU     $B505           Same as TextWaitKey, but with cursor
     B7CC             (      romdefs.asm):00438         DUtilCopyBXtoU                  EQU     $B7CC           Copy B bytes from X to U
     8C35             (      romdefs.asm):00439         DVarAssign16Bit                 EQU     $8C35           Assigns value in D register to a variable, and returns to basic
     8C37             (      romdefs.asm):00440         DVarAssign16Bit2                EQU     $8C37           Assigns value in D register to a variable, and returns to basic (1 less instruction!).
     9C3E             (      romdefs.asm):00441         DVarAssign16BitB                EQU     $9C3E           Assigns value in BasVarAssign16 to a variable, and returns to basic
     8C36             (      romdefs.asm):00442         DVarAssign8Bit                  EQU     $8C36           Assigns value in B register to a variable, and returns to basic
     89AC             (      romdefs.asm):00443         DVarCKChar                      EQU     $89AC           Check for char in B register in command line, SNError if not
     89A4             (      romdefs.asm):00444         DVarCKClBrac                    EQU     $89A4           Check for Close bracket ')' in command line, SNError if not
     89AA             (      romdefs.asm):00445         DVarCKComma                     EQU     $89AA           Check for Comma in command line, SNError if not
     89A7             (      romdefs.asm):00446         DVarCKOpBrac                    EQU     $89A7           Check for Open bracket '(' in command line, SNError if not
     8D9F             (      romdefs.asm):00447         DVarDelVar                      EQU     $8D9F           Frees up storage used by a variable
     8CD7             (      romdefs.asm):00448         DVarGarbageCollect              EQU     $8CD7           Forces garbage collection in string space
     8E83             (      romdefs.asm):00449         DVarGet16Bit                    EQU     $8E83           Returns value of variable in D,FCError if more than 16 bits
     8E51             (      romdefs.asm):00450         DVarGet8Bit                     EQU     $8E51           Returns value of variable in B,FCError if more than 8 bits
     8E7E             (      romdefs.asm):00451         DVarGetComma8                   EQU     $8E7E           Checks for comman then gets 8 bit.
     8877             (      romdefs.asm):00452         DVarGetExpr                     EQU     $8877           Evaluate and put the VARPTR of experssion which follows in BasVarAssign16 (carry set)
     8874             (      romdefs.asm):00453         DVarGetExprCC                   EQU     $8874           Evaluate and put the VARPTR of experssion which follows in BasVarAssign16 (carry clear)
     8887             (      romdefs.asm):00454         DVarGetStr                      EQU     $8887           Compiles string and moves to free string space, should be followed by VarGetExpr
     8B29             (      romdefs.asm):00455         DVarGetUsr                      EQU     $8B29           Returns argument to USRnn as a 16bit no in D
     8A94             (      romdefs.asm):00456         DVarGetVar                      EQU     $8A94           Gets VARPTR address of following name and places in BasVarPtrLast
     9165             (      romdefs.asm):00457         DVarNormFPA0                    EQU     $9165           Normalize FPA0
     01A0             (      romdefs.asm):00458         DVectAccessScreen               EQU     $01A0           Called before CLS, GET & PUT are executed
     019D             (      romdefs.asm):00459         DVectAssignStr                  EQU     $019D           Called before assigning string to string variable
     015E             (      romdefs.asm):00460         DVectBase                       EQU     $015E           Base address of ram hooks/vectors
     0188             (      romdefs.asm):00461         DVectCheckEOF                   EQU     $0188           called before checking for end of file
     017F             (      romdefs.asm):00462         DVectCheckKeys                  EQU     $017F           Called before keyboard is scanned for BREAK,SHIFT-@
     0173             (      romdefs.asm):00463         DVectCloseAllFiles              EQU     $0173           Called before closing all files
     0176             (      romdefs.asm):00464         DVectCloseFile                  EQU     $0176           Called before closing a file
     0185             (      romdefs.asm):00465         DVectCloseFileCmd               EQU     $0185           Called before closing an ASCII file read in as basic
     0179             (      romdefs.asm):00466         DVectCmdInterp                  EQU     $0179           Called before interpreting a token in A
     01A6             (      romdefs.asm):00467         DVectDeTokenize                 EQU     $01A6           Called before a line is de-tokenized
     0164             (      romdefs.asm):00468         DVectDevInit                    EQU     $0164           Called before initialising a device
     0161             (      romdefs.asm):00469         DVectDevNo                      EQU     $0161           Called when a device number is verified
     015E             (      romdefs.asm):00470         DVectDevOpen                    EQU     $015E           Called before a device is opened
     018B             (      romdefs.asm):00471         DVectEvaluateExpr               EQU     $018B           Called before evaluating expression
     019A             (      romdefs.asm):00472         DVectGetNextCmd                 EQU     $019A           Called before fetching next command to be executed by BASIC
     016A             (      romdefs.asm):00473         DVectInChar                     EQU     $016A           Called before inputting a char to A
     016D             (      romdefs.asm):00474         DVectInputFile                  EQU     $016D           Called before inputting from a file
     0182             (      romdefs.asm):00475         DVectLineInputFile              EQU     $0182           Called before LINE INPUT is executed
     0167             (      romdefs.asm):00476         DVectOutChar                    EQU     $0167           Called before outputting char in A to a device
     0170             (      romdefs.asm):00477         DVectOutputFile                 EQU     $0170           Called before outputting to a file
     017C             (      romdefs.asm):00478         DVectReReqestIn                 EQU     $017C           Called before re-requesing input from keyboard
     0197             (      romdefs.asm):00479         DVectResetBasMem                EQU     $0197           Called before changing BASIC memory vectors after LOAD etc
     0194             (      romdefs.asm):00480         DVectRunLink                    EQU     $0194           Called when RUN about to be executed
     0191             (      romdefs.asm):00481         DVectSysError                   EQU     $0191           Can be patched by system to trap error messages
     01A3             (      romdefs.asm):00482         DVectTokenize                   EQU     $01A3           Called before an ASCII line is tokenized
     018E             (      romdefs.asm):00483         DVectUserError                  EQU     $018E           Can be patched by user to trap error messages
     B44F             (      romdefs.asm):00484         DWarmStart                      EQU     $B44F           Warm start routine
     0071             (      romdefs.asm):00485         DWarmStartFlag                  EQU     $0071           Warm start flag $55=warm start, else cold start
                      (      romdefs.asm):00486         
     0000             (      romdefs.asm):00487         CStubResWordsOfs                EQU     $0000           Offset of number of reserved words
     0001             (      romdefs.asm):00488         CStubResLookupOfs               EQU     $0001           Offset of reserved word lookup table
     0003             (      romdefs.asm):00489         CStubResJumpOfs                 EQU     $0003           Offset of reserved word jump table
     0005             (      romdefs.asm):00490         CStubFuncsOfs                   EQU     $0005           Offset of nummber of functions
     0006             (      romdefs.asm):00491         CStubFuncsLookupOfs             EQU     $0006           Offset of function lookup table
     0008             (      romdefs.asm):00492         CStubFuncsJumpOfs               EQU     $0008           Offset of functions jump table
                      (      romdefs.asm):00493         
     0021             (      romdefs.asm):00494         CSkip1                          EQU     $0021           Skip 1 byte (BRN)
     008C             (      romdefs.asm):00495         CSkip2                          EQU     $008C           Skip 2 bytes (CMPX)
     0086             (      romdefs.asm):00496         CSkip1LD                        EQU     $0086           Skip 1 byte (LDA)
     007D             (      romdefs.asm):00497         CSkip2TST                       EQU     $007D           Skip 2 bytes (TST)
                      (      romdefs.asm):00498         
     8272             (      romdefs.asm):00499         CCoCoVec167                     EQU     $8272           Vector dest for 167 
     8CF1             (      romdefs.asm):00500         CCoCoVect16A                    EQU     $8CF1           Vector dest for 16A
     8286             (      romdefs.asm):00501         CCoCoVect176                    EQU     $8286           Vector dest for 176
     8E90             (      romdefs.asm):00502         CCoCoVect179                    EQU     $8E90           Vector dest for 179
     8846             (      romdefs.asm):00503         CCoCoVect18B                    EQU     $8846           Vector dest for 18B
     88F0             (      romdefs.asm):00504         CCoCoVect191                    EQU     $88F0           Vector dest for 191
     829C             (      romdefs.asm):00505         CCoCoVect194                    EQU     $829C           Vector Dest for 194
     87E5             (      romdefs.asm):00506         CCoCoVect197                    EQU     $87E5           Vector Dest for 197
     82B9             (      romdefs.asm):00507         CCoCoVect19A                    EQU     $82B9           Vector Dest for 19A
     8304             (      romdefs.asm):00508         CCoCoVect1A3                    EQU     $8304           Vector Dest for 1A3
     0027             (      romdefs.asm):00509         CAddrFWareRamTop                EQU     $0027           Top of firmware RAM CLEAR xxx,yyyy set this to yyyy
     0074             (      romdefs.asm):00510         CAddrRamTop                     EQU     $0074           Physical end of RAM (4K, 16K, 32K or 64K).
     0021             (      romdefs.asm):00511         CAddrStack                      EQU     $0021           Address of top of machine stack
     0123             (      romdefs.asm):00512         CBasAddrCmdDisp                 EQU     $0123           Address of basic command dispatch
     0121             (      romdefs.asm):00513         CBasAddrCmdList                 EQU     $0121           Address of basic command list
     012D             (      romdefs.asm):00514         CBasAddrDskCmdDisp              EQU     $012D           Address of disk basic command dispatch
     012B             (      romdefs.asm):00515         CBasAddrDskCmdList              EQU     $012B           Address of disk basic command list
     0132             (      romdefs.asm):00516         CBasAddrDskFuncDisp             EQU     $0132           Address of disk basic function dispatcher
     0130             (      romdefs.asm):00517         CBasAddrDskFuncList             EQU     $0130           Address of disk basic function list
     0128             (      romdefs.asm):00518         CBasAddrFuncDisp                EQU     $0128           Address of basic function dispatcher
     0126             (      romdefs.asm):00519         CBasAddrFuncList                EQU     $0126           Address of basic function list
     00A6             (      romdefs.asm):00520         CBasAddrSigByte                 EQU     $00A6           Address of current significant bit in command line
     A61C             (      romdefs.asm):00521         CBasAOError                     EQU     $A61C           Print ?AO Error and return to basic
     0005             (      romdefs.asm):00522         CBasArrayEval                   EQU     $0005           Array evaluation flag, 0=eval, 1=dimensioning
     A0B6             (      romdefs.asm):00523         CBasBootBasic                   EQU     $A0B6           Restart basic, as if power on, also deletes current program
     0017             (      romdefs.asm):00524         CBasBotStack                    EQU     $0017           Bottom of stack at last check
     ADC4             (      romdefs.asm):00525         CBasBRARun                      EQU     $ADC4           BRA to main loop, used by DOS
     0000             (      romdefs.asm):00526         CBasBreakFlag                   EQU     $0000           Break flag, +ve=stop,-ve=end
     03D7             (      romdefs.asm):00527         CBasBuffer                      EQU     $03D7           Basic buffer space
     AC1E             (      romdefs.asm):00528         CBasChkArrSpaceMv               EQU     $AC1E           Check memory space at top of arrays + move arrays
     AC33             (      romdefs.asm):00529         CBasChkB2Free                   EQU     $AC33           Check B*2 bytes free above Arrays, OM error if not
     8866             (      romdefs.asm):00530         CBasChkDirect                   EQU     $8866           Check for direct mode, ID Error if so
     009F             (      romdefs.asm):00531         CBasChrGet                      EQU     $009F           Get next basic character routine
     00A5             (      romdefs.asm):00532         CBasChrGetCurr                  EQU     $00A5           Get current basic ccharacter
     00D3             (      romdefs.asm):00533         CBasCloadMOffs                  EQU     $00D3           2s complement of CLOADM offset
     AC73             (      romdefs.asm):00534         CBasCmdMode                     EQU     $AC73           Return to command mode
     0029             (      romdefs.asm):00535         CBasContLine                    EQU     $0029           Line no used by CONT
     0068             (      romdefs.asm):00536         CBasCurrentLine                 EQU     $0068           Current line no $FFFF in direct mode
     0001             (      romdefs.asm):00537         CBasDelim1                      EQU     $0001           First string delimiter
     0002             (      romdefs.asm):00538         CBasDelim2                      EQU     $0002           Second string delimiter
     002F             (      romdefs.asm):00539         CBasDirectTextPtr               EQU     $002F           Direct mode text pointer
     0008             (      romdefs.asm):00540         CBasDisArraySearch              EQU     $0008           Disable array search flag, 0=allow 0<>disable
     A61F             (      romdefs.asm):00541         CBasDNError                     EQU     $A61F           Print ?DN Error and return to basic
     ADD4             (      romdefs.asm):00542         CBasDoDispatch                  EQU     $ADD4           Do command dispatech, X must point to dispatch table
     00D7             (      romdefs.asm):00543         CBasEditorLineLen               EQU     $00D7           Editor line length
     ABAF             (      romdefs.asm):00544         CBasErrorCodeTable              EQU     $ABAF           List of 2 byte error codes eg 'SN' 'OM' 'UL' etc
     009D             (      romdefs.asm):00545         CBasExecAddr                    EQU     $009D           Exec address, on D64, at startup points to routine to boot all ram mode
     B44A             (      romdefs.asm):00546         CBasFCError                     EQU     $B44A           Print ?FC Error and return to basic
     AD01             (      romdefs.asm):00547         CBasFindLineNo                  EQU     $AD01           Find a line number in basic program
     A616             (      romdefs.asm):00548         CBasFMError                     EQU     $A616           Print ?FM Error and return to basic
     0007             (      romdefs.asm):00549         CBasGarbageFlag                 EQU     $0007           Garbage collection flag
     0003             (      romdefs.asm):00550         CBasGenCount                    EQU     $0003           General count/scratch var
     A5A2             (      romdefs.asm):00551         CBasGetDevNo                    EQU     $A5A2           Get dev no from line & validate
     AF67             (      romdefs.asm):00552         CBasGetLineNo                   EQU     $AF67           Get line no and store in BasTempLine
     B6A4             (      romdefs.asm):00553         CBasGetStrFirst                 EQU     $B6A4           Get first character of string into B
     B654             (      romdefs.asm):00554         CBasGetStrLenAddr               EQU     $B654           Get string len in B and address in X of string desc in FPA2
     A755             (      romdefs.asm):00555         CBasicCassBitIn                 EQU     $A755           Cassette bit input
     A749             (      romdefs.asm):00556         CBasicCassByIn                  EQU     $A749           Cassette byte input
     A82A             (      romdefs.asm):00557         CBasicCassByOut                 EQU     $A82A           Cassette byte output
     A7EB             (      romdefs.asm):00558         CBasicCassOff                   EQU     $A7EB           Cassette player motor off
     A7CA             (      romdefs.asm):00559         CBasicCassOn                    EQU     $A7CA           Cassette player motor on
     A77C             (      romdefs.asm):00560         CBasicCassOnRd                  EQU     $A77C           Cassette on for reading
     A199             (      romdefs.asm):00561         CBasicCursorB                   EQU     $A199           Cursor blink
     0000             (      romdefs.asm):00562         CBasicHWInit                    EQU     $0000           Hardware initialisation
     A9DE             (      romdefs.asm):00563         CBasicJoyIn                     EQU     $A9DE           Joystick input
     A1C1             (      romdefs.asm):00564         CBasicKbdIn                     EQU     $A1C1           Keyboard input
     A2BF             (      romdefs.asm):00565         CBasicPrintOut                  EQU     $A2BF           Printer output
     A30A             (      romdefs.asm):00566         CBasicScreenOut                 EQU     $A30A           Screen output
     0000             (      romdefs.asm):00567         CBasicSerIn                     EQU     $0000           Read a byte from serial
     0000             (      romdefs.asm):00568         CBasicSerOut                    EQU     $0000           Write a byte to serial port
     0000             (      romdefs.asm):00569         CBasicSetBaud                   EQU     $0000           Set baud rate
     0000             (      romdefs.asm):00570         CBasicSWInit                    EQU     $0000           Software initialisation
     A7D8             (      romdefs.asm):00571         CBasicWriteLead                 EQU     $A7D8           Cassette write leader
     886C             (      romdefs.asm):00572         CBasIDError                     EQU     $886C           Print ?ID Error and return to basic
     0004             (      romdefs.asm):00573         CBasIfCount                     EQU     $0004           If count - how many in a line
     A39D             (      romdefs.asm):00574         CBasInBuffFromX                 EQU     $A39D           Read input buffer at X as basic input
     0009             (      romdefs.asm):00575         CBasInputFlag                   EQU     $0009           Iinput/read flag, 0=input 0<>read
     A619             (      romdefs.asm):00576         CBasIOError                     EQU     $A619           Print ?IO Error and return to basic
     A9B3             (      romdefs.asm):00577         CBasIRQVec                      EQU     $A9B3           Basic IRQ routine, increments timer
     015A             (      romdefs.asm):00578         CBasJoyVal0                     EQU     $015A           Joystick(0) value
     015B             (      romdefs.asm):00579         CBasJoyVal1                     EQU     $015B           Joystick(1) value
     015C             (      romdefs.asm):00580         CBasJoyVal2                     EQU     $015C           Joystick(2) value
     015D             (      romdefs.asm):00581         CBasJoyVal3                     EQU     $015D           Joystick(3) value
     89E8             (      romdefs.asm):00582         CBasLineInputEntry              EQU     $89E8           Entry into LINE INPUT routine, used by DOS
     02DC             (      romdefs.asm):00583         CBasLinInpBuff                  EQU     $02DC           Basic line input buffer
     02DA             (      romdefs.asm):00584         CBasLinInpHead                  EQU     $02DA           Basic line input buffer header
     B764             (      romdefs.asm):00585         CBasList                        EQU     $B764           List basic program to SysDevN A must be 0 on entry
     0066             (      romdefs.asm):00586         CBasListLine                    EQU     $0066           Current line during list
     96EC             (      romdefs.asm):00587         CBasLocateScreen                EQU     $96EC           Initialise beginning of basic after graphics screen, no of pages in A
     B625             (      romdefs.asm):00588         CBasLSError                     EQU     $B625           Print ?LS Error and return to basic
     8CDD             (      romdefs.asm):00589         CBasNEError                     EQU     $8CDD           Print ?NE Error and return to basic
     AD19             (      romdefs.asm):00590         CBasNew                         EQU     $AD19           Remove current basic program from meory, like NEW command
     A3FB             (      romdefs.asm):00591         CBasNOError                     EQU     $A3FB           Print ?NO Error and return to basic
     0120             (      romdefs.asm):00592         CBasNumCmds                     EQU     $0120           Number of basic commands
     012A             (      romdefs.asm):00593         CBasNumDskCmds                  EQU     $012A           Number of disk basic commands
     012F             (      romdefs.asm):00594         CBasNumDskFuncs                 EQU     $012F           Number of disk basic functions
     0125             (      romdefs.asm):00595         CBasNumFuncs                    EQU     $0125           Number of basic functions
     002D             (      romdefs.asm):00596         CBasOldInputPtr                 EQU     $002D           Pointer to saved input during a STOP
     AC44             (      romdefs.asm):00597         CBasOMError                     EQU     $AC44           Print ?OM Error and return to basic
     BA92             (      romdefs.asm):00598         CBasOVError                     EQU     $BA92           Print ?OV Error and return to basic
     ADEB             (      romdefs.asm):00599         CBasPollKeyboard                EQU     $ADEB           Basic, poll keyboard and check for break
     BF3B             (      romdefs.asm):00600         CBasRandom8                     EQU     $BF3B           Generate an 8 bit random number and place in BasRandomSeed+1
     0115             (      romdefs.asm):00601         CBasRandomSeed                  EQU     $0115           Random number seed for RND function
     000A             (      romdefs.asm):00602         CBasRelateFlag                  EQU     $000A           Relational operator flag
     00D1             (      romdefs.asm):00603         CBasRenumStart                  EQU     $00D1           Renum start line no
     00D5             (      romdefs.asm):00604         CBasRenumStartLine              EQU     $00D5           Renum start line number
     00CF             (      romdefs.asm):00605         CBasRenumVal                    EQU     $00CF           Renum increment value
     AD33             (      romdefs.asm):00606         CBasResetStack                  EQU     $AD33           Reset basic stack to initial position
     B50F             (      romdefs.asm):00607         CBasResStr                      EQU     $B50F           Reserve B bytes of string space return start in X, setup low mem vars
     B56D             (      romdefs.asm):00608         CBasResStr2                     EQU     $B56D           Reserve B bytes of string space return start in X
     00AB             (      romdefs.asm):00609         CBasRndData                     EQU     $00AB           Used by RND
     AD9E             (      romdefs.asm):00610         CBasRun                         EQU     $AD9E           Run basic program in memory, like RUN
     AEBB             (      romdefs.asm):00611         CBasSetProgPtrX                 EQU     $AEBB           Sets basic program pointer to X-1
     80E7             (      romdefs.asm):00612         CBasSignonMess                  EQU     $80E7           Signon message address, for CoCo this is for Extended basic.
     AEB4             (      romdefs.asm):00613         CBasSkipLineNo                  EQU     $AEB4           Skip past line no in basic line, UL error if no line no.
     B277             (      romdefs.asm):00614         CBasSNError                     EQU     $B277           Print ?SN Error and return to basic
     0019             (      romdefs.asm):00615         CBasStartProg                   EQU     $0019           Start addr of basic program
     B553             (      romdefs.asm):00616         CBasSTError                     EQU     $B553           Print ?OM Error and return to basic
     01A9             (      romdefs.asm):00617         CBasStrDescStack                EQU     $01A9           String descriptor stack
     000B             (      romdefs.asm):00618         CBasStrFirstFreeTemp            EQU     $000B           First free temory string space pointer
     000D             (      romdefs.asm):00619         CBasStrLastUsedTemp             EQU     $000D           Last used tempory string space pointer
     0025             (      romdefs.asm):00620         CBasStrUtil                     EQU     $0025           Utility string pointer
     0120             (      romdefs.asm):00621         CBasStub0                       EQU     $0120           Basic Stub 0 (All basic on Dragon, Colour basic on Tandy)
     012A             (      romdefs.asm):00622         CBasStub1                       EQU     $012A           Basic stub 1 (Disk basic on Dragon, Extended basic on Tandy)
     0134             (      romdefs.asm):00623         CBasStub2                       EQU     $0134           Basic Stub 2 (Null on dragon, Disk basic on Tandy)
     013E             (      romdefs.asm):00624         CBasStub3                       EQU     $013E           Basic Stub 3 (do not use on dragon, user stub on Tandy)
     0013             (      romdefs.asm):00625         CBasTempFPA2                    EQU     $0013           Tempory FPA Mantissa for FPA2
     002B             (      romdefs.asm):00626         CBasTempLine                    EQU     $002B           Tempory line no
     000F             (      romdefs.asm):00627         CBasTempPtr                     EQU     $000F           Tempory pointer
     0011             (      romdefs.asm):00628         CBasTempPtr1                    EQU     $0011           Tempory discriptor pointer (stack search)
     003F             (      romdefs.asm):00629         CBasTempRelateFlag              EQU     $003F           Tempory relational operator flag
     003B             (      romdefs.asm):00630         CBasTempVarDesc                 EQU     $003B           Pointer to a tempory var descriptor
     B151             (      romdefs.asm):00631         CBasTMError                     EQU     $B151           Print ?TM Error and return to basic
     00AF             (      romdefs.asm):00632         CBasTronFlag                    EQU     $00AF           Tron flag nonzero=trace on
     AED2             (      romdefs.asm):00633         CBasULError                     EQU     $AED2           Print ?UL Error and return to basic
     0076             (      romdefs.asm):00634         CBasUnused1                     EQU     $0076           2 unused bytes
     00B0             (      romdefs.asm):00635         CBasUSRTableAddr                EQU     $00B0           Address of USR address table
     013E             (      romdefs.asm):00636         CBasUsrVecNoDisk                EQU     $013E           USR vector tabl when basic not installed
     001D             (      romdefs.asm):00637         CBasVarArrayAddr                EQU     $001D           Start address of Array table
     0052             (      romdefs.asm):00638         CBasVarAssign16                 EQU     $0052           Part of FPA1, used for 16bit assigns
     0033             (      romdefs.asm):00639         CBasVarDataAddr                 EQU     $0033           Address of next item in data
     0031             (      romdefs.asm):00640         CBasVarDataLine                 EQU     $0031           Line number of current data statement
     001F             (      romdefs.asm):00641         CBasVarEnd                      EQU     $001F           End of storage in use by basic
     004F             (      romdefs.asm):00642         CBasVarFPAcc1                   EQU     $004F           Floating point acumulator 1
     005C             (      romdefs.asm):00643         CBasVarFPAcc2                   EQU     $005C           Floating point acumulator 2
     0040             (      romdefs.asm):00644         CBasVarFPAcc3                   EQU     $0040           Floating point accumulator 3 (packed)
     0045             (      romdefs.asm):00645         CBasVarFPAcc4                   EQU     $0045           Floating point accumulator 4 (packed)
     004A             (      romdefs.asm):00646         CBasVarFPAcc5                   EQU     $004A           Floating point accumulator 5 (packed)
     0037             (      romdefs.asm):00647         CBasVarLastInUse                EQU     $0037           Pointer to variable last in use
     0039             (      romdefs.asm):00648         CBasVarPtrLast                  EQU     $0039           Poiinter to VARPTR last in use
     001B             (      romdefs.asm):00649         CBasVarSimpleAddr               EQU     $001B           Start address of simple variables
     0021             (      romdefs.asm):00650         CBasVarStringBase               EQU     $0021           Base address of string space (and stack)
     0023             (      romdefs.asm):00651         CBasVarStrTop                   EQU     $0023           Top of string space in use
     0006             (      romdefs.asm):00652         CBasVarType                     EQU     $0006           Variable type flag 0=numeric, $ff=string
     AD21             (      romdefs.asm):00653         CBasVect1                       EQU     $AD21           Sets up various basic vectors (after load), should be followed by call to BasVect2
     AD26             (      romdefs.asm):00654         CBasVect1a                      EQU     $AD26           Same as Vect1, but doesn't reset input pointer
     ACEF             (      romdefs.asm):00655         CBasVect2                       EQU     $ACEF           Finalises setup of basic vectors (after load), should be preceeded by call to BasVect1
     BC06             (      romdefs.asm):00656         CBasZDError                     EQU     $BC06           Print ?ZD Error and return to basic
     01E3             (      romdefs.asm):00657         CCasASCIIFlag                   EQU     $01E3           ASCII flag byte
     A974             (      romdefs.asm):00658         CCasAudioOff                    EQU     $A974           Turn off audio from cassette
     A99D             (      romdefs.asm):00659         CCasAudioOn                     EQU     $A99D           Turn on Audio from cassete to speaker
     0083             (      romdefs.asm):00660         CCasBitCount                    EQU     $0083           Cassette bit counter
     A755             (      romdefs.asm):00661         CCasBitIn                       EQU     $A755           Reads a bity into the 'Z' flag
     A70B             (      romdefs.asm):00662         CCasBlockIn                     EQU     $A70B           Reads a block into the cassete buffer pointed to by CasIOBuffAddr
     007D             (      romdefs.asm):00663         CCasBlockLen                    EQU     $007D           Cassete block length, number of bytes read, or to be written
     A7F4             (      romdefs.asm):00664         CCasBlockOut                    EQU     $A7F4           Write a block to cassete pointed to by CasIOBuffAddr
     007C             (      romdefs.asm):00665         CCasBlockType                   EQU     $007C           Cassete block type, 0=filename, 1=data, 255=EOF
     A749             (      romdefs.asm):00666         CCasByteIn                      EQU     $A749           Reads a single byte into the A register
     A82A             (      romdefs.asm):00667         CCasByteOut                     EQU     $A82A           Write byte in A register to cassete
     0080             (      romdefs.asm):00668         CCasCkSum                       EQU     $0080           Used by cassette routines for calculating checksum
     A429             (      romdefs.asm):00669         CCasClosFiles                   EQU     $A429           Close any open cassete file
     01E5             (      romdefs.asm):00670         CCasEntryAddr                   EQU     $01E5           Entry address for MC programs
     0070             (      romdefs.asm):00671         CCasEOFFlag                     EQU     $0070           Cassette IO Flag, nonzero if EOF reached
     A681             (      romdefs.asm):00672         CCasFindFile                    EQU     $A681           Searches a tape for specified filename
     01D2             (      romdefs.asm):00673         CCasFName                       EQU     $01D2           Cassete filename to search for or write out
     01DA             (      romdefs.asm):00674         CCasFNameFound                  EQU     $01DA           Filename found, when reading
     01D1             (      romdefs.asm):00675         CCasFNameLen                    EQU     $01D1           Length of cassette filename can be 0 to 8
     01E2             (      romdefs.asm):00676         CCasFType                       EQU     $01E2           File type 0=tokenized basic, 1=ASCII data, 2=Binary
     01E4             (      romdefs.asm):00677         CCasGapFlag                     EQU     $01E4           Gap flag byte
     007A             (      romdefs.asm):00678         CCasHeadBuffAddr                EQU     $007A           Address of cassette file header
     01DA             (      romdefs.asm):00679         CCasIOBuff                      EQU     $01DA           COS default IO buffer, if this contains filename block then folloing are valid
     007E             (      romdefs.asm):00680         CCasIOBuffAddr                  EQU     $007E           Cassette IO buffer address, where data will be read/written
     0079             (      romdefs.asm):00681         CCasIOBuffSize                  EQU     $0079           Size of cassette IO buffer
     0081             (      romdefs.asm):00682         CCasIOErrorCode                 EQU     $0081           Cassette IO error code 0=no error, 1=CRC, 2=attempt to load in non-ram area
     006E             (      romdefs.asm):00683         CCasIOFlag                      EQU     $006E           Cassette IO Flag, set to $FF when IO in progress
     0085             (      romdefs.asm):00684         CCasLastSine                    EQU     $0085           Casette last sine tabe entry
     0092             (      romdefs.asm):00685         CCasLeadCount                   EQU     $0092           Cassete leader count, number of $55 bytes in the leader
     01E7             (      romdefs.asm):00686         CCasLoadAddr                    EQU     $01E7           Load address
     0091             (      romdefs.asm):00687         CCasMax12                       EQU     $0091           Cassette Upper limit of 1200Hz
     0092             (      romdefs.asm):00688         CCasMax24                       EQU     $0092           Cassette Upper limit of 2400Hz
     008A             (      romdefs.asm):00689         CCasMotorDelay                  EQU     $008A           Cassette motor on delay (also inter-block gap)
     A7EB             (      romdefs.asm):00690         CCasMotorOff                    EQU     $A7EB           Turn off cassette motor
     A7CA             (      romdefs.asm):00691         CCasMotorOn                     EQU     $A7CA           Turn on motor, and wait for delay in CasMotorDelay
     008F             (      romdefs.asm):00692         CCasPartrt                      EQU     $008F           Cassette 1200/2400 partition
     0084             (      romdefs.asm):00693         CCasPhaseFlag                   EQU     $0084           Cassette Phase flag
     A511             (      romdefs.asm):00694         CCasReadBin                     EQU     $A511           Read in a binary file, similar to CLOADM
     A701             (      romdefs.asm):00695         CCasReadBlock1                  EQU     $A701           Turns on motor, reads header and then first block into CasIOBufAddr
     A77C             (      romdefs.asm):00696         CCasReadLeader                  EQU     $A77C           Turn on motor and read past leader
     0078             (      romdefs.asm):00697         CCasStatus                      EQU     $0078           Cassette status byte, 0=cassette closed, 1=open for input, 2=open for output
     0082             (      romdefs.asm):00698         CCasTemp                        EQU     $0082           Cassette tempory storage
     A469             (      romdefs.asm):00699         CCasWriteBasic                  EQU     $A469           Write tokenized basic program out, similar to CSAVE
     833D             (      romdefs.asm):00700         CCasWriteBin                    EQU     $833D           Write a binary file out push return address, then start,end and entry addresses and then JMP to this
     A7E5             (      romdefs.asm):00701         CCasWriteBlock1                 EQU     $A7E5           Turn on motor, write leader and then first block
     A7D8             (      romdefs.asm):00702         CCasWriteLeader                 EQU     $A7D8           Turn on motor and write out leader
     BC93             (      romdefs.asm):00703         CCmdABS                         EQU     $BC93           Basic Command
     B2D5             (      romdefs.asm):00704         CCmdAND                         EQU     $B2D5           Basic Command
     B6A0             (      romdefs.asm):00705         CCmdASC                         EQU     $B6A0           Basic Command
     83B0             (      romdefs.asm):00706         CCmdATN                         EQU     $83B0           Basic Command
     A990             (      romdefs.asm):00707         CCmdAudio                       EQU     $A990           Basic Command
     B68C             (      romdefs.asm):00708         CCmdCHRS                        EQU     $B68C           Basic Command
     9E9D             (      romdefs.asm):00709         CCmdCircle                      EQU     $9E9D           Basic Command
     AE41             (      romdefs.asm):00710         CCmdClear                       EQU     $AE41           Basic Command
     A498             (      romdefs.asm):00711         CCmdCload                       EQU     $A498           Basic Command
     A416             (      romdefs.asm):00712         CCmdClose                       EQU     $A416           Basic Command
     A910             (      romdefs.asm):00713         CCmdCLS                         EQU     $A910           Basic Command
     9546             (      romdefs.asm):00714         CCmdColor                       EQU     $9546           Basic Command
     AE30             (      romdefs.asm):00715         CCmdCont                        EQU     $AE30           Basic Command
     8378             (      romdefs.asm):00716         CCmdCOS                         EQU     $8378           Basic Command
     A44C             (      romdefs.asm):00717         CCmdCsave                       EQU     $A44C           Basic Command
     AEE0             (      romdefs.asm):00718         CCmdData                        EQU     $AEE0           Basic Command
     8871             (      romdefs.asm):00719         CCmdDef                         EQU     $8871           Basic Command
     8970             (      romdefs.asm):00720         CCmdDelete                      EQU     $8970           Basic Command
     B34E             (      romdefs.asm):00721         CCmdDim                         EQU     $B34E           Basic Command
     BB91             (      romdefs.asm):00722         CCmdDivide                      EQU     $BB91           Basic Command
     8C18             (      romdefs.asm):00723         CCmdDload                       EQU     $8C18           Basic Command
     9CB6             (      romdefs.asm):00724         CCmdDraw                        EQU     $9CB6           Basic Command
     8533             (      romdefs.asm):00725         CCmdEdit                        EQU     $8533           Basic Command
     AE02             (      romdefs.asm):00726         CCmdEnd                         EQU     $AE02           Basic Command
     A5CE             (      romdefs.asm):00727         CCmdEOF                         EQU     $A5CE           Basic Command
     A53E             (      romdefs.asm):00728         CCmdExec                        EQU     $A53E           Basic Command
     84F2             (      romdefs.asm):00729         CCmdEXP                         EQU     $84F2           Basic Command
     011D             (      romdefs.asm):00730         CCmdExponet                     EQU     $011D           Basic Command
     8524             (      romdefs.asm):00731         CCmdFIX                         EQU     $8524           Basic Command
     AD47             (      romdefs.asm):00732         CCmdFor                         EQU     $AD47           Basic Command
     9755             (      romdefs.asm):00733         CCmdGet                         EQU     $9755           Basic Command
     AE86             (      romdefs.asm):00734         CCmdGo                          EQU     $AE86           Basic Command
     8BDD             (      romdefs.asm):00735         CCmdHexS                        EQU     $8BDD           Basic Command
     AF14             (      romdefs.asm):00736         CCmdIF                          EQU     $AF14           Basic Command
     A564             (      romdefs.asm):00737         CCmdInkeyS                      EQU     $A564           Basic Command
     AFF5             (      romdefs.asm):00738         CCmdInput                       EQU     $AFF5           Basic Command
     877E             (      romdefs.asm):00739         CCmdInstr                       EQU     $877E           Basic Command
     BCEE             (      romdefs.asm):00740         CCmdINT                         EQU     $BCEE           Basic Command
     A9C6             (      romdefs.asm):00741         CCmdJoystk                      EQU     $A9C6           Basic Command
     B6AB             (      romdefs.asm):00742         CCmdLeftS                       EQU     $B6AB           Basic Command
     B681             (      romdefs.asm):00743         CCmdLEN                         EQU     $B681           Basic Command
     AF89             (      romdefs.asm):00744         CCmdLet                         EQU     $AF89           Basic Command
     93BB             (      romdefs.asm):00745         CCmdLine                        EQU     $93BB           Basic Command
     89C0             (      romdefs.asm):00746         CCmdLineInput                   EQU     $89C0           Line input command
     B764             (      romdefs.asm):00747         CCmdList                        EQU     $B764           Basic Command
     B75E             (      romdefs.asm):00748         CCmdLList                       EQU     $B75E           Basic Command
     8446             (      romdefs.asm):00749         CCmdLOG                         EQU     $8446           Basic Command
     B4EE             (      romdefs.asm):00750         CCmdMEM                         EQU     $B4EE           Basic Command
     B6CF             (      romdefs.asm):00751         CCmdMidS                        EQU     $B6CF           Basic Command
     B9BC             (      romdefs.asm):00752         CCmdMinus                       EQU     $B9BC           Basic Command
     A7BD             (      romdefs.asm):00753         CCmdMotor                       EQU     $A7BD           Basic Command
     BACC             (      romdefs.asm):00754         CCmdMultiply                    EQU     $BACC           Basic Command
     AD17             (      romdefs.asm):00755         CCmdNew                         EQU     $AD17           Basic Command
     B0F8             (      romdefs.asm):00756         CCmdNext                        EQU     $B0F8           Basic Command
     AF42             (      romdefs.asm):00757         CCmdON                          EQU     $AF42           Basic Command
     A5F6             (      romdefs.asm):00758         CCmdOpen                        EQU     $A5F6           Basic Command
     A603             (      romdefs.asm):00759         CCmdOpenEntry                   EQU     $A603           Entry into Basic open command used by Dragon/SuperDos
     B2D4             (      romdefs.asm):00760         CCmdOR                          EQU     $B2D4           Basic Command
     98EC             (      romdefs.asm):00761         CCmdPaint                       EQU     $98EC           Basic Command
     968B             (      romdefs.asm):00762         CCmdPClear                      EQU     $968B           Basic Command
     9532             (      romdefs.asm):00763         CCmdPCls                        EQU     $9532           Basic Command
     9723             (      romdefs.asm):00764         CCmdPcopy                       EQU     $9723           Basic Command
     B750             (      romdefs.asm):00765         CCmdPeek                        EQU     $B750           Basic Command
     9A22             (      romdefs.asm):00766         CCmdPlay                        EQU     $9A22           Basic Command
     B9C5             (      romdefs.asm):00767         CCmdPlus                        EQU     $B9C5           Basic Command
     9621             (      romdefs.asm):00768         CCmdPmode                       EQU     $9621           Basic Command
     A8F5             (      romdefs.asm):00769         CCmdPoint                       EQU     $A8F5           Basic Command
     B757             (      romdefs.asm):00770         CCmdPoke                        EQU     $B757           Basic Command
     86AC             (      romdefs.asm):00771         CCmdPOS                         EQU     $86AC           Basic Command
     9339             (      romdefs.asm):00772         CCmdPPoint                      EQU     $9339           Basic Command
     9365             (      romdefs.asm):00773         CCmdPReset                      EQU     $9365           Basic Command
     B8F7             (      romdefs.asm):00774         CCmdPrint                       EQU     $B8F7           Basic Command
     9361             (      romdefs.asm):00775         CCmdPset                        EQU     $9361           Basic Command
     9758             (      romdefs.asm):00776         CCmdPut                         EQU     $9758           Basic Command
     B046             (      romdefs.asm):00777         CCmdRead                        EQU     $B046           Basic Command
     B049             (      romdefs.asm):00778         CCmdReadFromX                   EQU     $B049           As basic READ command but ptr in X supplied by caller
     AEE3             (      romdefs.asm):00779         CCmdREM                         EQU     $AEE3           Basic Command
     8A09             (      romdefs.asm):00780         CCmdRenum                       EQU     $8A09           Basic Command
     A8B1             (      romdefs.asm):00781         CCmdReset                       EQU     $A8B1           Basic Command
     ADE4             (      romdefs.asm):00782         CCmdRestore                     EQU     $ADE4           Basic Command
     AEC0             (      romdefs.asm):00783         CCmdReturn                      EQU     $AEC0           Basic Command
     B6C8             (      romdefs.asm):00784         CCmdRightS                      EQU     $B6C8           Basic Command
     BF1F             (      romdefs.asm):00785         CCmdRND                         EQU     $BF1F           Basic Command
     AE75             (      romdefs.asm):00786         CCmdRun                         EQU     $AE75           Basic Command
     9670             (      romdefs.asm):00787         CCmdScreen                      EQU     $9670           Basic Command
     A880             (      romdefs.asm):00788         CCmdSet                         EQU     $A880           Basic Command
     BC7A             (      romdefs.asm):00789         CCmdSGN                         EQU     $BC7A           Basic Command
     BF78             (      romdefs.asm):00790         CCmdSIN                         EQU     $BF78           Basic Command
     A5EC             (      romdefs.asm):00791         CCmdSkipf                       EQU     $A5EC           Basic Command
     A94B             (      romdefs.asm):00792         CCmdSound                       EQU     $A94B           Basic Command
     8480             (      romdefs.asm):00793         CCmdSQR                         EQU     $8480           Basic Command
     AE09             (      romdefs.asm):00794         CCmdStop                        EQU     $AE09           Basic Command
     874E             (      romdefs.asm):00795         CCmdStringS                     EQU     $874E           Basic Command
     B4FD             (      romdefs.asm):00796         CCmdSTRS                        EQU     $B4FD           Basic Command
     8381             (      romdefs.asm):00797         CCmdTAN                         EQU     $8381           Basic Command
     8968             (      romdefs.asm):00798         CCmdTimer                       EQU     $8968           Basic Command
     86A8             (      romdefs.asm):00799         CCmdTroff                       EQU     $86A8           Basic Command
     86A7             (      romdefs.asm):00800         CCmdTron                        EQU     $86A7           Basic Command
     0112             (      romdefs.asm):00801         CCmdUSR                         EQU     $0112           Basic Command
     B716             (      romdefs.asm):00802         CCmdVAL                         EQU     $B716           Basic Command
     86BE             (      romdefs.asm):00803         CCmdVarptr                      EQU     $86BE           Basic Command
     00B3             (      romdefs.asm):00804         CGrBackground                   EQU     $00B3           Current background colour
     00B9             (      romdefs.asm):00805         CGrBytesPerLine                 EQU     $00B9           Number of byts/lin in current mode
     A8D9             (      romdefs.asm):00806         CGrCalcPixelPos                 EQU     $A8D9           Calculates Lo-res pixel pos from data on stack
     00D0             (      romdefs.asm):00807         CGrCircleRadius                 EQU     $00D0           Circle radius
     00CB             (      romdefs.asm):00808         CGrCircleXCo                    EQU     $00CB           Circle command X
     00CD             (      romdefs.asm):00809         CGrCircleYCo                    EQU     $00CD           Circle command Y
     9539             (      romdefs.asm):00810         CGrClearGrScreen                EQU     $9539           Clears grapics screen to value in B
     00C1             (      romdefs.asm):00811         CGrColourSet                    EQU     $00C1           Colour set currently in use
     00B4             (      romdefs.asm):00812         CGrColourTemp                   EQU     $00B4           Tempory colour in use
     00B5             (      romdefs.asm):00813         CGrCurrColour                   EQU     $00B5           Byte value for current colour, to set all pixels in byte to that colour
     00B6             (      romdefs.asm):00814         CGrCurrPmode                    EQU     $00B6           Current PMODE number
     00BD             (      romdefs.asm):00815         CGrCurrX                        EQU     $00BD           Current X cursor pos
     00C7             (      romdefs.asm):00816         CGrCurrXCo                      EQU     $00C7           Current Cursor X
     00BF             (      romdefs.asm):00817         CGrCurrY                        EQU     $00BF           Current Y cursor pos
     00C9             (      romdefs.asm):00818         CGrCurrYCo                      EQU     $00C9           Current Cursor Y
     00DB             (      romdefs.asm):00819         CGrDirtyFlag                    EQU     $00DB           Flag to tell if graphics screen has changed
     00BA             (      romdefs.asm):00820         CGrDisplayStartAddr             EQU     $00BA           Address of first byte in current display
     9CB6             (      romdefs.asm):00821         CGrDraw                         EQU     $9CB6           Draw on pmode screen as in DRAW command
     00E8             (      romdefs.asm):00822         CGrDrawAngle                    EQU     $00E8           Current angle for DRAW command
     00E9             (      romdefs.asm):00823         CGrDrawScale                    EQU     $00E9           Current scale for DRAW command
     00B2             (      romdefs.asm):00824         CGrForeground                   EQU     $00B2           Current foreground colour
     00B7             (      romdefs.asm):00825         CGrLastDisplayAddr              EQU     $00B7           Address of last byte in current display
     00C3             (      romdefs.asm):00826         CGrPixelNoX                     EQU     $00C3           Current horizontal pixel no
     00C5             (      romdefs.asm):00827         CGrPixelNoY                     EQU     $00C5           Current vertical pixel number
     00C2             (      romdefs.asm):00828         CGrPlotFlag                     EQU     $00C2           Plot/Unplot flag, 0=reset, nonzero=set
     9695             (      romdefs.asm):00829         CGrReserveGrRam                 EQU     $9695           Reserves memory for graphics, no graphics pages in B
     A8B5             (      romdefs.asm):00830         CGrResetLRGPixel                EQU     $A8B5           ReSets lo res pixel
     9682             (      romdefs.asm):00831         CGrSelectColourSet              EQU     $9682           Selects colour set dependent on B
     95AA             (      romdefs.asm):00832         CGrSelectDisplay                EQU     $95AA           Sets Text or Graphics screen, if Z=1 then text
     9653             (      romdefs.asm):00833         CGrSelectPage                   EQU     $9653           On entry B contains Pmode page to be used
     9616             (      romdefs.asm):00834         CGrSelectVDGColSet              EQU     $9616           Select colour set from data in GrColourSet
     959A             (      romdefs.asm):00835         CGrSetColours                   EQU     $959A           Sets up colours in low memory
     A88D             (      romdefs.asm):00836         CGrSetLRGPixel                  EQU     $A88D           Sets lo res pixel
     0086             (      romdefs.asm):00837         CGrSetResetData                 EQU     $0086           Data for Lo-res set/reset
     95FB             (      romdefs.asm):00838         CGrSetVDGMode                   EQU     $95FB           Set VDG to mode in A register
     960F             (      romdefs.asm):00839         CGrSetVDGOffset                 EQU     $960F           Set VDG offset to page in A
     00BC             (      romdefs.asm):00840         CGrStartPages                   EQU     $00BC           Page number of Start of graphics pages
     A006             (      romdefs.asm):00841         CIndCasBlockIn                  EQU     $A006           Indirect Read cassette block
     A008             (      romdefs.asm):00842         CIndCasBlockOut                 EQU     $A008           Indirect Write cassete block
     A004             (      romdefs.asm):00843         CIndCasOnRead                   EQU     $A004           Indirect prepare cassette for read
     A00C             (      romdefs.asm):00844         CIndCasWriteLead                EQU     $A00C           Indirect Write cassette leader
     A002             (      romdefs.asm):00845         CIndCharOutput                  EQU     $A002           Indirect Character output
     A00A             (      romdefs.asm):00846         CIndJoystickIn                  EQU     $A00A           Indirect joystick in
     A000             (      romdefs.asm):00847         CIndKeyInput                    EQU     $A000           Indirect keyboard input jsr()
     0072             (      romdefs.asm):00848         CIndVecReset                    EQU     $0072           Secondary Reset vector address, must point to NOP
     008A             (      romdefs.asm):00849         CMisc16BitScratch               EQU     $008A           Misc 16 bit scratch register (always zero ??)
     92DD             (      romdefs.asm):00850         CPixMaskTable2Col               EQU     $92DD           Pixel mask table 2 colour mode
     92E5             (      romdefs.asm):00851         CPixMaskTable4Col               EQU     $92E5           Pixel mask table 4 colour mode
     0000             (      romdefs.asm):00852         CPrinterCRLF                    EQU     $0000           Moves printer head to next line.
     0000             (      romdefs.asm):00853         CPrinterDirOut                  EQU     $0000           Sends character in A register to printer (uncooked)
     A2BF             (      romdefs.asm):00854         CPrinterOut                     EQU     $A2BF           Sends character in A register to printer
     010F             (      romdefs.asm):00855         CSecVecFIRQ                     EQU     $010F           Secondary FIRQ vector JMP+ address
     010C             (      romdefs.asm):00856         CSecVecIRQ                      EQU     $010C           Secondary IRQ vector JMP+ address
     0109             (      romdefs.asm):00857         CSecVecNMI                      EQU     $0109           Secondary NMI vector JMP+ address
     0106             (      romdefs.asm):00858         CSecVecSWI                      EQU     $0106           Secondary NMI vector JMP+ address
     0103             (      romdefs.asm):00859         CSecVecSWI2                     EQU     $0103           Secondary SWI2 vector JMP+ address
     0100             (      romdefs.asm):00860         CSecVecSWI3                     EQU     $0100           Secondary SWI3 vector JMP+ address
     00E6             (      romdefs.asm):00861         CSerDLBaud                      EQU     $00E6           Baud rate for DLOAD, unknown for Dragon
     00E7             (      romdefs.asm):00862         CSerDLTimeout                   EQU     $00E7           Timeourt for DLOAD, unknown for Dragon
     A951             (      romdefs.asm):00863         CSndBeep                        EQU     $A951           Play a beep duration in B, frequency in SndPitch
     A974             (      romdefs.asm):00864         CSndDisable                     EQU     $A974           Disables D/A sound output
     00E5             (      romdefs.asm):00865         CSndDotNoteScale                EQU     $00E5           Dotted note scale factor for Play
     A99E             (      romdefs.asm):00866         CSndDTOAOn                      EQU     $A99E           Turn on audio to D/A converter
     A976             (      romdefs.asm):00867         CSndEnable                      EQU     $A976           Enables D/A sound output
     008D             (      romdefs.asm):00868         CSndLength                      EQU     $008D           Sound duration
     00E1             (      romdefs.asm):00869         CSndNoteLen                     EQU     $00E1           Note length for PLAY
     00DE             (      romdefs.asm):00870         CSndOctave                      EQU     $00DE           Sound octave value for PLAY
     008C             (      romdefs.asm):00871         CSndPitch                       EQU     $008C           Sound pitch value
     9AFF             (      romdefs.asm):00872         CSndPlayNote                    EQU     $9AFF           Plays a note from the A register (ASCII)
     00E2             (      romdefs.asm):00873         CSndTempo                       EQU     $00E2           Tempo for PLAY
     00E3             (      romdefs.asm):00874         CSndTimerPlay                   EQU     $00E3           Timer for the Play command
     00DF             (      romdefs.asm):00875         CSndVolume                      EQU     $00DF           Sound volume for PLAY
     0000             (      romdefs.asm):00876         CSysBoot64                      EQU     $0000           Dragon 64 only, boots basic into all ram mode, with 48K available to basic.
     AC46             (      romdefs.asm):00877         CSysErr                         EQU     $AC46           Report error code in B register, cleanup and return to basic
     AC60             (      romdefs.asm):00878         CSysErr2                        EQU     $AC60           Report error in B, do NOT hook to RAM, or turn of cas etc
     A9DE             (      romdefs.asm):00879         CSysReadJoystick                EQU     $A9DE           Read hardware joystick values & update BasJoyVal0..3
     A027             (      romdefs.asm):00880         CSysReset                       EQU     $A027           Perform soft reset, as if reset button pressed
     A985             (      romdefs.asm):00881         CSysResetDA                     EQU     $A985           Reset D/A converter to $7E
     A9A2             (      romdefs.asm):00882         CSysSelJoystick                 EQU     $A9A2           Select joystick alue to read from A
     0112             (      romdefs.asm):00883         CSysTimeVal                     EQU     $0112           Current value of system timer
     A987             (      romdefs.asm):00884         CSysWriteDA                     EQU     $A987           Write value in A to D/A, bits 0 &1 should be 0
     011A             (      romdefs.asm):00885         CTextCapsLock                   EQU     $011A           Capslock flag, nonzero=uppercase
     A323             (      romdefs.asm):00886         CTextClearLine                  EQU     $A323           Clears a VDU line from current cursor pos to EOL
     A928             (      romdefs.asm):00887         CTextCls                        EQU     $A928           Clear text mode screen, resets cursor to top left
     A92A             (      romdefs.asm):00888         CTextClsChar                    EQU     $A92A           Clears srcrren to character in B register & resets cursor
     008F             (      romdefs.asm):00889         CTextCursFalshCnt               EQU     $008F           Cusrsor flash counter
     006F             (      romdefs.asm):00890         CTextDevN                       EQU     $006F           Current device number
     0035             (      romdefs.asm):00891         CTextKbdBuffAddr                EQU     $0035           Address of keyboard input buffer
     011B             (      romdefs.asm):00892         CTextKbdDelay                   EQU     $011B           Keyboard scan delay constant, used to debounce
     0152             (      romdefs.asm):00893         CTextKbdRollover                EQU     $0152           Rollover table, to check for key releases
     0087             (      romdefs.asm):00894         CTextLastKey                    EQU     $0087           ASCII code of last keypress, not cleard by key release
     A282             (      romdefs.asm):00895         CTextOutChar                    EQU     $A282           Outputs character in A to screen
     B958             (      romdefs.asm):00896         CTextOutCRLF                    EQU     $B958           Outputs an EOL sequence to the screen
     BDCC             (      romdefs.asm):00897         CTextOutNum16                   EQU     $BDCC           Outputs unsigned integer in D to the TextDevN device
     BDD4             (      romdefs.asm):00898         CTextOutNumFPA0                 EQU     $BDD4           Outputs number in FPA0 to screen
     B9AF             (      romdefs.asm):00899         CTextOutQuestion                EQU     $B9AF           Outputs a question mark to screen
     B9AC             (      romdefs.asm):00900         CTextOutSpace                   EQU     $B9AC           Outputs a space to screen
     B99C             (      romdefs.asm):00901         CTextOutString                  EQU     $B99C           Outputs string pointed to by X to screen, X should point to byte before first byte of string
     0148             (      romdefs.asm):00902         CTextPrnAutoCRLF                EQU     $0148           Printer auto EOL flag, nonzero will send EOL sequence at end of line
     0099             (      romdefs.asm):00903         CTextPrnCommaW                  EQU     $0099           Printer comma width
     009C             (      romdefs.asm):00904         CTextPrnCurrCol                 EQU     $009C           Printer current column
     014A             (      romdefs.asm):00905         CTextPrnEOLCnt                  EQU     $014A           Number of characters in EOL sequence 1..4
     014B             (      romdefs.asm):00906         CTextPrnEOLSeq                  EQU     $014B           End of line characters
     009A             (      romdefs.asm):00907         CTextPrnLastComma               EQU     $009A           Printer last comma width, should be printer line width - prinnter comma width
     009B             (      romdefs.asm):00908         CTextPrnLineW                   EQU     $009B           Printer line width
     03FF             (      romdefs.asm):00909         CTextPrnSelFlag                 EQU     $03FF           Dragon 64 printer selection flag, 0=paralell port, nonzero=RS232
     95AC             (      romdefs.asm):00910         CTextResetVDU                   EQU     $95AC           Resets to text mode and screen base address of $400
     A1C1             (      romdefs.asm):00911         CTextScanKbd                    EQU     $A1C1           Scan keyboard, return Char in A, Zero flag set if no key
     0095             (      romdefs.asm):00912         CTextSerBaudRate                EQU     $0095           Serial baud rate, note on Dragon 64, this is the actual hardware baud rate reg.
     0097             (      romdefs.asm):00913         CTextSerEOLDelay                EQU     $0097           End of line delay for serial port on Dragon 64 & CoCo
     A199             (      romdefs.asm):00914         CTextUpdateCurs                 EQU     $A199           Decrements TextCursFlashCnt, if zero resets and flashes cursor
     006A             (      romdefs.asm):00915         CTextVDUCommaW                  EQU     $006A           VDU comma width field
     006C             (      romdefs.asm):00916         CTextVDUCurrCol                 EQU     $006C           Current column for VDU output
     0088             (      romdefs.asm):00917         CTextVDUCursAddr                EQU     $0088           Current VDU cursor address
     006B             (      romdefs.asm):00918         CTextVDULastComma               EQU     $006B           VDU last comma field, should be VDU line width - VDU comma width
     006D             (      romdefs.asm):00919         CTextVDULineW                   EQU     $006D           VDU line width, normally 32
     A30A             (      romdefs.asm):00920         CTextVDUOut                     EQU     $A30A           Outputs Char in A to VDU, does not reset screen.
     ADFB             (      romdefs.asm):00921         CTextWaitKey                    EQU     $ADFB           Wait for a keypress, calls TextScanKbd, also handles break
     8CC6             (      romdefs.asm):00922         CTextWaitKeyCurs                EQU     $8CC6           Same as TextWaitKey, but with cursor
     A171             (      romdefs.asm):00923         CTextWaitKeyCurs2               EQU     $A171           Same as TextWaitKey, but with cursor
     A59A             (      romdefs.asm):00924         CUtilCopyBXtoU                  EQU     $A59A           Copy B bytes from X to U
     B4F2             (      romdefs.asm):00925         CVarAssign16Bit                 EQU     $B4F2           Assigns value in D register to a variable, and returns to basic
     B4F3             (      romdefs.asm):00926         CVarAssign16Bit2                EQU     $B4F3           Assigns value in D register to a variable, and returns to basic (1 less instruction!).
     880E             (      romdefs.asm):00927         CVarAssign16BitB                EQU     $880E           Assigns value in BasVarAssign16 to a variable, and returns to basic
     B4F3             (      romdefs.asm):00928         CVarAssign8Bit                  EQU     $B4F3           Assigns value in B register to a variable, and returns to basic
     B26F             (      romdefs.asm):00929         CVarCKChar                      EQU     $B26F           Check for char in B register in command line, SNError if not
     B267             (      romdefs.asm):00930         CVarCKClBrac                    EQU     $B267           Check for Close bracket ')' in command line, SNError if not
     B26D             (      romdefs.asm):00931         CVarCKComma                     EQU     $B26D           Check for Comma in command line, SNError if not
     B26A             (      romdefs.asm):00932         CVarCKOpBrac                    EQU     $B26A           Check for Open bracket '(' in command line, SNError if not
     B659             (      romdefs.asm):00933         CVarDelVar                      EQU     $B659           Frees up storage used by a variable
     B591             (      romdefs.asm):00934         CVarGarbageCollect              EQU     $B591           Forces garbage collection in string space
     B73D             (      romdefs.asm):00935         CVarGet16Bit                    EQU     $B73D           Returns value of variable in D,FCError if more than 16 bits
     B70B             (      romdefs.asm):00936         CVarGet8Bit                     EQU     $B70B           Returns value of variable in B,FCError if more than 8 bits
     B738             (      romdefs.asm):00937         CVarGetComma8                   EQU     $B738           Checks for comman then gets 8 bit.
     B146             (      romdefs.asm):00938         CVarGetExpr                     EQU     $B146           Evaluate and put the VARPTR of experssion which follows in BasVarAssign16 (carry set)
     B143             (      romdefs.asm):00939         CVarGetExprCC                   EQU     $B143           Evaluate and put the VARPTR of experssion which follows in BasVarAssign16 (carry clear)
     B156             (      romdefs.asm):00940         CVarGetStr                      EQU     $B156           Compiles string and moves to free string space, should be followed by VarGetExpr
     B3E9             (      romdefs.asm):00941         CVarGetUsr                      EQU     $B3E9           Returns argument to USRnn as a 16bit no in D
     B357             (      romdefs.asm):00942         CVarGetVar                      EQU     $B357           Gets VARPTR address of following name and places in BasVarPtrLast
     BA1C             (      romdefs.asm):00943         CVarNormFPA0                    EQU     $BA1C           Normalize FPA0
     01A0             (      romdefs.asm):00944         CVectAccessScreen               EQU     $01A0           Called before CLS, GET & PUT are executed
     019D             (      romdefs.asm):00945         CVectAssignStr                  EQU     $019D           Called before assigning string to string variable
     015E             (      romdefs.asm):00946         CVectBase                       EQU     $015E           Base address of ram hooks/vectors
     0188             (      romdefs.asm):00947         CVectCheckEOF                   EQU     $0188           called before checking for end of file
     017F             (      romdefs.asm):00948         CVectCheckKeys                  EQU     $017F           Called before keyboard is scanned for BREAK,SHIFT-@
     0173             (      romdefs.asm):00949         CVectCloseAllFiles              EQU     $0173           Called before closing all files
     0176             (      romdefs.asm):00950         CVectCloseFile                  EQU     $0176           Called before closing a file
     0185             (      romdefs.asm):00951         CVectCloseFileCmd               EQU     $0185           Called before closing an ASCII file read in as basic
     0179             (      romdefs.asm):00952         CVectCmdInterp                  EQU     $0179           Called before interpreting a token in A
     01A6             (      romdefs.asm):00953         CVectDeTokenize                 EQU     $01A6           Called before a line is de-tokenized
     0164             (      romdefs.asm):00954         CVectDevInit                    EQU     $0164           Called before initialising a device
     0161             (      romdefs.asm):00955         CVectDevNo                      EQU     $0161           Called when a device number is verified
     015E             (      romdefs.asm):00956         CVectDevOpen                    EQU     $015E           Called before a device is opened
     018B             (      romdefs.asm):00957         CVectEvaluateExpr               EQU     $018B           Called before evaluating expression
     019A             (      romdefs.asm):00958         CVectGetNextCmd                 EQU     $019A           Called before fetching next command to be executed by BASIC
     016A             (      romdefs.asm):00959         CVectInChar                     EQU     $016A           Called before inputting a char to A
     016D             (      romdefs.asm):00960         CVectInputFile                  EQU     $016D           Called before inputting from a file
     0182             (      romdefs.asm):00961         CVectLineInputFile              EQU     $0182           Called before LINE INPUT is executed
     0167             (      romdefs.asm):00962         CVectOutChar                    EQU     $0167           Called before outputting char in A to a device
     0170             (      romdefs.asm):00963         CVectOutputFile                 EQU     $0170           Called before outputting to a file
     017C             (      romdefs.asm):00964         CVectReReqestIn                 EQU     $017C           Called before re-requesing input from keyboard
     0197             (      romdefs.asm):00965         CVectResetBasMem                EQU     $0197           Called before changing BASIC memory vectors after LOAD etc
     0194             (      romdefs.asm):00966         CVectRunLink                    EQU     $0194           Called when RUN about to be executed
     0191             (      romdefs.asm):00967         CVectSysError                   EQU     $0191           Can be patched by system to trap error messages
     01A3             (      romdefs.asm):00968         CVectTokenize                   EQU     $01A3           Called before an ASCII line is tokenized
     018E             (      romdefs.asm):00969         CVectUserError                  EQU     $018E           Can be patched by user to trap error messages
     80C0             (      romdefs.asm):00970         CWarmStart                      EQU     $80C0           Warm start routine
     0071             (      romdefs.asm):00971         CWarmStartFlag                  EQU     $0071           Warm start flag $55=warm start, else cold start
                      (      romdefs.asm):00972         
                      (      romdefs.asm):00973                                 ifdef Dragon
                      (      romdefs.asm):00974         
     0000             (      romdefs.asm):00975         StubResWordsOfs         EQU     DStubResWordsOfs
     0001             (      romdefs.asm):00976         StubResLookupOfs                EQU     DStubResLookupOfs
     0003             (      romdefs.asm):00977         StubResJumpOfs                  EQU     DStubResJumpOfs
     0005             (      romdefs.asm):00978         StubFuncsOfs                    EQU     DStubFuncsOfs
     0006             (      romdefs.asm):00979         StubFuncsLookupOfs              EQU     DStubFuncsLookupOfs
     0008             (      romdefs.asm):00980         StubFuncsJumpOfs                EQU     DStubFuncsJumpOfs
     0021             (      romdefs.asm):00981         Skip1                           EQU     DSkip1
     008C             (      romdefs.asm):00982         Skip2                           EQU     DSkip2
     0086             (      romdefs.asm):00983         Skip1LD                         EQU     DSkip1LD
     007D             (      romdefs.asm):00984         Skip2TST                        EQU     DSkip2TST
     0000             (      romdefs.asm):00985         CoCoVec167                      EQU     DCoCoVec167
     0000             (      romdefs.asm):00986         CoCoVect16A                     EQU     DCoCoVect16A
     0000             (      romdefs.asm):00987         CoCoVect176                     EQU     DCoCoVect176
     0000             (      romdefs.asm):00988         CoCoVect179                     EQU     DCoCoVect179
     0000             (      romdefs.asm):00989         CoCoVect18B                     EQU     DCoCoVect18B
     0000             (      romdefs.asm):00990         CoCoVect191                     EQU     DCoCoVect191
     0000             (      romdefs.asm):00991         CoCoVect194                     EQU     DCoCoVect194
     0000             (      romdefs.asm):00992         CoCoVect197                     EQU     DCoCoVect197
     0000             (      romdefs.asm):00993         CoCoVect19A                     EQU     DCoCoVect19A
     0000             (      romdefs.asm):00994         CoCoVect1A3                     EQU     DCoCoVect1A3
     0027             (      romdefs.asm):00995         AddrFWareRamTop                 EQU     DAddrFWareRamTop
     0074             (      romdefs.asm):00996         AddrRamTop                      EQU     DAddrRamTop
     0021             (      romdefs.asm):00997         AddrStack                       EQU     DAddrStack
     0123             (      romdefs.asm):00998         BasAddrCmdDisp                  EQU     DBasAddrCmdDisp
     0121             (      romdefs.asm):00999         BasAddrCmdList                  EQU     DBasAddrCmdList
     012D             (      romdefs.asm):01000         BasAddrDskCmdDisp               EQU     DBasAddrDskCmdDisp
     012B             (      romdefs.asm):01001         BasAddrDskCmdList               EQU     DBasAddrDskCmdList
     0132             (      romdefs.asm):01002         BasAddrDskFuncDisp              EQU     DBasAddrDskFuncDisp
     0130             (      romdefs.asm):01003         BasAddrDskFuncList              EQU     DBasAddrDskFuncList
     0128             (      romdefs.asm):01004         BasAddrFuncDisp                 EQU     DBasAddrFuncDisp
     0126             (      romdefs.asm):01005         BasAddrFuncList                 EQU     DBasAddrFuncList
     00A6             (      romdefs.asm):01006         BasAddrSigByte                  EQU     DBasAddrSigByte
     B84E             (      romdefs.asm):01007         BasAOError                      EQU     DBasAOError
     0005             (      romdefs.asm):01008         BasArrayEval                    EQU     DBasArrayEval
     B400             (      romdefs.asm):01009         BasBootBasic                    EQU     DBasBootBasic
     0017             (      romdefs.asm):01010         BasBotStack                     EQU     DBasBotStack
     84DA             (      romdefs.asm):01011         BasBRARun                       EQU     DBasBRARun
     0000             (      romdefs.asm):01012         BasBreakFlag                    EQU     DBasBreakFlag
     03D7             (      romdefs.asm):01013         BasBuffer                       EQU     DBasBuffer
     831C             (      romdefs.asm):01014         BasChkArrSpaceMv                EQU     DBasChkArrSpaceMv
     8331             (      romdefs.asm):01015         BasChkB2Free                    EQU     DBasChkB2Free
     9C76             (      romdefs.asm):01016         BasChkDirect                    EQU     DBasChkDirect
     009F             (      romdefs.asm):01017         BasChrGet                       EQU     DBasChrGet
     00A5             (      romdefs.asm):01018         BasChrGetCurr                   EQU     DBasChrGetCurr
     00D3             (      romdefs.asm):01019         BasCloadMOffs                   EQU     DBasCloadMOffs
     8371             (      romdefs.asm):01020         BasCmdMode                      EQU     DBasCmdMode
     0029             (      romdefs.asm):01021         BasContLine                     EQU     DBasContLine
     0068             (      romdefs.asm):01022         BasCurrentLine                  EQU     DBasCurrentLine
     0001             (      romdefs.asm):01023         BasDelim1                       EQU     DBasDelim1
     0002             (      romdefs.asm):01024         BasDelim2                       EQU     DBasDelim2
     002F             (      romdefs.asm):01025         BasDirectTextPtr                EQU     DBasDirectTextPtr
     0008             (      romdefs.asm):01026         BasDisArraySearch               EQU     DBasDisArraySearch
     B851             (      romdefs.asm):01027         BasDNError                      EQU     DBasDNError
     84ED             (      romdefs.asm):01028         BasDoDispatch                   EQU     DBasDoDispatch
     00D7             (      romdefs.asm):01029         BasEditorLineLen                EQU     DBasEditorLineLen
     82A9             (      romdefs.asm):01030         BasErrorCodeTable               EQU     DBasErrorCodeTable
     009D             (      romdefs.asm):01031         BasExecAddr                     EQU     DBasExecAddr
     8B8D             (      romdefs.asm):01032         BasFCError                      EQU     DBasFCError
     83FF             (      romdefs.asm):01033         BasFindLineNo                   EQU     DBasFindLineNo
     B848             (      romdefs.asm):01034         BasFMError                      EQU     DBasFMError
     0007             (      romdefs.asm):01035         BasGarbageFlag                  EQU     DBasGarbageFlag
     0003             (      romdefs.asm):01036         BasGenCount                     EQU     DBasGenCount
     B7D4             (      romdefs.asm):01037         BasGetDevNo                     EQU     DBasGetDevNo
     869A             (      romdefs.asm):01038         BasGetLineNo                    EQU     DBasGetLineNo
     8DEA             (      romdefs.asm):01039         BasGetStrFirst                  EQU     DBasGetStrFirst
     8D9A             (      romdefs.asm):01040         BasGetStrLenAddr                EQU     DBasGetStrLenAddr
     8027             (      romdefs.asm):01041         BasicCassBitIn                  EQU     DBasicCassBitIn
     8024             (      romdefs.asm):01042         BasicCassByIn                   EQU     DBasicCassByIn
     801E             (      romdefs.asm):01043         BasicCassByOut                  EQU     DBasicCassByOut
     8018             (      romdefs.asm):01044         BasicCassOff                    EQU     DBasicCassOff
     8015             (      romdefs.asm):01045         BasicCassOn                     EQU     DBasicCassOn
     8021             (      romdefs.asm):01046         BasicCassOnRd                   EQU     DBasicCassOnRd
     8009             (      romdefs.asm):01047         BasicCursorB                    EQU     DBasicCursorB
     8000             (      romdefs.asm):01048         BasicHWInit                     EQU     DBasicHWInit
     8012             (      romdefs.asm):01049         BasicJoyIn                      EQU     DBasicJoyIn
     8006             (      romdefs.asm):01050         BasicKbdIn                      EQU     DBasicKbdIn
     800F             (      romdefs.asm):01051         BasicPrintOut                   EQU     DBasicPrintOut
     800C             (      romdefs.asm):01052         BasicScreenOut                  EQU     DBasicScreenOut
     802A             (      romdefs.asm):01053         BasicSerIn                      EQU     DBasicSerIn
     802D             (      romdefs.asm):01054         BasicSerOut                     EQU     DBasicSerOut
     8030             (      romdefs.asm):01055         BasicSetBaud                    EQU     DBasicSetBaud
     8003             (      romdefs.asm):01056         BasicSWInit                     EQU     DBasicSWInit
     801B             (      romdefs.asm):01057         BasicWriteLead                  EQU     DBasicWriteLead
     9C7C             (      romdefs.asm):01058         BasIDError                      EQU     DBasIDError
     0004             (      romdefs.asm):01059         BasIfCount                      EQU     DBasIfCount
     B5D3             (      romdefs.asm):01060         BasInBuffFromX                  EQU     DBasInBuffFromX
     0009             (      romdefs.asm):01061         BasInputFlag                    EQU     DBasInputFlag
     B84B             (      romdefs.asm):01062         BasIOError                      EQU     DBasIOError
     9D3D             (      romdefs.asm):01063         BasIRQVec                       EQU     DBasIRQVec
     015A             (      romdefs.asm):01064         BasJoyVal0                      EQU     DBasJoyVal0
     015B             (      romdefs.asm):01065         BasJoyVal1                      EQU     DBasJoyVal1
     015C             (      romdefs.asm):01066         BasJoyVal2                      EQU     DBasJoyVal2
     015D             (      romdefs.asm):01067         BasJoyVal3                      EQU     DBasJoyVal3
     9DD9             (      romdefs.asm):01068         BasLineInputEntry               EQU     DBasLineInputEntry
     02DC             (      romdefs.asm):01069         BasLinInpBuff                   EQU     DBasLinInpBuff
     02DA             (      romdefs.asm):01070         BasLinInpHead                   EQU     DBasLinInpHead
     8EAA             (      romdefs.asm):01071         BasList                         EQU     DBasList
     0066             (      romdefs.asm):01072         BasListLine                     EQU     DBasListLine
     AA87             (      romdefs.asm):01073         BasLocateScreen                 EQU     DBasLocateScreen
     8D6B             (      romdefs.asm):01074         BasLSError                      EQU     DBasLSError
     A101             (      romdefs.asm):01075         BasNEError                      EQU     DBasNEError
     8417             (      romdefs.asm):01076         BasNew                          EQU     DBasNew
     B631             (      romdefs.asm):01077         BasNOError                      EQU     DBasNOError
     0120             (      romdefs.asm):01078         BasNumCmds                      EQU     DBasNumCmds
     012A             (      romdefs.asm):01079         BasNumDskCmds                   EQU     DBasNumDskCmds
     012F             (      romdefs.asm):01080         BasNumDskFuncs                  EQU     DBasNumDskFuncs
     0125             (      romdefs.asm):01081         BasNumFuncs                     EQU     DBasNumFuncs
     002D             (      romdefs.asm):01082         BasOldInputPtr                  EQU     DBasOldInputPtr
     8342             (      romdefs.asm):01083         BasOMError                      EQU     DBasOMError
     91DB             (      romdefs.asm):01084         BasOVError                      EQU     DBasOVError
     851B             (      romdefs.asm):01085         BasPollKeyboard                 EQU     DBasPollKeyboard
     978E             (      romdefs.asm):01086         BasRandom8                      EQU     DBasRandom8
     0115             (      romdefs.asm):01087         BasRandomSeed                   EQU     DBasRandomSeed
     000A             (      romdefs.asm):01088         BasRelateFlag                   EQU     DBasRelateFlag
     00D1             (      romdefs.asm):01089         BasRenumStart                   EQU     DBasRenumStart
     00D5             (      romdefs.asm):01090         BasRenumStartLine               EQU     DBasRenumStartLine
     00CF             (      romdefs.asm):01091         BasRenumVal                     EQU     DBasRenumVal
     8434             (      romdefs.asm):01092         BasResetStack                   EQU     DBasResetStack
     8C52             (      romdefs.asm):01093         BasResStr                       EQU     DBasResStr
     8CB3             (      romdefs.asm):01094         BasResStr2                      EQU     DBasResStr2
     00AB             (      romdefs.asm):01095         BasRndData                      EQU     DBasRndData
     849F             (      romdefs.asm):01096         BasRun                          EQU     DBasRun
     85EE             (      romdefs.asm):01097         BasSetProgPtrX                  EQU     DBasSetProgPtrX
     B4B2             (      romdefs.asm):01098         BasSignonMess                   EQU     DBasSignonMess
     85E7             (      romdefs.asm):01099         BasSkipLineNo                   EQU     DBasSkipLineNo
     89B4             (      romdefs.asm):01100         BasSNError                      EQU     DBasSNError
     0019             (      romdefs.asm):01101         BasStartProg                    EQU     DBasStartProg
     8C99             (      romdefs.asm):01102         BasSTError                      EQU     DBasSTError
     01A9             (      romdefs.asm):01103         BasStrDescStack                 EQU     DBasStrDescStack
     000B             (      romdefs.asm):01104         BasStrFirstFreeTemp             EQU     DBasStrFirstFreeTemp
     000D             (      romdefs.asm):01105         BasStrLastUsedTemp              EQU     DBasStrLastUsedTemp
     0025             (      romdefs.asm):01106         BasStrUtil                      EQU     DBasStrUtil
     0120             (      romdefs.asm):01107         BasStub0                        EQU     DBasStub0
     012A             (      romdefs.asm):01108         BasStub1                        EQU     DBasStub1
     0134             (      romdefs.asm):01109         BasStub2                        EQU     DBasStub2
     013E             (      romdefs.asm):01110         BasStub3                        EQU     DBasStub3
     0013             (      romdefs.asm):01111         BasTempFPA2                     EQU     DBasTempFPA2
     002B             (      romdefs.asm):01112         BasTempLine                     EQU     DBasTempLine
     000F             (      romdefs.asm):01113         BasTempPtr                      EQU     DBasTempPtr
     0011             (      romdefs.asm):01114         BasTempPtr1                     EQU     DBasTempPtr1
     003F             (      romdefs.asm):01115         BasTempRelateFlag               EQU     DBasTempRelateFlag
     003B             (      romdefs.asm):01116         BasTempVarDesc                  EQU     DBasTempVarDesc
     8882             (      romdefs.asm):01117         BasTMError                      EQU     DBasTMError
     00AF             (      romdefs.asm):01118         BasTronFlag                     EQU     DBasTronFlag
     8605             (      romdefs.asm):01119         BasULError                      EQU     DBasULError
     0076             (      romdefs.asm):01120         BasUnused1                      EQU     DBasUnused1
     00B0             (      romdefs.asm):01121         BasUSRTableAddr                 EQU     DBasUSRTableAddr
     0134             (      romdefs.asm):01122         BasUsrVecNoDisk                 EQU     DBasUsrVecNoDisk
     001D             (      romdefs.asm):01123         BasVarArrayAddr                 EQU     DBasVarArrayAddr
     0052             (      romdefs.asm):01124         BasVarAssign16                  EQU     DBasVarAssign16
     0033             (      romdefs.asm):01125         BasVarDataAddr                  EQU     DBasVarDataAddr
     0031             (      romdefs.asm):01126         BasVarDataLine                  EQU     DBasVarDataLine
     001F             (      romdefs.asm):01127         BasVarEnd                       EQU     DBasVarEnd
     004F             (      romdefs.asm):01128         BasVarFPAcc1                    EQU     DBasVarFPAcc1
     005C             (      romdefs.asm):01129         BasVarFPAcc2                    EQU     DBasVarFPAcc2
     0040             (      romdefs.asm):01130         BasVarFPAcc3                    EQU     DBasVarFPAcc3
     0045             (      romdefs.asm):01131         BasVarFPAcc4                    EQU     DBasVarFPAcc4
     004A             (      romdefs.asm):01132         BasVarFPAcc5                    EQU     DBasVarFPAcc5
     0037             (      romdefs.asm):01133         BasVarLastInUse                 EQU     DBasVarLastInUse
     0039             (      romdefs.asm):01134         BasVarPtrLast                   EQU     DBasVarPtrLast
     001B             (      romdefs.asm):01135         BasVarSimpleAddr                EQU     DBasVarSimpleAddr
     0021             (      romdefs.asm):01136         BasVarStringBase                EQU     DBasVarStringBase
     0023             (      romdefs.asm):01137         BasVarStrTop                    EQU     DBasVarStrTop
     0006             (      romdefs.asm):01138         BasVarType                      EQU     DBasVarType
     841F             (      romdefs.asm):01139         BasVect1                        EQU     DBasVect1
     8424             (      romdefs.asm):01140         BasVect1a                       EQU     DBasVect1a
     83ED             (      romdefs.asm):01141         BasVect2                        EQU     DBasVect2
     93B1             (      romdefs.asm):01142         BasZDError                      EQU     DBasZDError
     01E3             (      romdefs.asm):01143         CasASCIIFlag                    EQU     DCasASCIIFlag
     BAC3             (      romdefs.asm):01144         CasAudioOff                     EQU     DCasAudioOff
     BAEC             (      romdefs.asm):01145         CasAudioOn                      EQU     DCasAudioOn
     0083             (      romdefs.asm):01146         CasBitCount                     EQU     DCasBitCount
     BDA5             (      romdefs.asm):01147         CasBitIn                        EQU     DCasBitIn
     B93E             (      romdefs.asm):01148         CasBlockIn                      EQU     DCasBlockIn
     007D             (      romdefs.asm):01149         CasBlockLen                     EQU     DCasBlockLen
     B999             (      romdefs.asm):01150         CasBlockOut                     EQU     DCasBlockOut
     007C             (      romdefs.asm):01151         CasBlockType                    EQU     DCasBlockType
     BDAD             (      romdefs.asm):01152         CasByteIn                       EQU     DCasByteIn
     BE12             (      romdefs.asm):01153         CasByteOut                      EQU     DCasByteOut
     0080             (      romdefs.asm):01154         CasCkSum                        EQU     DCasCkSum
     B65F             (      romdefs.asm):01155         CasClosFiles                    EQU     DCasClosFiles
     01E5             (      romdefs.asm):01156         CasEntryAddr                    EQU     DCasEntryAddr
     0070             (      romdefs.asm):01157         CasEOFFlag                      EQU     DCasEOFFlag
     B8B3             (      romdefs.asm):01158         CasFindFile                     EQU     DCasFindFile
     01D2             (      romdefs.asm):01159         CasFName                        EQU     DCasFName
     01DA             (      romdefs.asm):01160         CasFNameFound                   EQU     DCasFNameFound
     01D1             (      romdefs.asm):01161         CasFNameLen                     EQU     DCasFNameLen
     01E2             (      romdefs.asm):01162         CasFType                        EQU     DCasFType
     01E4             (      romdefs.asm):01163         CasGapFlag                      EQU     DCasGapFlag
     007A             (      romdefs.asm):01164         CasHeadBuffAddr                 EQU     DCasHeadBuffAddr
     01DA             (      romdefs.asm):01165         CasIOBuff                       EQU     DCasIOBuff
     007E             (      romdefs.asm):01166         CasIOBuffAddr                   EQU     DCasIOBuffAddr
     0079             (      romdefs.asm):01167         CasIOBuffSize                   EQU     DCasIOBuffSize
     0081             (      romdefs.asm):01168         CasIOErrorCode                  EQU     DCasIOErrorCode
     006E             (      romdefs.asm):01169         CasIOFlag                       EQU     DCasIOFlag
     0085             (      romdefs.asm):01170         CasLastSine                     EQU     DCasLastSine
     0090             (      romdefs.asm):01171         CasLeadCount                    EQU     DCasLeadCount
     01E7             (      romdefs.asm):01172         CasLoadAddr                     EQU     DCasLoadAddr
     0093             (      romdefs.asm):01173         CasMax12                        EQU     DCasMax12
     0094             (      romdefs.asm):01174         CasMax24                        EQU     DCasMax24
     0095             (      romdefs.asm):01175         CasMotorDelay                   EQU     DCasMotorDelay
     BDDC             (      romdefs.asm):01176         CasMotorOff                     EQU     DCasMotorOff
     BDCF             (      romdefs.asm):01177         CasMotorOn                      EQU     DCasMotorOn
     0092             (      romdefs.asm):01178         CasPartrt                       EQU     DCasPartrt
     0084             (      romdefs.asm):01179         CasPhaseFlag                    EQU     DCasPhaseFlag
     B748             (      romdefs.asm):01180         CasReadBin                      EQU     DCasReadBin
     B933             (      romdefs.asm):01181         CasReadBlock1                   EQU     DCasReadBlock1
     BDE7             (      romdefs.asm):01182         CasReadLeader                   EQU     DCasReadLeader
     0078             (      romdefs.asm):01183         CasStatus                       EQU     DCasStatus
     0082             (      romdefs.asm):01184         CasTemp                         EQU     DCasTemp
     B6A5             (      romdefs.asm):01185         CasWriteBasic                   EQU     DCasWriteBasic
     991B             (      romdefs.asm):01186         CasWriteBin                     EQU     DCasWriteBin
     B991             (      romdefs.asm):01187         CasWriteBlock1                  EQU     DCasWriteBlock1
     801B             (      romdefs.asm):01188         CasWriteLeader                  EQU     DCasWriteLeader
     943E             (      romdefs.asm):01189         CmdABS                          EQU     DCmdABS
     8A12             (      romdefs.asm):01190         CmdAND                          EQU     DCmdAND
     8DE6             (      romdefs.asm):01191         CmdASC                          EQU     DCmdASC
     9877             (      romdefs.asm):01192         CmdATN                          EQU     DCmdATN
     BADF             (      romdefs.asm):01193         CmdAudio                        EQU     DCmdAudio
     8DD2             (      romdefs.asm):01194         CmdCHRS                         EQU     DCmdCHRS
     B238             (      romdefs.asm):01195         CmdCircle                       EQU     DCmdCircle
     8571             (      romdefs.asm):01196         CmdClear                        EQU     DCmdClear
     B6D5             (      romdefs.asm):01197         CmdCload                        EQU     DCmdCload
     B64D             (      romdefs.asm):01198         CmdClose                        EQU     DCmdClose
     BA60             (      romdefs.asm):01199         CmdCLS                          EQU     DCmdCLS
     A8D4             (      romdefs.asm):01200         CmdColor                        EQU     DCmdColor
     8560             (      romdefs.asm):01201         CmdCont                         EQU     DCmdCont
     97CB             (      romdefs.asm):01202         CmdCOS                          EQU     DCmdCOS
     B683             (      romdefs.asm):01203         CmdCsave                        EQU     DCmdCsave
     8613             (      romdefs.asm):01204         CmdData                         EQU     DCmdData
     9C81             (      romdefs.asm):01205         CmdDef                          EQU     DCmdDef
     9D61             (      romdefs.asm):01206         CmdDelete                       EQU     DCmdDelete
     8A8B             (      romdefs.asm):01207         CmdDim                          EQU     DCmdDim
     933C             (      romdefs.asm):01208         CmdDivide                       EQU     DCmdDivide
     A049             (      romdefs.asm):01209         CmdDload                        EQU     DCmdDload
     B051             (      romdefs.asm):01210         CmdDraw                         EQU     DCmdDraw
     9965             (      romdefs.asm):01211         CmdEdit                         EQU     DCmdEdit
     8532             (      romdefs.asm):01212         CmdEnd                          EQU     DCmdEnd
     B801             (      romdefs.asm):01213         CmdEOF                          EQU     DCmdEOF
     B771             (      romdefs.asm):01214         CmdExec                         EQU     DCmdExec
     9713             (      romdefs.asm):01215         CmdEXP                          EQU     DCmdEXP
     96A0             (      romdefs.asm):01216         CmdExponet                      EQU     DCmdExponet
     9956             (      romdefs.asm):01217         CmdFIX                          EQU     DCmdFIX
     8448             (      romdefs.asm):01218         CmdFor                          EQU     DCmdFor
     AAF0             (      romdefs.asm):01219         CmdGet                          EQU     DCmdGet
     85B9             (      romdefs.asm):01220         CmdGo                           EQU     DCmdGo
     A00E             (      romdefs.asm):01221         CmdHexS                         EQU     DCmdHexS
     8647             (      romdefs.asm):01222         CmdIF                           EQU     DCmdIF
     B797             (      romdefs.asm):01223         CmdInkeyS                       EQU     DCmdInkeyS
     872B             (      romdefs.asm):01224         CmdInput                        EQU     DCmdInput
     9BB4             (      romdefs.asm):01225         CmdInstr                        EQU     DCmdInstr
     9499             (      romdefs.asm):01226         CmdINT                          EQU     DCmdINT
     BB0D             (      romdefs.asm):01227         CmdJoystk                       EQU     DCmdJoystk
     8DF1             (      romdefs.asm):01228         CmdLeftS                        EQU     DCmdLeftS
     8DC7             (      romdefs.asm):01229         CmdLEN                          EQU     DCmdLEN
     86BC             (      romdefs.asm):01230         CmdLet                          EQU     DCmdLet
     A749             (      romdefs.asm):01231         CmdLine                         EQU     DCmdLine
     9DB1             (      romdefs.asm):01232         CmdLineInput                    EQU     DCmdLineInput
     8EAA             (      romdefs.asm):01233         CmdList                         EQU     DCmdList
     8EA4             (      romdefs.asm):01234         CmdLList                        EQU     DCmdLList
     923C             (      romdefs.asm):01235         CmdLOG                          EQU     DCmdLOG
     8C31             (      romdefs.asm):01236         CmdMEM                          EQU     DCmdMEM
     8E15             (      romdefs.asm):01237         CmdMidS                         EQU     DCmdMidS
     9105             (      romdefs.asm):01238         CmdMinus                        EQU     DCmdMinus
     B982             (      romdefs.asm):01239         CmdMotor                        EQU     DCmdMotor
     9275             (      romdefs.asm):01240         CmdMultiply                     EQU     DCmdMultiply
     8415             (      romdefs.asm):01241         CmdNew                          EQU     DCmdNew
     8829             (      romdefs.asm):01242         CmdNext                         EQU     DCmdNext
     8675             (      romdefs.asm):01243         CmdON                           EQU     DCmdON
     B829             (      romdefs.asm):01244         CmdOpen                         EQU     DCmdOpen
     B835             (      romdefs.asm):01245         CmdOpenEntry                    EQU     DCmdOpenEntry
     8A11             (      romdefs.asm):01246         CmdOR                           EQU     DCmdOR
     AC87             (      romdefs.asm):01247         CmdPaint                        EQU     DCmdPaint
     AA19             (      romdefs.asm):01248         CmdPClear                       EQU     DCmdPClear
     A8C0             (      romdefs.asm):01249         CmdPCls                         EQU     DCmdPCls
     AABE             (      romdefs.asm):01250         CmdPcopy                        EQU     DCmdPcopy
     8E96             (      romdefs.asm):01251         CmdPeek                         EQU     DCmdPeek
     ADBD             (      romdefs.asm):01252         CmdPlay                         EQU     DCmdPlay
     910E             (      romdefs.asm):01253         CmdPlus                         EQU     DCmdPlus
     A9AF             (      romdefs.asm):01254         CmdPmode                        EQU     DCmdPmode
     BA45             (      romdefs.asm):01255         CmdPoint                        EQU     DCmdPoint
     8E9D             (      romdefs.asm):01256         CmdPoke                         EQU     DCmdPoke
     9ADE             (      romdefs.asm):01257         CmdPOS                          EQU     DCmdPOS
     A6C7             (      romdefs.asm):01258         CmdPPoint                       EQU     DCmdPPoint
     A6F3             (      romdefs.asm):01259         CmdPReset                       EQU     DCmdPReset
     903D             (      romdefs.asm):01260         CmdPrint                        EQU     DCmdPrint
     A6EF             (      romdefs.asm):01261         CmdPset                         EQU     DCmdPset
     AAF3             (      romdefs.asm):01262         CmdPut                          EQU     DCmdPut
     8777             (      romdefs.asm):01263         CmdRead                         EQU     DCmdRead
     877A             (      romdefs.asm):01264         CmdReadFromX                    EQU     DCmdReadFromX
     8616             (      romdefs.asm):01265         CmdREM                          EQU     DCmdREM
     9DFA             (      romdefs.asm):01266         CmdRenum                        EQU     DCmdRenum
     BA04             (      romdefs.asm):01267         CmdReset                        EQU     DCmdReset
     8514             (      romdefs.asm):01268         CmdRestore                      EQU     DCmdRestore
     85F3             (      romdefs.asm):01269         CmdReturn                       EQU     DCmdReturn
     8E0E             (      romdefs.asm):01270         CmdRightS                       EQU     DCmdRightS
     9772             (      romdefs.asm):01271         CmdRND                          EQU     DCmdRND
     85A5             (      romdefs.asm):01272         CmdRun                          EQU     DCmdRun
     A9FE             (      romdefs.asm):01273         CmdScreen                       EQU     DCmdScreen
     B9D3             (      romdefs.asm):01274         CmdSet                          EQU     DCmdSet
     9425             (      romdefs.asm):01275         CmdSGN                          EQU     DCmdSGN
     97D1             (      romdefs.asm):01276         CmdSIN                          EQU     DCmdSIN
     B81F             (      romdefs.asm):01277         CmdSkipf                        EQU     DCmdSkipf
     BA9B             (      romdefs.asm):01278         CmdSound                        EQU     DCmdSound
     9697             (      romdefs.asm):01279         CmdSQR                          EQU     DCmdSQR
     8539             (      romdefs.asm):01280         CmdStop                         EQU     DCmdStop
     9B84             (      romdefs.asm):01281         CmdStringS                      EQU     DCmdStringS
     8C40             (      romdefs.asm):01282         CmdSTRS                         EQU     DCmdSTRS
     9816             (      romdefs.asm):01283         CmdTAN                          EQU     DCmdTAN
     9D59             (      romdefs.asm):01284         CmdTimer                        EQU     DCmdTimer
     9ADA             (      romdefs.asm):01285         CmdTroff                        EQU     DCmdTroff
     9AD9             (      romdefs.asm):01286         CmdTron                         EQU     DCmdTron
     9D1D             (      romdefs.asm):01287         CmdUSR                          EQU     DCmdUSR
     8E5C             (      romdefs.asm):01288         CmdVAL                          EQU     DCmdVAL
     9AF4             (      romdefs.asm):01289         CmdVarptr                       EQU     DCmdVarptr
     00B3             (      romdefs.asm):01290         GrBackground                    EQU     DGrBackground
     00B9             (      romdefs.asm):01291         GrBytesPerLine                  EQU     DGrBytesPerLine
     BA28             (      romdefs.asm):01292         GrCalcPixelPos                  EQU     DGrCalcPixelPos
     00D0             (      romdefs.asm):01293         GrCircleRadius                  EQU     DGrCircleRadius
     00CB             (      romdefs.asm):01294         GrCircleXCo                     EQU     DGrCircleXCo
     00CD             (      romdefs.asm):01295         GrCircleYCo                     EQU     DGrCircleYCo
     A8C7             (      romdefs.asm):01296         GrClearGrScreen                 EQU     DGrClearGrScreen
     00C1             (      romdefs.asm):01297         GrColourSet                     EQU     DGrColourSet
     00B4             (      romdefs.asm):01298         GrColourTemp                    EQU     DGrColourTemp
     00B5             (      romdefs.asm):01299         GrCurrColour                    EQU     DGrCurrColour
     00B6             (      romdefs.asm):01300         GrCurrPmode                     EQU     DGrCurrPmode
     00BD             (      romdefs.asm):01301         GrCurrX                         EQU     DGrCurrX
     00C7             (      romdefs.asm):01302         GrCurrXCo                       EQU     DGrCurrXCo
     00BF             (      romdefs.asm):01303         GrCurrY                         EQU     DGrCurrY
     00C9             (      romdefs.asm):01304         GrCurrYCo                       EQU     DGrCurrYCo
     00DB             (      romdefs.asm):01305         GrDirtyFlag                     EQU     DGrDirtyFlag
     00BA             (      romdefs.asm):01306         GrDisplayStartAddr              EQU     DGrDisplayStartAddr
     B051             (      romdefs.asm):01307         GrDraw                          EQU     DGrDraw
     00E8             (      romdefs.asm):01308         GrDrawAngle                     EQU     DGrDrawAngle
     00E9             (      romdefs.asm):01309         GrDrawScale                     EQU     DGrDrawScale
     00B2             (      romdefs.asm):01310         GrForeground                    EQU     DGrForeground
     00B7             (      romdefs.asm):01311         GrLastDisplayAddr               EQU     DGrLastDisplayAddr
     00C3             (      romdefs.asm):01312         GrPixelNoX                      EQU     DGrPixelNoX
     00C5             (      romdefs.asm):01313         GrPixelNoY                      EQU     DGrPixelNoY
     00C2             (      romdefs.asm):01314         GrPlotFlag                      EQU     DGrPlotFlag
     AA23             (      romdefs.asm):01315         GrReserveGrRam                  EQU     DGrReserveGrRam
     BA07             (      romdefs.asm):01316         GrResetLRGPixel                 EQU     DGrResetLRGPixel
     AA10             (      romdefs.asm):01317         GrSelectColourSet               EQU     DGrSelectColourSet
     A938             (      romdefs.asm):01318         GrSelectDisplay                 EQU     DGrSelectDisplay
     A9E1             (      romdefs.asm):01319         GrSelectPage                    EQU     DGrSelectPage
     A9A4             (      romdefs.asm):01320         GrSelectVDGColSet               EQU     DGrSelectVDGColSet
     A928             (      romdefs.asm):01321         GrSetColours                    EQU     DGrSetColours
     B9DF             (      romdefs.asm):01322         GrSetLRGPixel                   EQU     DGrSetLRGPixel
     0086             (      romdefs.asm):01323         GrSetResetData                  EQU     DGrSetResetData
     A989             (      romdefs.asm):01324         GrSetVDGMode                    EQU     DGrSetVDGMode
     A99D             (      romdefs.asm):01325         GrSetVDGOffset                  EQU     DGrSetVDGOffset
     00BC             (      romdefs.asm):01326         GrStartPages                    EQU     DGrStartPages
     A006             (      romdefs.asm):01327         IndCasBlockIn                   EQU     DIndCasBlockIn
     A008             (      romdefs.asm):01328         IndCasBlockOut                  EQU     DIndCasBlockOut
     A004             (      romdefs.asm):01329         IndCasOnRead                    EQU     DIndCasOnRead
     A00C             (      romdefs.asm):01330         IndCasWriteLead                 EQU     DIndCasWriteLead
     A002             (      romdefs.asm):01331         IndCharOutput                   EQU     DIndCharOutput
     A00A             (      romdefs.asm):01332         IndJoystickIn                   EQU     DIndJoystickIn
     A000             (      romdefs.asm):01333         IndKeyInput                     EQU     DIndKeyInput
     0072             (      romdefs.asm):01334         IndVecReset                     EQU     DIndVecReset
     008A             (      romdefs.asm):01335         Misc16BitScratch                EQU     DMisc16BitScratch
     A66B             (      romdefs.asm):01336         PixMaskTable2Col                EQU     DPixMaskTable2Col
     A673             (      romdefs.asm):01337         PixMaskTable4Col                EQU     DPixMaskTable4Col
     BD0A             (      romdefs.asm):01338         PrinterCRLF                     EQU     DPrinterCRLF
     BCF5             (      romdefs.asm):01339         PrinterDirOut                   EQU     DPrinterDirOut
     BD1A             (      romdefs.asm):01340         PrinterOut                      EQU     DPrinterOut
     010F             (      romdefs.asm):01341         SecVecFIRQ                      EQU     DSecVecFIRQ
     010C             (      romdefs.asm):01342         SecVecIRQ                       EQU     DSecVecIRQ
     0109             (      romdefs.asm):01343         SecVecNMI                       EQU     DSecVecNMI
     0106             (      romdefs.asm):01344         SecVecSWI                       EQU     DSecVecSWI
     0103             (      romdefs.asm):01345         SecVecSWI2                      EQU     DSecVecSWI2
     0100             (      romdefs.asm):01346         SecVecSWI3                      EQU     DSecVecSWI3
     0000             (      romdefs.asm):01347         SerDLBaud                       EQU     DSerDLBaud
     0000             (      romdefs.asm):01348         SerDLTimeout                    EQU     DSerDLTimeout
     BAA0             (      romdefs.asm):01349         SndBeep                         EQU     DSndBeep
     BAC3             (      romdefs.asm):01350         SndDisable                      EQU     DSndDisable
     00E5             (      romdefs.asm):01351         SndDotNoteScale                 EQU     DSndDotNoteScale
     BAED             (      romdefs.asm):01352         SndDTOAOn                       EQU     DSndDTOAOn
     BAC5             (      romdefs.asm):01353         SndEnable                       EQU     DSndEnable
     008D             (      romdefs.asm):01354         SndLength                       EQU     DSndLength
     00E1             (      romdefs.asm):01355         SndNoteLen                      EQU     DSndNoteLen
     00DE             (      romdefs.asm):01356         SndOctave                       EQU     DSndOctave
     008C             (      romdefs.asm):01357         SndPitch                        EQU     DSndPitch
     AE9A             (      romdefs.asm):01358         SndPlayNote                     EQU     DSndPlayNote
     00E2             (      romdefs.asm):01359         SndTempo                        EQU     DSndTempo
     00E3             (      romdefs.asm):01360         SndTimerPlay                    EQU     DSndTimerPlay
     00DF             (      romdefs.asm):01361         SndVolume                       EQU     DSndVolume
     BB80             (      romdefs.asm):01362         SysBoot64                       EQU     DSysBoot64
     8344             (      romdefs.asm):01363         SysErr                          EQU     DSysErr
     835E             (      romdefs.asm):01364         SysErr2                         EQU     DSysErr2
     BD52             (      romdefs.asm):01365         SysReadJoystick                 EQU     DSysReadJoystick
     B3B4             (      romdefs.asm):01366         SysReset                        EQU     DSysReset
     BAD4             (      romdefs.asm):01367         SysResetDA                      EQU     DSysResetDA
     BD41             (      romdefs.asm):01368         SysSelJoystick                  EQU     DSysSelJoystick
     0112             (      romdefs.asm):01369         SysTimeVal                      EQU     DSysTimeVal
     BAD6             (      romdefs.asm):01370         SysWriteDA                      EQU     DSysWriteDA
     0149             (      romdefs.asm):01371         TextCapsLock                    EQU     DTextCapsLock
     BCA0             (      romdefs.asm):01372         TextClearLine                   EQU     DTextClearLine
     BA77             (      romdefs.asm):01373         TextCls                         EQU     DTextCls
     BA79             (      romdefs.asm):01374         TextClsChar                     EQU     DTextClsChar
     008F             (      romdefs.asm):01375         TextCursFalshCnt                EQU     DTextCursFalshCnt
     006F             (      romdefs.asm):01376         TextDevN                        EQU     DTextDevN
     0035             (      romdefs.asm):01377         TextKbdBuffAddr                 EQU     DTextKbdBuffAddr
     0097             (      romdefs.asm):01378         TextKbdDelay                    EQU     DTextKbdDelay
     0150             (      romdefs.asm):01379         TextKbdRollover                 EQU     DTextKbdRollover
     0087             (      romdefs.asm):01380         TextLastKey                     EQU     DTextLastKey
     B54A             (      romdefs.asm):01381         TextOutChar                     EQU     DTextOutChar
     90A1             (      romdefs.asm):01382         TextOutCRLF                     EQU     DTextOutCRLF
     957A             (      romdefs.asm):01383         TextOutNum16                    EQU     DTextOutNum16
     9582             (      romdefs.asm):01384         TextOutNumFPA0                  EQU     DTextOutNumFPA0
     90F8             (      romdefs.asm):01385         TextOutQuestion                 EQU     DTextOutQuestion
     90F5             (      romdefs.asm):01386         TextOutSpace                    EQU     DTextOutSpace
     90E5             (      romdefs.asm):01387         TextOutString                   EQU     DTextOutString
     0148             (      romdefs.asm):01388         TextPrnAutoCRLF                 EQU     DTextPrnAutoCRLF
     0099             (      romdefs.asm):01389         TextPrnCommaW                   EQU     DTextPrnCommaW
     009C             (      romdefs.asm):01390         TextPrnCurrCol                  EQU     DTextPrnCurrCol
     014A             (      romdefs.asm):01391         TextPrnEOLCnt                   EQU     DTextPrnEOLCnt
     014B             (      romdefs.asm):01392         TextPrnEOLSeq                   EQU     DTextPrnEOLSeq
     009A             (      romdefs.asm):01393         TextPrnLastComma                EQU     DTextPrnLastComma
     009B             (      romdefs.asm):01394         TextPrnLineW                    EQU     DTextPrnLineW
     03FF             (      romdefs.asm):01395         TextPrnSelFlag                  EQU     DTextPrnSelFlag
     A93A             (      romdefs.asm):01396         TextResetVDU                    EQU     DTextResetVDU
     BBE5             (      romdefs.asm):01397         TextScanKbd                     EQU     DTextScanKbd
     FF07             (      romdefs.asm):01398         TextSerBaudRate                 EQU     DTextSerBaudRate
     03FD             (      romdefs.asm):01399         TextSerEOLDelay                 EQU     DTextSerEOLDelay
     BBB5             (      romdefs.asm):01400         TextUpdateCurs                  EQU     DTextUpdateCurs
     006A             (      romdefs.asm):01401         TextVDUCommaW                   EQU     DTextVDUCommaW
     006C             (      romdefs.asm):01402         TextVDUCurrCol                  EQU     DTextVDUCurrCol
     0088             (      romdefs.asm):01403         TextVDUCursAddr                 EQU     DTextVDUCursAddr
     006B             (      romdefs.asm):01404         TextVDULastComma                EQU     DTextVDULastComma
     006D             (      romdefs.asm):01405         TextVDULineW                    EQU     DTextVDULineW
     BCAB             (      romdefs.asm):01406         TextVDUOut                      EQU     DTextVDUOut
     852B             (      romdefs.asm):01407         TextWaitKey                     EQU     DTextWaitKey
     A0EA             (      romdefs.asm):01408         TextWaitKeyCurs                 EQU     DTextWaitKeyCurs
     B505             (      romdefs.asm):01409         TextWaitKeyCurs2                EQU     DTextWaitKeyCurs2
     B7CC             (      romdefs.asm):01410         UtilCopyBXtoU                   EQU     DUtilCopyBXtoU
     8C35             (      romdefs.asm):01411         VarAssign16Bit                  EQU     DVarAssign16Bit
     8C37             (      romdefs.asm):01412         VarAssign16Bit2                 EQU     DVarAssign16Bit2
     9C3E             (      romdefs.asm):01413         VarAssign16BitB                 EQU     DVarAssign16BitB
     8C36             (      romdefs.asm):01414         VarAssign8Bit                   EQU     DVarAssign8Bit
     89AC             (      romdefs.asm):01415         VarCKChar                       EQU     DVarCKChar
     89A4             (      romdefs.asm):01416         VarCKClBrac                     EQU     DVarCKClBrac
     89AA             (      romdefs.asm):01417         VarCKComma                      EQU     DVarCKComma
     89A7             (      romdefs.asm):01418         VarCKOpBrac                     EQU     DVarCKOpBrac
     8D9F             (      romdefs.asm):01419         VarDelVar                       EQU     DVarDelVar
     8CD7             (      romdefs.asm):01420         VarGarbageCollect               EQU     DVarGarbageCollect
     8E83             (      romdefs.asm):01421         VarGet16Bit                     EQU     DVarGet16Bit
     8E51             (      romdefs.asm):01422         VarGet8Bit                      EQU     DVarGet8Bit
     8E7E             (      romdefs.asm):01423         VarGetComma8                    EQU     DVarGetComma8
     8877             (      romdefs.asm):01424         VarGetExpr                      EQU     DVarGetExpr
     8874             (      romdefs.asm):01425         VarGetExprCC                    EQU     DVarGetExprCC
     8887             (      romdefs.asm):01426         VarGetStr                       EQU     DVarGetStr
     8B29             (      romdefs.asm):01427         VarGetUsr                       EQU     DVarGetUsr
     8A94             (      romdefs.asm):01428         VarGetVar                       EQU     DVarGetVar
     9165             (      romdefs.asm):01429         VarNormFPA0                     EQU     DVarNormFPA0
     01A0             (      romdefs.asm):01430         VectAccessScreen                EQU     DVectAccessScreen
     019D             (      romdefs.asm):01431         VectAssignStr                   EQU     DVectAssignStr
     015E             (      romdefs.asm):01432         VectBase                        EQU     DVectBase
     0188             (      romdefs.asm):01433         VectCheckEOF                    EQU     DVectCheckEOF
     017F             (      romdefs.asm):01434         VectCheckKeys                   EQU     DVectCheckKeys
     0173             (      romdefs.asm):01435         VectCloseAllFiles               EQU     DVectCloseAllFiles
     0176             (      romdefs.asm):01436         VectCloseFile                   EQU     DVectCloseFile
     0185             (      romdefs.asm):01437         VectCloseFileCmd                EQU     DVectCloseFileCmd
     0179             (      romdefs.asm):01438         VectCmdInterp                   EQU     DVectCmdInterp
     01A6             (      romdefs.asm):01439         VectDeTokenize                  EQU     DVectDeTokenize
     0164             (      romdefs.asm):01440         VectDevInit                     EQU     DVectDevInit
     0161             (      romdefs.asm):01441         VectDevNo                       EQU     DVectDevNo
     015E             (      romdefs.asm):01442         VectDevOpen                     EQU     DVectDevOpen
     018B             (      romdefs.asm):01443         VectEvaluateExpr                EQU     DVectEvaluateExpr
     019A             (      romdefs.asm):01444         VectGetNextCmd                  EQU     DVectGetNextCmd
     016A             (      romdefs.asm):01445         VectInChar                      EQU     DVectInChar
     016D             (      romdefs.asm):01446         VectInputFile                   EQU     DVectInputFile
     0182             (      romdefs.asm):01447         VectLineInputFile               EQU     DVectLineInputFile
     0167             (      romdefs.asm):01448         VectOutChar                     EQU     DVectOutChar
     0170             (      romdefs.asm):01449         VectOutputFile                  EQU     DVectOutputFile
     017C             (      romdefs.asm):01450         VectReReqestIn                  EQU     DVectReReqestIn
     0197             (      romdefs.asm):01451         VectResetBasMem                 EQU     DVectResetBasMem
     0194             (      romdefs.asm):01452         VectRunLink                     EQU     DVectRunLink
     0191             (      romdefs.asm):01453         VectSysError                    EQU     DVectSysError
     01A3             (      romdefs.asm):01454         VectTokenize                    EQU     DVectTokenize
     018E             (      romdefs.asm):01455         VectUserError                   EQU     DVectUserError
     B44F             (      romdefs.asm):01456         WarmStart                       EQU     DWarmStart
     0071             (      romdefs.asm):01457         WarmStartFlag                   EQU     DWarmStartFlag
                      (      romdefs.asm):01458         
                      (      romdefs.asm):01459                                 ENDC
                      (      romdefs.asm):01460         
                      (      romdefs.asm):01461                                 ifdef Tandy
                      (      romdefs.asm):01462         
0000                  (      romdefs.asm):01463         StubResWordsOfs                 EQU     CStubResWordsOfs
0000                  (      romdefs.asm):01464         StubResLookupOfs                EQU     CStubResLookupOfs
0000                  (      romdefs.asm):01465         StubResJumpOfs                  EQU     CStubResJumpOfs
0000                  (      romdefs.asm):01466         StubFuncsOfs                    EQU     CStubFuncsOfs
0000                  (      romdefs.asm):01467         StubFuncsLookupOfs              EQU     CStubFuncsLookupOfs
0000                  (      romdefs.asm):01468         StubFuncsJumpOfs                EQU     CStubFuncsJumpOfs
0000                  (      romdefs.asm):01469         Skip1                           EQU     CSkip1
0000                  (      romdefs.asm):01470         Skip2                           EQU     CSkip2
0000                  (      romdefs.asm):01471         Skip1LD                         EQU     CSkip1LD
0000                  (      romdefs.asm):01472         Skip2TST                        EQU     CSkip2TST
0000                  (      romdefs.asm):01473         CoCoVec167                      EQU     CCoCoVec167
0000                  (      romdefs.asm):01474         CoCoVect16A                     EQU     CCoCoVect16A
0000                  (      romdefs.asm):01475         CoCoVect176                     EQU     CCoCoVect176
0000                  (      romdefs.asm):01476         CoCoVect179                     EQU     CCoCoVect179
0000                  (      romdefs.asm):01477         CoCoVect18B                     EQU     CCoCoVect18B
0000                  (      romdefs.asm):01478         CoCoVect191                     EQU     CCoCoVect191
0000                  (      romdefs.asm):01479         CoCoVect194                     EQU     CCoCoVect194
0000                  (      romdefs.asm):01480         CoCoVect197                     EQU     CCoCoVect197
0000                  (      romdefs.asm):01481         CoCoVect19A                     EQU     CCoCoVect19A
0000                  (      romdefs.asm):01482         CoCoVect1A3                     EQU     CCoCoVect1A3
0000                  (      romdefs.asm):01483         AddrFWareRamTop                 EQU     CAddrFWareRamTop
0000                  (      romdefs.asm):01484         AddrRamTop                      EQU     CAddrRamTop
0000                  (      romdefs.asm):01485         AddrStack                       EQU     CAddrStack
0000                  (      romdefs.asm):01486         BasAddrCmdDisp                  EQU     CBasAddrCmdDisp
0000                  (      romdefs.asm):01487         BasAddrCmdList                  EQU     CBasAddrCmdList
0000                  (      romdefs.asm):01488         BasAddrDskCmdDisp               EQU     CBasAddrDskCmdDisp
0000                  (      romdefs.asm):01489         BasAddrDskCmdList               EQU     CBasAddrDskCmdList
0000                  (      romdefs.asm):01490         BasAddrDskFuncDisp              EQU     CBasAddrDskFuncDisp
0000                  (      romdefs.asm):01491         BasAddrDskFuncList              EQU     CBasAddrDskFuncList
0000                  (      romdefs.asm):01492         BasAddrFuncDisp                 EQU     CBasAddrFuncDisp
0000                  (      romdefs.asm):01493         BasAddrFuncList                 EQU     CBasAddrFuncList
0000                  (      romdefs.asm):01494         BasAddrSigByte                  EQU     CBasAddrSigByte
0000                  (      romdefs.asm):01495         BasAOError                      EQU     CBasAOError
0000                  (      romdefs.asm):01496         BasArrayEval                    EQU     CBasArrayEval
0000                  (      romdefs.asm):01497         BasBootBasic                    EQU     CBasBootBasic
0000                  (      romdefs.asm):01498         BasBotStack                     EQU     CBasBotStack
0000                  (      romdefs.asm):01499         BasBRARun                       EQU     CBasBRARun
0000                  (      romdefs.asm):01500         BasBreakFlag                    EQU     CBasBreakFlag
0000                  (      romdefs.asm):01501         BasBuffer                       EQU     CBasBuffer
0000                  (      romdefs.asm):01502         BasChkArrSpaceMv                EQU     CBasChkArrSpaceMv
0000                  (      romdefs.asm):01503         BasChkB2Free                    EQU     CBasChkB2Free
0000                  (      romdefs.asm):01504         BasChkDirect                    EQU     CBasChkDirect
0000                  (      romdefs.asm):01505         BasChrGet                       EQU     CBasChrGet
0000                  (      romdefs.asm):01506         BasChrGetCurr                   EQU     CBasChrGetCurr
0000                  (      romdefs.asm):01507         BasCloadMOffs                   EQU     CBasCloadMOffs
0000                  (      romdefs.asm):01508         BasCmdMode                      EQU     CBasCmdMode
0000                  (      romdefs.asm):01509         BasContLine                     EQU     CBasContLine
0000                  (      romdefs.asm):01510         BasCurrentLine                  EQU     CBasCurrentLine
0000                  (      romdefs.asm):01511         BasDelim1                       EQU     CBasDelim1
0000                  (      romdefs.asm):01512         BasDelim2                       EQU     CBasDelim2
0000                  (      romdefs.asm):01513         BasDirectTextPtr                EQU     CBasDirectTextPtr
0000                  (      romdefs.asm):01514         BasDisArraySearch               EQU     CBasDisArraySearch
0000                  (      romdefs.asm):01515         BasDNError                      EQU     CBasDNError
0000                  (      romdefs.asm):01516         BasDoDispatch                   EQU     CBasDoDispatch
0000                  (      romdefs.asm):01517         BasEditorLineLen                EQU     CBasEditorLineLen
0000                  (      romdefs.asm):01518         BasErrorCodeTable               EQU     CBasErrorCodeTable
0000                  (      romdefs.asm):01519         BasExecAddr                     EQU     CBasExecAddr
0000                  (      romdefs.asm):01520         BasFCError                      EQU     CBasFCError
0000                  (      romdefs.asm):01521         BasFindLineNo                   EQU     CBasFindLineNo
0000                  (      romdefs.asm):01522         BasFMError                      EQU     CBasFMError
0000                  (      romdefs.asm):01523         BasGarbageFlag                  EQU     CBasGarbageFlag
0000                  (      romdefs.asm):01524         BasGenCount                     EQU     CBasGenCount
0000                  (      romdefs.asm):01525         BasGetDevNo                     EQU     CBasGetDevNo
0000                  (      romdefs.asm):01526         BasGetLineNo                    EQU     CBasGetLineNo
0000                  (      romdefs.asm):01527         BasGetStrFirst                  EQU     CBasGetStrFirst
0000                  (      romdefs.asm):01528         BasGetStrLenAddr                EQU     CBasGetStrLenAddr
0000                  (      romdefs.asm):01529         BasicCassBitIn                  EQU     CBasicCassBitIn
0000                  (      romdefs.asm):01530         BasicCassByIn                   EQU     CBasicCassByIn
0000                  (      romdefs.asm):01531         BasicCassByOut                  EQU     CBasicCassByOut
0000                  (      romdefs.asm):01532         BasicCassOff                    EQU     CBasicCassOff
0000                  (      romdefs.asm):01533         BasicCassOn                     EQU     CBasicCassOn
0000                  (      romdefs.asm):01534         BasicCassOnRd                   EQU     CBasicCassOnRd
0000                  (      romdefs.asm):01535         BasicCursorB                    EQU     CBasicCursorB
0000                  (      romdefs.asm):01536         BasicHWInit                     EQU     CBasicHWInit
0000                  (      romdefs.asm):01537         BasicJoyIn                      EQU     CBasicJoyIn
0000                  (      romdefs.asm):01538         BasicKbdIn                      EQU     CBasicKbdIn
0000                  (      romdefs.asm):01539         BasicPrintOut                   EQU     CBasicPrintOut
0000                  (      romdefs.asm):01540         BasicScreenOut                  EQU     CBasicScreenOut
0000                  (      romdefs.asm):01541         BasicSerIn                      EQU     CBasicSerIn
0000                  (      romdefs.asm):01542         BasicSerOut                     EQU     CBasicSerOut
0000                  (      romdefs.asm):01543         BasicSetBaud                    EQU     CBasicSetBaud
0000                  (      romdefs.asm):01544         BasicSWInit                     EQU     CBasicSWInit
0000                  (      romdefs.asm):01545         BasicWriteLead                  EQU     CBasicWriteLead
0000                  (      romdefs.asm):01546         BasIDError                      EQU     CBasIDError
0000                  (      romdefs.asm):01547         BasIfCount                      EQU     CBasIfCount
0000                  (      romdefs.asm):01548         BasInBuffFromX                  EQU     CBasInBuffFromX
0000                  (      romdefs.asm):01549         BasInputFlag                    EQU     CBasInputFlag
0000                  (      romdefs.asm):01550         BasIOError                      EQU     CBasIOError
0000                  (      romdefs.asm):01551         BasIRQVec                       EQU     CBasIRQVec
0000                  (      romdefs.asm):01552         BasJoyVal0                      EQU     CBasJoyVal0
0000                  (      romdefs.asm):01553         BasJoyVal1                      EQU     CBasJoyVal1
0000                  (      romdefs.asm):01554         BasJoyVal2                      EQU     CBasJoyVal2
0000                  (      romdefs.asm):01555         BasJoyVal3                      EQU     CBasJoyVal3
0000                  (      romdefs.asm):01556         BasLineInputEntry               EQU     CBasLineInputEntry
0000                  (      romdefs.asm):01557         BasLinInpBuff                   EQU     CBasLinInpBuff
0000                  (      romdefs.asm):01558         BasLinInpHead                   EQU     CBasLinInpHead
0000                  (      romdefs.asm):01559         BasList                         EQU     CBasList
0000                  (      romdefs.asm):01560         BasListLine                     EQU     CBasListLine
0000                  (      romdefs.asm):01561         BasLocateScreen                 EQU     CBasLocateScreen
0000                  (      romdefs.asm):01562         BasLSError                      EQU     CBasLSError
0000                  (      romdefs.asm):01563         BasNEError                      EQU     CBasNEError
0000                  (      romdefs.asm):01564         BasNew                          EQU     CBasNew
0000                  (      romdefs.asm):01565         BasNOError                      EQU     CBasNOError
0000                  (      romdefs.asm):01566         BasNumCmds                      EQU     CBasNumCmds
0000                  (      romdefs.asm):01567         BasNumDskCmds                   EQU     CBasNumDskCmds
0000                  (      romdefs.asm):01568         BasNumDskFuncs                  EQU     CBasNumDskFuncs
0000                  (      romdefs.asm):01569         BasNumFuncs                     EQU     CBasNumFuncs
0000                  (      romdefs.asm):01570         BasOldInputPtr                  EQU     CBasOldInputPtr
0000                  (      romdefs.asm):01571         BasOMError                      EQU     CBasOMError
0000                  (      romdefs.asm):01572         BasOVError                      EQU     CBasOVError
0000                  (      romdefs.asm):01573         BasPollKeyboard                 EQU     CBasPollKeyboard
0000                  (      romdefs.asm):01574         BasRandom8                      EQU     CBasRandom8
0000                  (      romdefs.asm):01575         BasRandomSeed                   EQU     CBasRandomSeed
0000                  (      romdefs.asm):01576         BasRelateFlag                   EQU     CBasRelateFlag
0000                  (      romdefs.asm):01577         BasRenumStart                   EQU     CBasRenumStart
0000                  (      romdefs.asm):01578         BasRenumStartLine               EQU     CBasRenumStartLine
0000                  (      romdefs.asm):01579         BasRenumVal                     EQU     CBasRenumVal
0000                  (      romdefs.asm):01580         BasResetStack                   EQU     CBasResetStack
0000                  (      romdefs.asm):01581         BasResStr                       EQU     CBasResStr
0000                  (      romdefs.asm):01582         BasResStr2                      EQU     CBasResStr2
0000                  (      romdefs.asm):01583         BasRndData                      EQU     CBasRndData
0000                  (      romdefs.asm):01584         BasRun                          EQU     CBasRun
0000                  (      romdefs.asm):01585         BasSetProgPtrX                  EQU     CBasSetProgPtrX
0000                  (      romdefs.asm):01586         BasSignonMess                   EQU     CBasSignonMess
0000                  (      romdefs.asm):01587         BasSkipLineNo                   EQU     CBasSkipLineNo
0000                  (      romdefs.asm):01588         BasSNError                      EQU     CBasSNError
0000                  (      romdefs.asm):01589         BasStartProg                    EQU     CBasStartProg
0000                  (      romdefs.asm):01590         BasSTError                      EQU     CBasSTError
0000                  (      romdefs.asm):01591         BasStrDescStack                 EQU     CBasStrDescStack
0000                  (      romdefs.asm):01592         BasStrFirstFreeTemp             EQU     CBasStrFirstFreeTemp
0000                  (      romdefs.asm):01593         BasStrLastUsedTemp              EQU     CBasStrLastUsedTemp
0000                  (      romdefs.asm):01594         BasStrUtil                      EQU     CBasStrUtil
0000                  (      romdefs.asm):01595         BasStub0                        EQU     CBasStub0
0000                  (      romdefs.asm):01596         BasStub1                        EQU     CBasStub1
0000                  (      romdefs.asm):01597         BasStub2                        EQU     CBasStub2
0000                  (      romdefs.asm):01598         BasStub3                        EQU     CBasStub3
0000                  (      romdefs.asm):01599         BasTempFPA2                     EQU     CBasTempFPA2
0000                  (      romdefs.asm):01600         BasTempLine                     EQU     CBasTempLine
0000                  (      romdefs.asm):01601         BasTempPtr                      EQU     CBasTempPtr
0000                  (      romdefs.asm):01602         BasTempPtr1                     EQU     CBasTempPtr1
0000                  (      romdefs.asm):01603         BasTempRelateFlag               EQU     CBasTempRelateFlag
0000                  (      romdefs.asm):01604         BasTempVarDesc                  EQU     CBasTempVarDesc
0000                  (      romdefs.asm):01605         BasTMError                      EQU     CBasTMError
0000                  (      romdefs.asm):01606         BasTronFlag                     EQU     CBasTronFlag
0000                  (      romdefs.asm):01607         BasULError                      EQU     CBasULError
0000                  (      romdefs.asm):01608         BasUnused1                      EQU     CBasUnused1
0000                  (      romdefs.asm):01609         BasUSRTableAddr                 EQU     CBasUSRTableAddr
0000                  (      romdefs.asm):01610         BasUsrVecNoDisk                 EQU     CBasUsrVecNoDisk
0000                  (      romdefs.asm):01611         BasVarArrayAddr                 EQU     CBasVarArrayAddr
0000                  (      romdefs.asm):01612         BasVarAssign16                  EQU     CBasVarAssign16
0000                  (      romdefs.asm):01613         BasVarDataAddr                  EQU     CBasVarDataAddr
0000                  (      romdefs.asm):01614         BasVarDataLine                  EQU     CBasVarDataLine
0000                  (      romdefs.asm):01615         BasVarEnd                       EQU     CBasVarEnd
0000                  (      romdefs.asm):01616         BasVarFPAcc1                    EQU     CBasVarFPAcc1
0000                  (      romdefs.asm):01617         BasVarFPAcc2                    EQU     CBasVarFPAcc2
0000                  (      romdefs.asm):01618         BasVarFPAcc3                    EQU     CBasVarFPAcc3
0000                  (      romdefs.asm):01619         BasVarFPAcc4                    EQU     CBasVarFPAcc4
0000                  (      romdefs.asm):01620         BasVarFPAcc5                    EQU     CBasVarFPAcc5
0000                  (      romdefs.asm):01621         BasVarLastInUse                 EQU     CBasVarLastInUse
0000                  (      romdefs.asm):01622         BasVarPtrLast                   EQU     CBasVarPtrLast
0000                  (      romdefs.asm):01623         BasVarSimpleAddr                EQU     CBasVarSimpleAddr
0000                  (      romdefs.asm):01624         BasVarStringBase                EQU     CBasVarStringBase
0000                  (      romdefs.asm):01625         BasVarStrTop                    EQU     CBasVarStrTop
0000                  (      romdefs.asm):01626         BasVarType                      EQU     CBasVarType
0000                  (      romdefs.asm):01627         BasVect1                        EQU     CBasVect1
0000                  (      romdefs.asm):01628         BasVect1a                       EQU     CBasVect1a
0000                  (      romdefs.asm):01629         BasVect2                        EQU     CBasVect2
0000                  (      romdefs.asm):01630         BasZDError                      EQU     CBasZDError
0000                  (      romdefs.asm):01631         CasASCIIFlag                    EQU     CCasASCIIFlag
0000                  (      romdefs.asm):01632         CasAudioOff                     EQU     CCasAudioOff
0000                  (      romdefs.asm):01633         CasAudioOn                      EQU     CCasAudioOn
0000                  (      romdefs.asm):01634         CasBitCount                     EQU     CCasBitCount
0000                  (      romdefs.asm):01635         CasBitIn                        EQU     CCasBitIn
0000                  (      romdefs.asm):01636         CasBlockIn                      EQU     CCasBlockIn
0000                  (      romdefs.asm):01637         CasBlockLen                     EQU     CCasBlockLen
0000                  (      romdefs.asm):01638         CasBlockOut                     EQU     CCasBlockOut
0000                  (      romdefs.asm):01639         CasBlockType                    EQU     CCasBlockType
0000                  (      romdefs.asm):01640         CasByteIn                       EQU     CCasByteIn
0000                  (      romdefs.asm):01641         CasByteOut                      EQU     CCasByteOut
0000                  (      romdefs.asm):01642         CasCkSum                        EQU     CCasCkSum
0000                  (      romdefs.asm):01643         CasClosFiles                    EQU     CCasClosFiles
0000                  (      romdefs.asm):01644         CasEntryAddr                    EQU     CCasEntryAddr
0000                  (      romdefs.asm):01645         CasEOFFlag                      EQU     CCasEOFFlag
0000                  (      romdefs.asm):01646         CasFindFile                     EQU     CCasFindFile
0000                  (      romdefs.asm):01647         CasFName                        EQU     CCasFName
0000                  (      romdefs.asm):01648         CasFNameFound                   EQU     CCasFNameFound
0000                  (      romdefs.asm):01649         CasFNameLen                     EQU     CCasFNameLen
0000                  (      romdefs.asm):01650         CasFType                        EQU     CCasFType
0000                  (      romdefs.asm):01651         CasGapFlag                      EQU     CCasGapFlag
0000                  (      romdefs.asm):01652         CasHeadBuffAddr                 EQU     CCasHeadBuffAddr
0000                  (      romdefs.asm):01653         CasIOBuff                       EQU     CCasIOBuff
0000                  (      romdefs.asm):01654         CasIOBuffAddr                   EQU     CCasIOBuffAddr
0000                  (      romdefs.asm):01655         CasIOBuffSize                   EQU     CCasIOBuffSize
0000                  (      romdefs.asm):01656         CasIOErrorCode                  EQU     CCasIOErrorCode
0000                  (      romdefs.asm):01657         CasIOFlag                       EQU     CCasIOFlag
0000                  (      romdefs.asm):01658         CasLastSine                     EQU     CCasLastSine
0000                  (      romdefs.asm):01659         CasLeadCount                    EQU     CCasLeadCount
0000                  (      romdefs.asm):01660         CasLoadAddr                     EQU     CCasLoadAddr
0000                  (      romdefs.asm):01661         CasMax12                        EQU     CCasMax12
0000                  (      romdefs.asm):01662         CasMax24                        EQU     CCasMax24
0000                  (      romdefs.asm):01663         CasMotorDelay                   EQU     CCasMotorDelay
0000                  (      romdefs.asm):01664         CasMotorOff                     EQU     CCasMotorOff
0000                  (      romdefs.asm):01665         CasMotorOn                      EQU     CCasMotorOn
0000                  (      romdefs.asm):01666         CasPartrt                       EQU     CCasPartrt
0000                  (      romdefs.asm):01667         CasPhaseFlag                    EQU     CCasPhaseFlag
0000                  (      romdefs.asm):01668         CasReadBin                      EQU     CCasReadBin
0000                  (      romdefs.asm):01669         CasReadBlock1                   EQU     CCasReadBlock1
0000                  (      romdefs.asm):01670         CasReadLeader                   EQU     CCasReadLeader
0000                  (      romdefs.asm):01671         CasStatus                       EQU     CCasStatus
0000                  (      romdefs.asm):01672         CasTemp                         EQU     CCasTemp
0000                  (      romdefs.asm):01673         CasWriteBasic                   EQU     CCasWriteBasic
0000                  (      romdefs.asm):01674         CasWriteBin                     EQU     CCasWriteBin
0000                  (      romdefs.asm):01675         CasWriteBlock1                  EQU     CCasWriteBlock1
0000                  (      romdefs.asm):01676         CasWriteLeader                  EQU     CCasWriteLeader
0000                  (      romdefs.asm):01677         CmdABS                          EQU     CCmdABS
0000                  (      romdefs.asm):01678         CmdAND                          EQU     CCmdAND
0000                  (      romdefs.asm):01679         CmdASC                          EQU     CCmdASC
0000                  (      romdefs.asm):01680         CmdATN                          EQU     CCmdATN
0000                  (      romdefs.asm):01681         CmdAudio                        EQU     CCmdAudio
0000                  (      romdefs.asm):01682         CmdCHRS                         EQU     CCmdCHRS
0000                  (      romdefs.asm):01683         CmdCircle                       EQU     CCmdCircle
0000                  (      romdefs.asm):01684         CmdClear                        EQU     CCmdClear
0000                  (      romdefs.asm):01685         CmdCload                        EQU     CCmdCload
0000                  (      romdefs.asm):01686         CmdClose                        EQU     CCmdClose
0000                  (      romdefs.asm):01687         CmdCLS                          EQU     CCmdCLS
0000                  (      romdefs.asm):01688         CmdColor                        EQU     CCmdColor
0000                  (      romdefs.asm):01689         CmdCont                         EQU     CCmdCont
0000                  (      romdefs.asm):01690         CmdCOS                          EQU     CCmdCOS
0000                  (      romdefs.asm):01691         CmdCsave                        EQU     CCmdCsave
0000                  (      romdefs.asm):01692         CmdData                         EQU     CCmdData
0000                  (      romdefs.asm):01693         CmdDef                          EQU     CCmdDef
0000                  (      romdefs.asm):01694         CmdDelete                       EQU     CCmdDelete
0000                  (      romdefs.asm):01695         CmdDim                          EQU     CCmdDim
0000                  (      romdefs.asm):01696         CmdDivide                       EQU     CCmdDivide
0000                  (      romdefs.asm):01697         CmdDload                        EQU     CCmdDload
0000                  (      romdefs.asm):01698         CmdDraw                         EQU     CCmdDraw
0000                  (      romdefs.asm):01699         CmdEdit                         EQU     CCmdEdit
0000                  (      romdefs.asm):01700         CmdEnd                          EQU     CCmdEnd
0000                  (      romdefs.asm):01701         CmdEOF                          EQU     CCmdEOF
0000                  (      romdefs.asm):01702         CmdExec                         EQU     CCmdExec
0000                  (      romdefs.asm):01703         CmdEXP                          EQU     CCmdEXP
0000                  (      romdefs.asm):01704         CmdExponet                      EQU     CCmdExponet
0000                  (      romdefs.asm):01705         CmdFIX                          EQU     CCmdFIX
0000                  (      romdefs.asm):01706         CmdFor                          EQU     CCmdFor
0000                  (      romdefs.asm):01707         CmdGet                          EQU     CCmdGet
0000                  (      romdefs.asm):01708         CmdGo                           EQU     CCmdGo
0000                  (      romdefs.asm):01709         CmdHexS                         EQU     CCmdHexS
0000                  (      romdefs.asm):01710         CmdIF                           EQU     CCmdIF
0000                  (      romdefs.asm):01711         CmdInkeyS                       EQU     CCmdInkeyS
0000                  (      romdefs.asm):01712         CmdInput                        EQU     CCmdInput
0000                  (      romdefs.asm):01713         CmdInstr                        EQU     CCmdInstr
0000                  (      romdefs.asm):01714         CmdINT                          EQU     CCmdINT
0000                  (      romdefs.asm):01715         CmdJoystk                       EQU     CCmdJoystk
0000                  (      romdefs.asm):01716         CmdLeftS                        EQU     CCmdLeftS
0000                  (      romdefs.asm):01717         CmdLEN                          EQU     CCmdLEN
0000                  (      romdefs.asm):01718         CmdLet                          EQU     CCmdLet
0000                  (      romdefs.asm):01719         CmdLine                         EQU     CCmdLine
0000                  (      romdefs.asm):01720         CmdLineInput                    EQU     CCmdLineInput
0000                  (      romdefs.asm):01721         CmdList                         EQU     CCmdList
0000                  (      romdefs.asm):01722         CmdLList                        EQU     CCmdLList
0000                  (      romdefs.asm):01723         CmdLOG                          EQU     CCmdLOG
0000                  (      romdefs.asm):01724         CmdMEM                          EQU     CCmdMEM
0000                  (      romdefs.asm):01725         CmdMidS                         EQU     CCmdMidS
0000                  (      romdefs.asm):01726         CmdMinus                        EQU     CCmdMinus
0000                  (      romdefs.asm):01727         CmdMotor                        EQU     CCmdMotor
0000                  (      romdefs.asm):01728         CmdMultiply                     EQU     CCmdMultiply
0000                  (      romdefs.asm):01729         CmdNew                          EQU     CCmdNew
0000                  (      romdefs.asm):01730         CmdNext                         EQU     CCmdNext
0000                  (      romdefs.asm):01731         CmdON                           EQU     CCmdON
0000                  (      romdefs.asm):01732         CmdOpen                         EQU     CCmdOpen
0000                  (      romdefs.asm):01733         CmdOpenEntry                    EQU     CCmdOpenEntry
0000                  (      romdefs.asm):01734         CmdOR                           EQU     CCmdOR
0000                  (      romdefs.asm):01735         CmdPaint                        EQU     CCmdPaint
0000                  (      romdefs.asm):01736         CmdPClear                       EQU     CCmdPClear
0000                  (      romdefs.asm):01737         CmdPCls                         EQU     CCmdPCls
0000                  (      romdefs.asm):01738         CmdPcopy                        EQU     CCmdPcopy
0000                  (      romdefs.asm):01739         CmdPeek                         EQU     CCmdPeek
0000                  (      romdefs.asm):01740         CmdPlay                         EQU     CCmdPlay
0000                  (      romdefs.asm):01741         CmdPlus                         EQU     CCmdPlus
0000                  (      romdefs.asm):01742         CmdPmode                        EQU     CCmdPmode
0000                  (      romdefs.asm):01743         CmdPoint                        EQU     CCmdPoint
0000                  (      romdefs.asm):01744         CmdPoke                         EQU     CCmdPoke
0000                  (      romdefs.asm):01745         CmdPOS                          EQU     CCmdPOS
0000                  (      romdefs.asm):01746         CmdPPoint                       EQU     CCmdPPoint
0000                  (      romdefs.asm):01747         CmdPReset                       EQU     CCmdPReset
0000                  (      romdefs.asm):01748         CmdPrint                        EQU     CCmdPrint
0000                  (      romdefs.asm):01749         CmdPset                         EQU     CCmdPset
0000                  (      romdefs.asm):01750         CmdPut                          EQU     CCmdPut
0000                  (      romdefs.asm):01751         CmdRead                         EQU     CCmdRead
0000                  (      romdefs.asm):01752         CmdReadFromX                    EQU     CCmdReadFromX
0000                  (      romdefs.asm):01753         CmdREM                          EQU     CCmdREM
0000                  (      romdefs.asm):01754         CmdRenum                        EQU     CCmdRenum
0000                  (      romdefs.asm):01755         CmdReset                        EQU     CCmdReset
0000                  (      romdefs.asm):01756         CmdRestore                      EQU     CCmdRestore
0000                  (      romdefs.asm):01757         CmdReturn                       EQU     CCmdReturn
0000                  (      romdefs.asm):01758         CmdRightS                       EQU     CCmdRightS
0000                  (      romdefs.asm):01759         CmdRND                          EQU     CCmdRND
0000                  (      romdefs.asm):01760         CmdRun                          EQU     CCmdRun
0000                  (      romdefs.asm):01761         CmdScreen                       EQU     CCmdScreen
0000                  (      romdefs.asm):01762         CmdSet                          EQU     CCmdSet
0000                  (      romdefs.asm):01763         CmdSGN                          EQU     CCmdSGN
0000                  (      romdefs.asm):01764         CmdSIN                          EQU     CCmdSIN
0000                  (      romdefs.asm):01765         CmdSkipf                        EQU     CCmdSkipf
0000                  (      romdefs.asm):01766         CmdSound                        EQU     CCmdSound
0000                  (      romdefs.asm):01767         CmdSQR                          EQU     CCmdSQR
0000                  (      romdefs.asm):01768         CmdStop                         EQU     CCmdStop
0000                  (      romdefs.asm):01769         CmdStringS                      EQU     CCmdStringS
0000                  (      romdefs.asm):01770         CmdSTRS                         EQU     CCmdSTRS
0000                  (      romdefs.asm):01771         CmdTAN                          EQU     CCmdTAN
0000                  (      romdefs.asm):01772         CmdTimer                        EQU     CCmdTimer
0000                  (      romdefs.asm):01773         CmdTroff                        EQU     CCmdTroff
0000                  (      romdefs.asm):01774         CmdTron                         EQU     CCmdTron
0000                  (      romdefs.asm):01775         CmdUSR                          EQU     CCmdUSR
0000                  (      romdefs.asm):01776         CmdVAL                          EQU     CCmdVAL
0000                  (      romdefs.asm):01777         CmdVarptr                       EQU     CCmdVarptr
0000                  (      romdefs.asm):01778         GrBackground                    EQU     CGrBackground
0000                  (      romdefs.asm):01779         GrBytesPerLine                  EQU     CGrBytesPerLine
0000                  (      romdefs.asm):01780         GrCalcPixelPos                  EQU     CGrCalcPixelPos
0000                  (      romdefs.asm):01781         GrCircleRadius                  EQU     CGrCircleRadius
0000                  (      romdefs.asm):01782         GrCircleXCo                     EQU     CGrCircleXCo
0000                  (      romdefs.asm):01783         GrCircleYCo                     EQU     CGrCircleYCo
0000                  (      romdefs.asm):01784         GrClearGrScreen                 EQU     CGrClearGrScreen
0000                  (      romdefs.asm):01785         GrColourSet                     EQU     CGrColourSet
0000                  (      romdefs.asm):01786         GrColourTemp                    EQU     CGrColourTemp
0000                  (      romdefs.asm):01787         GrCurrColour                    EQU     CGrCurrColour
0000                  (      romdefs.asm):01788         GrCurrPmode                     EQU     CGrCurrPmode
0000                  (      romdefs.asm):01789         GrCurrX                         EQU     CGrCurrX
0000                  (      romdefs.asm):01790         GrCurrXCo                       EQU     CGrCurrXCo
0000                  (      romdefs.asm):01791         GrCurrY                         EQU     CGrCurrY
0000                  (      romdefs.asm):01792         GrCurrYCo                       EQU     CGrCurrYCo
0000                  (      romdefs.asm):01793         GrDirtyFlag                     EQU     CGrDirtyFlag
0000                  (      romdefs.asm):01794         GrDisplayStartAddr              EQU     CGrDisplayStartAddr
0000                  (      romdefs.asm):01795         GrDraw                          EQU     CGrDraw
0000                  (      romdefs.asm):01796         GrDrawAngle                     EQU     CGrDrawAngle
0000                  (      romdefs.asm):01797         GrDrawScale                     EQU     CGrDrawScale
0000                  (      romdefs.asm):01798         GrForeground                    EQU     CGrForeground
0000                  (      romdefs.asm):01799         GrLastDisplayAddr               EQU     CGrLastDisplayAddr
0000                  (      romdefs.asm):01800         GrPixelNoX                      EQU     CGrPixelNoX
0000                  (      romdefs.asm):01801         GrPixelNoY                      EQU     CGrPixelNoY
0000                  (      romdefs.asm):01802         GrPlotFlag                      EQU     CGrPlotFlag
0000                  (      romdefs.asm):01803         GrReserveGrRam                  EQU     CGrReserveGrRam
0000                  (      romdefs.asm):01804         GrResetLRGPixel                 EQU     CGrResetLRGPixel
0000                  (      romdefs.asm):01805         GrSelectColourSet               EQU     CGrSelectColourSet
0000                  (      romdefs.asm):01806         GrSelectDisplay                 EQU     CGrSelectDisplay
0000                  (      romdefs.asm):01807         GrSelectPage                    EQU     CGrSelectPage
0000                  (      romdefs.asm):01808         GrSelectVDGColSet               EQU     CGrSelectVDGColSet
0000                  (      romdefs.asm):01809         GrSetColours                    EQU     CGrSetColours
0000                  (      romdefs.asm):01810         GrSetLRGPixel                   EQU     CGrSetLRGPixel
0000                  (      romdefs.asm):01811         GrSetResetData                  EQU     CGrSetResetData
0000                  (      romdefs.asm):01812         GrSetVDGMode                    EQU     CGrSetVDGMode
0000                  (      romdefs.asm):01813         GrSetVDGOffset                  EQU     CGrSetVDGOffset
0000                  (      romdefs.asm):01814         GrStartPages                    EQU     CGrStartPages
0000                  (      romdefs.asm):01815         IndCasBlockIn                   EQU     CIndCasBlockIn
0000                  (      romdefs.asm):01816         IndCasBlockOut                  EQU     CIndCasBlockOut
0000                  (      romdefs.asm):01817         IndCasOnRead                    EQU     CIndCasOnRead
0000                  (      romdefs.asm):01818         IndCasWriteLead                 EQU     CIndCasWriteLead
0000                  (      romdefs.asm):01819         IndCharOutput                   EQU     CIndCharOutput
0000                  (      romdefs.asm):01820         IndJoystickIn                   EQU     CIndJoystickIn
0000                  (      romdefs.asm):01821         IndKeyInput                     EQU     CIndKeyInput
0000                  (      romdefs.asm):01822         IndVecReset                     EQU     CIndVecReset
0000                  (      romdefs.asm):01823         Misc16BitScratch                EQU     CMisc16BitScratch
0000                  (      romdefs.asm):01824         PixMaskTable2Col                EQU     CPixMaskTable2Col
0000                  (      romdefs.asm):01825         PixMaskTable4Col                EQU     CPixMaskTable4Col
0000                  (      romdefs.asm):01826         PrinterCRLF                     EQU     CPrinterCRLF
0000                  (      romdefs.asm):01827         PrinterDirOut                   EQU     CPrinterDirOut
0000                  (      romdefs.asm):01828         PrinterOut                      EQU     CPrinterOut
0000                  (      romdefs.asm):01829         SecVecFIRQ                      EQU     CSecVecFIRQ
0000                  (      romdefs.asm):01830         SecVecIRQ                       EQU     CSecVecIRQ
0000                  (      romdefs.asm):01831         SecVecNMI                       EQU     CSecVecNMI
0000                  (      romdefs.asm):01832         SecVecSWI                       EQU     CSecVecSWI
0000                  (      romdefs.asm):01833         SecVecSWI2                      EQU     CSecVecSWI2
0000                  (      romdefs.asm):01834         SecVecSWI3                      EQU     CSecVecSWI3
0000                  (      romdefs.asm):01835         SerDLBaud                       EQU     CSerDLBaud
0000                  (      romdefs.asm):01836         SerDLTimeout                    EQU     CSerDLTimeout
0000                  (      romdefs.asm):01837         SndBeep                         EQU     CSndBeep
0000                  (      romdefs.asm):01838         SndDisable                      EQU     CSndDisable
0000                  (      romdefs.asm):01839         SndDotNoteScale                 EQU     CSndDotNoteScale
0000                  (      romdefs.asm):01840         SndDTOAOn                       EQU     CSndDTOAOn
0000                  (      romdefs.asm):01841         SndEnable                       EQU     CSndEnable
0000                  (      romdefs.asm):01842         SndLength                       EQU     CSndLength
0000                  (      romdefs.asm):01843         SndNoteLen                      EQU     CSndNoteLen
0000                  (      romdefs.asm):01844         SndOctave                       EQU     CSndOctave
0000                  (      romdefs.asm):01845         SndPitch                        EQU     CSndPitch
0000                  (      romdefs.asm):01846         SndPlayNote                     EQU     CSndPlayNote
0000                  (      romdefs.asm):01847         SndTempo                        EQU     CSndTempo
0000                  (      romdefs.asm):01848         SndTimerPlay                    EQU     CSndTimerPlay
0000                  (      romdefs.asm):01849         SndVolume                       EQU     CSndVolume
0000                  (      romdefs.asm):01850         SysBoot64                       EQU     CSysBoot64
0000                  (      romdefs.asm):01851         SysErr                          EQU     CSysErr
0000                  (      romdefs.asm):01852         SysErr2                         EQU     CSysErr2
0000                  (      romdefs.asm):01853         SysReadJoystick                 EQU     CSysReadJoystick
0000                  (      romdefs.asm):01854         SysReset                        EQU     CSysReset
0000                  (      romdefs.asm):01855         SysResetDA                      EQU     CSysResetDA
0000                  (      romdefs.asm):01856         SysSelJoystick                  EQU     CSysSelJoystick
0000                  (      romdefs.asm):01857         SysTimeVal                      EQU     CSysTimeVal
0000                  (      romdefs.asm):01858         SysWriteDA                      EQU     CSysWriteDA
0000                  (      romdefs.asm):01859         TextCapsLock                    EQU     CTextCapsLock
0000                  (      romdefs.asm):01860         TextClearLine                   EQU     CTextClearLine
0000                  (      romdefs.asm):01861         TextCls                         EQU     CTextCls
0000                  (      romdefs.asm):01862         TextClsChar                     EQU     CTextClsChar
0000                  (      romdefs.asm):01863         TextCursFalshCnt                EQU     CTextCursFalshCnt
0000                  (      romdefs.asm):01864         TextDevN                        EQU     CTextDevN
0000                  (      romdefs.asm):01865         TextKbdBuffAddr                 EQU     CTextKbdBuffAddr
0000                  (      romdefs.asm):01866         TextKbdDelay                    EQU     CTextKbdDelay
0000                  (      romdefs.asm):01867         TextKbdRollover                 EQU     CTextKbdRollover
0000                  (      romdefs.asm):01868         TextLastKey                     EQU     CTextLastKey
0000                  (      romdefs.asm):01869         TextOutChar                     EQU     CTextOutChar
0000                  (      romdefs.asm):01870         TextOutCRLF                     EQU     CTextOutCRLF
0000                  (      romdefs.asm):01871         TextOutNum16                    EQU     CTextOutNum16
0000                  (      romdefs.asm):01872         TextOutNumFPA0                  EQU     CTextOutNumFPA0
0000                  (      romdefs.asm):01873         TextOutQuestion                 EQU     CTextOutQuestion
0000                  (      romdefs.asm):01874         TextOutSpace                    EQU     CTextOutSpace
0000                  (      romdefs.asm):01875         TextOutString                   EQU     CTextOutString
0000                  (      romdefs.asm):01876         TextPrnAutoCRLF                 EQU     CTextPrnAutoCRLF
0000                  (      romdefs.asm):01877         TextPrnCommaW                   EQU     CTextPrnCommaW
0000                  (      romdefs.asm):01878         TextPrnCurrCol                  EQU     CTextPrnCurrCol
0000                  (      romdefs.asm):01879         TextPrnEOLCnt                   EQU     CTextPrnEOLCnt
0000                  (      romdefs.asm):01880         TextPrnEOLSeq                   EQU     CTextPrnEOLSeq
0000                  (      romdefs.asm):01881         TextPrnLastComma                EQU     CTextPrnLastComma
0000                  (      romdefs.asm):01882         TextPrnLineW                    EQU     CTextPrnLineW
0000                  (      romdefs.asm):01883         TextPrnSelFlag                  EQU     CTextPrnSelFlag
0000                  (      romdefs.asm):01884         TextResetVDU                    EQU     CTextResetVDU
0000                  (      romdefs.asm):01885         TextScanKbd                     EQU     CTextScanKbd
0000                  (      romdefs.asm):01886         TextSerBaudRate                 EQU     CTextSerBaudRate
0000                  (      romdefs.asm):01887         TextSerEOLDelay                 EQU     CTextSerEOLDelay
0000                  (      romdefs.asm):01888         TextUpdateCurs                  EQU     CTextUpdateCurs
0000                  (      romdefs.asm):01889         TextVDUCommaW                   EQU     CTextVDUCommaW
0000                  (      romdefs.asm):01890         TextVDUCurrCol                  EQU     CTextVDUCurrCol
0000                  (      romdefs.asm):01891         TextVDUCursAddr                 EQU     CTextVDUCursAddr
0000                  (      romdefs.asm):01892         TextVDULastComma                EQU     CTextVDULastComma
0000                  (      romdefs.asm):01893         TextVDULineW                    EQU     CTextVDULineW
0000                  (      romdefs.asm):01894         TextVDUOut                      EQU     CTextVDUOut
0000                  (      romdefs.asm):01895         TextWaitKey                     EQU     CTextWaitKey
0000                  (      romdefs.asm):01896         TextWaitKeyCurs                 EQU     CTextWaitKeyCurs
0000                  (      romdefs.asm):01897         TextWaitKeyCurs2                EQU     CTextWaitKeyCurs2
0000                  (      romdefs.asm):01898         UtilCopyBXtoU                   EQU     CUtilCopyBXtoU
0000                  (      romdefs.asm):01899         VarAssign16Bit                  EQU     CVarAssign16Bit
0000                  (      romdefs.asm):01900         VarAssign16Bit2                 EQU     CVarAssign16Bit2
0000                  (      romdefs.asm):01901         VarAssign16BitB                 EQU     CVarAssign16BitB
0000                  (      romdefs.asm):01902         VarAssign8Bit                   EQU     CVarAssign8Bit
0000                  (      romdefs.asm):01903         VarCKChar                       EQU     CVarCKChar
0000                  (      romdefs.asm):01904         VarCKClBrac                     EQU     CVarCKClBrac
0000                  (      romdefs.asm):01905         VarCKComma                      EQU     CVarCKComma
0000                  (      romdefs.asm):01906         VarCKOpBrac                     EQU     CVarCKOpBrac
0000                  (      romdefs.asm):01907         VarDelVar                       EQU     CVarDelVar
0000                  (      romdefs.asm):01908         VarGarbageCollect               EQU     CVarGarbageCollect
0000                  (      romdefs.asm):01909         VarGet16Bit                     EQU     CVarGet16Bit
0000                  (      romdefs.asm):01910         VarGet8Bit                      EQU     CVarGet8Bit
0000                  (      romdefs.asm):01911         VarGetComma8                    EQU     CVarGetComma8
0000                  (      romdefs.asm):01912         VarGetExpr                      EQU     CVarGetExpr
0000                  (      romdefs.asm):01913         VarGetExprCC                    EQU     CVarGetExprCC
0000                  (      romdefs.asm):01914         VarGetStr                       EQU     CVarGetStr
0000                  (      romdefs.asm):01915         VarGetUsr                       EQU     CVarGetUsr
0000                  (      romdefs.asm):01916         VarGetVar                       EQU     CVarGetVar
0000                  (      romdefs.asm):01917         VarNormFPA0                     EQU     CVarNormFPA0
0000                  (      romdefs.asm):01918         VectAccessScreen                EQU     CVectAccessScreen
0000                  (      romdefs.asm):01919         VectAssignStr                   EQU     CVectAssignStr
0000                  (      romdefs.asm):01920         VectBase                        EQU     CVectBase
0000                  (      romdefs.asm):01921         VectCheckEOF                    EQU     CVectCheckEOF
0000                  (      romdefs.asm):01922         VectCheckKeys                   EQU     CVectCheckKeys
0000                  (      romdefs.asm):01923         VectCloseAllFiles               EQU     CVectCloseAllFiles
0000                  (      romdefs.asm):01924         VectCloseFile                   EQU     CVectCloseFile
0000                  (      romdefs.asm):01925         VectCloseFileCmd                EQU     CVectCloseFileCmd
0000                  (      romdefs.asm):01926         VectCmdInterp                   EQU     CVectCmdInterp
0000                  (      romdefs.asm):01927         VectDeTokenize                  EQU     CVectDeTokenize
0000                  (      romdefs.asm):01928         VectDevInit                     EQU     CVectDevInit
0000                  (      romdefs.asm):01929         VectDevNo                       EQU     CVectDevNo
0000                  (      romdefs.asm):01930         VectDevOpen                     EQU     CVectDevOpen
0000                  (      romdefs.asm):01931         VectEvaluateExpr                EQU     CVectEvaluateExpr
0000                  (      romdefs.asm):01932         VectGetNextCmd                  EQU     CVectGetNextCmd
0000                  (      romdefs.asm):01933         VectInChar                      EQU     CVectInChar
0000                  (      romdefs.asm):01934         VectInputFile                   EQU     CVectInputFile
0000                  (      romdefs.asm):01935         VectLineInputFile               EQU     CVectLineInputFile
0000                  (      romdefs.asm):01936         VectOutChar                     EQU     CVectOutChar
0000                  (      romdefs.asm):01937         VectOutputFile                  EQU     CVectOutputFile
0000                  (      romdefs.asm):01938         VectReReqestIn                  EQU     CVectReReqestIn
0000                  (      romdefs.asm):01939         VectResetBasMem                 EQU     CVectResetBasMem
0000                  (      romdefs.asm):01940         VectRunLink                     EQU     CVectRunLink
0000                  (      romdefs.asm):01941         VectSysError                    EQU     CVectSysError
0000                  (      romdefs.asm):01942         VectTokenize                    EQU     CVectTokenize
0000                  (      romdefs.asm):01943         VectUserError                   EQU     CVectUserError
0000                  (      romdefs.asm):01944         WarmStart                       EQU     CWarmStart
0000                  (      romdefs.asm):01945         WarmStartFlag                   EQU     CWarmStartFlag
                      (      romdefs.asm):01946         
                      (      romdefs.asm):01947                                 ENDC
                      (      romdefs.asm):01948                                 
     008A             (      romdefs.asm):01949         DBZero          EQU     Misc16BitScratch ; this is always set to Zero.
                      (      romdefs.asm):01950                                 
     003A             (      romdefs.asm):01951         StackBuf        equ     $3A             ; stack buffer size
     003D             (      romdefs.asm):01952         RelPTR          equ     $03D            ; Tempory arithmetic/logical table ptr
     00FA             (      romdefs.asm):01953         LineBufMax      equ     250             ; maximum line buffer length
                      (      romdefs.asm):01954         
                      (      romdefs.asm):01955         ; For compatibility with CoCo ROM listings
                      (      romdefs.asm):01956         ; first floating point accumulator
     004F             (      romdefs.asm):01957         FP0EXP          equ     BasVarFPAcc1    ; exponent
     0050             (      romdefs.asm):01958         FPA0            equ     BasVarFPAcc1+1  ; mantissa
     0054             (      romdefs.asm):01959         FP0SGN          equ     BasVarFPAcc1+5  ; sign
     0055             (      romdefs.asm):01960         COEFCT          equ     BasVarFPAcc1+6  ; polynomial coeficient counter
     0056             (      romdefs.asm):01961         StrDesc         equ     BasVarFPAcc1+7  ; tempory string descriptor (5 bytes)
                      (      romdefs.asm):01962         
                      (      romdefs.asm):01963         ; second floating point accumulator
     005C             (      romdefs.asm):01964         FP1EXP          equ     BasVarFPAcc2    ; exponent $5C
     005D             (      romdefs.asm):01965         FPA1            equ     BasVarFPAcc2+1  ; mantissa $5D
     0061             (      romdefs.asm):01966         FP1SGN          equ     BasVarFPAcc2+5  ; sign $61
     0062             (      romdefs.asm):01967         ResSGN          equ     BasVarFPAcc2+6  ; sign of result of FP operation $62
     0063             (      romdefs.asm):01968         FPSByte         equ     BasVarFPAcc2+7  ; floating point sub byte $63
     0064             (      romdefs.asm):01969         CoefPTR         equ     BasVarFPAcc2+8  ; Coeficient pointer
                      (      romdefs.asm):01970         
     005B             (      romdefs.asm):01971         FPCARY          equ     $005B   
                      (      romdefs.asm):01972         
     0013             (      romdefs.asm):01973         FPA2            equ     BasTempFPA2     ; FPA2
                      (      romdefs.asm):01974         
     00AB             (      romdefs.asm):01975         VarAB           equ     $00AB           ; temp vars / RND
     00AC             (      romdefs.asm):01976         VarAC           equ     $00AC           ; temp vars / RND
     00AD             (      romdefs.asm):01977         VarAD           equ     $00AD           ; temp vars / RND
     00AE             (      romdefs.asm):01978         VarAE           equ     $00AE           ; temp vars / RND
                      (      romdefs.asm):01979         
                      (      romdefs.asm):01980         ;
                      (      romdefs.asm):01981         ; Device numbers
                      (      romdefs.asm):01982         ;
                      (      romdefs.asm):01983         
     0000             (      romdefs.asm):01984         DevConsole      equ     0               ; console
     FFFF             (      romdefs.asm):01985         DevCasette      equ     -1              ; cassette
     FFFE             (      romdefs.asm):01986         DevPrinter      equ     -2              ; printer
                      (      romdefs.asm):01987                 
                      (      romdefs.asm):01988         ;
                      (      romdefs.asm):01989         ; Cassette file types
                      (      romdefs.asm):01990         ;
     0055             (      romdefs.asm):01991         SyncByte        equ     $55             ; Sync byte in cassete files
     003C             (      romdefs.asm):01992         BlockBegin      equ     $3C             ; Begining of block marker
                      (      romdefs.asm):01993         
                      (      romdefs.asm):01994         ;Block Types
     0000             (      romdefs.asm):01995         BtFileName      equ     $00             ; File name block
     0001             (      romdefs.asm):01996         BtData          equ     $01             ; Data block
     00FF             (      romdefs.asm):01997         BtEOF           equ     $FF             ; End of file block
                      (      romdefs.asm):01998         
     000F             (      romdefs.asm):01999         FNameBlockLen   equ     15              ; 15 bytes in header block
     0008             (      romdefs.asm):02000         CasFilenameLen  equ     8               ; Cassette filename length
     00FA             (      romdefs.asm):02001         DefBlockSize    equ     250             ; Default block size
                      (      romdefs.asm):02002         
                      (      romdefs.asm):02003         ;File Types, as stored in filename block
     0000             (      romdefs.asm):02004         FtBasic         equ     $00             ; Basic program
     0001             (      romdefs.asm):02005         FtDataFile      equ     $01             ; Data file
     0002             (      romdefs.asm):02006         FtMachineCode   equ     $02             ; Machine code program
     0003             (      romdefs.asm):02007         FtBinary        equ     $03             ; Binary file
     0088             (      romdefs.asm):02008         FtDream         equ     $88             ; Dream Assembler source file
     00FF             (      romdefs.asm):02009         FtHeaderless    equ     $FF             ; Headerless
                      (      romdefs.asm):02010         
                      (      romdefs.asm):02011         ;Ascii/Binary flag from filename block
     00FF             (      romdefs.asm):02012         AsAscii         equ     $FF             ; ASCII file
     0000             (      romdefs.asm):02013         AsBinary        equ     $00             ; Binary file (tokenised basic)
                      (      romdefs.asm):02014         
                      (      romdefs.asm):02015         ; Gap Flag from filename block
     0000             (      romdefs.asm):02016         GfUngapped      equ     $00             ; No gaps
     00FF             (      romdefs.asm):02017         GfGapped        equ     $FF             ; Gaps between blocks
                      (      romdefs.asm):02018         
                      (      romdefs.asm):02019         ; Cassette file IO types
     0001             (      romdefs.asm):02020         CasInputFile    equ     1               ; input file
     0002             (      romdefs.asm):02021         CasOutputFile   equ     2               ; output file
                      (      romdefs.asm):02022         
                      (      romdefs.asm):02023         ;
                      (      romdefs.asm):02024         ; Screen metrics.
                      (      romdefs.asm):02025         ;
     00FF             (      romdefs.asm):02026         GrMaxX          equ     255             ; Maximum X co-ordinate
     00BF             (      romdefs.asm):02027         GrMaxY          equ     191             ; Maximum Y co-ordinate
     0008             (      romdefs.asm):02028         GrMaxColour     equ     8               ; maximum colour number
     0004             (      romdefs.asm):02029         GrMaxPmode      equ     4               ; maximum pmode 
     0001             (      romdefs.asm):02030         GrMaxColourSet  equ     1               ; maximum colour set    
     0008             (      romdefs.asm):02031         GrMaxPages      equ     8               ; maximum PCLEAR pages
     0600             (      romdefs.asm):02032         GrPageSize      equ     $600            ; Graphic (pclear) page size in bytes
                      (      romdefs.asm):02033         
     0006             (      romdefs.asm):02034         GrStartPage     equ     $06             ; default start page for graphics memory $0600
     001E             (      romdefs.asm):02035         BasStartPage    equ     $1E             ; default start page for basic program $1E00
                      (      romdefs.asm):02036         
     0400             (      romdefs.asm):02037         TextScreenBase  equ     $0400           ; base of text screen
     0600             (      romdefs.asm):02038         GrScreenBase    equ     $0600           ; base of graphics pages
     0200             (      romdefs.asm):02039         TextScreenLen   equ     $0200           ; Length of text screen
     05FF             (      romdefs.asm):02040         TextScreenLast  equ     (TextScreenBase+TextScreenLen)-1        ; last character of text screen
                      (      romdefs.asm):02041         
                      (      romdefs.asm):02042         ;
                      (      romdefs.asm):02043         ; Lo-res colour masks
                      (      romdefs.asm):02044         ;
                      (      romdefs.asm):02045         
     0000             (      romdefs.asm):02046         MaskGreen       equ     $00             ; Green
     0010             (      romdefs.asm):02047         MaskYellow      equ     $10             ; Yellow
     0020             (      romdefs.asm):02048         MaskBlue        equ     $20             ; Blue
     0030             (      romdefs.asm):02049         MaskRed         equ     $30             ; red
     0040             (      romdefs.asm):02050         MaskBuff        equ     $40             ; buff / white
     0050             (      romdefs.asm):02051         MaskCyan        equ     $50             ; cyan
     0060             (      romdefs.asm):02052         MaskMagenta     equ     $60             ; magenta
     0070             (      romdefs.asm):02053         MaskOrange      equ     $70             ; orange
                      (      romdefs.asm):02054         
     0010             (      romdefs.asm):02055         LRGColourDiff   equ     $10             ; difference between colours    
                      (      romdefs.asm):02056         
                      (      romdefs.asm):02057         ;
                      (      romdefs.asm):02058         ; Lo-res pixel masks
                      (      romdefs.asm):02059         ;
     0008             (      romdefs.asm):02060         MaskUpR         equ     $08             ; upper right
     0004             (      romdefs.asm):02061         MaskUpL         equ     $04             ; upper left
     0002             (      romdefs.asm):02062         MaskLowR        equ     $02             ; lower right
     0001             (      romdefs.asm):02063         MaskLowL        equ     $01             ; lower left
     000F             (      romdefs.asm):02064         MaskAllOn       equ     (MaskUpR+MaskUpL+MaskLowR+MaskLowL)     ; all on
     0000             (      romdefs.asm):02065         MaskAllOff      equ     $00             ; all off
                      (      romdefs.asm):02066         
     0080             (      romdefs.asm):02067         MaskLRG         equ     $80             ; low res graphics
                      (      romdefs.asm):02068         
                      (      romdefs.asm):02069         ; 
                      (      romdefs.asm):02070         ; Lo-res (semigraphics) and text screen metrics.
                      (      romdefs.asm):02071         ;
                      (      romdefs.asm):02072         
     003F             (      romdefs.asm):02073         LoMaxX          equ     63              ; Maximum lo-res X co-ordinate
     001F             (      romdefs.asm):02074         LoMaxY          equ     31              ; Maximum lo-res Y co-ordinate
     0008             (      romdefs.asm):02075         LoMaxColour     equ     8               ; max lo-res colour
     0020             (      romdefs.asm):02076         TextCharsLine   equ     32              ; Text/Lo-res character cells per line
                      (      romdefs.asm):02077         
                      (      romdefs.asm):02078         ;
                      (      romdefs.asm):02079         ; Cartridge entry points
                      (      romdefs.asm):02080         ;
                      (      romdefs.asm):02081         
     C000             (      romdefs.asm):02082         CartBase        equ     $c000           ; cartridge area base
     C000             (      romdefs.asm):02083         CartEntryFIRQ   equ     CartBase        ; entry point when FIRQ generated
     C002             (      romdefs.asm):02084         CartEntryDOS    equ     CartBase+2      ; entry point when dos flag found 'DK' at $C000
     444B             (      romdefs.asm):02085         CartDOSFlag     equ     $444B           ; Dos flag word : 'DK' 
                      (      romdefs.asm):02086         
                      (      romdefs.asm):02087         ;
                      (      romdefs.asm):02088         ; Dragon 64 RAM basic stuff
                      (      romdefs.asm):02089         ;
                      (      romdefs.asm):02090         
     C000             (      romdefs.asm):02091         D64RAMBase      equ     $C000           ; Dragon 64 RAM basic starts at $c000
     FEFF             (      romdefs.asm):02092         D64RAMTop       equ     $FEFF           ; Dragon 64 RAM ends here 
                      (      romdefs.asm):02093         
                      (      romdefs.asm):02094         ;
                      (      romdefs.asm):02095         ; Firmware flag used by warm start and RAM basic boot
                      (      romdefs.asm):02096         ;
     0055             (      romdefs.asm):02097         FFlagTrue       equ     $55             ; flag initialised / true
     0012             (      romdefs.asm):02098         NOPFlag         equ     $12             ; op-code fro NOP, used to mark start of reset vector           
                      (      romdefs.asm):02099         
                      (      romdefs.asm):02100         ;
                      (      romdefs.asm):02101         ; General evaluation vars, multiple uses
                      (      romdefs.asm):02102         ;
                      (      romdefs.asm):02103         
     0037             (      romdefs.asm):02104         Eval37  equ     $37
     0038             (      romdefs.asm):02105         Eval38  equ     $38
     0039             (      romdefs.asm):02106         Eval39  equ     $39
     003A             (      romdefs.asm):02107         Eval3A  equ     $3A
     003B             (      romdefs.asm):02108         Eval3B  equ     $3B
     003C             (      romdefs.asm):02109         Eval3C  equ     $3C
     003E             (      romdefs.asm):02110         Eval3E  equ     $3E
     003F             (      romdefs.asm):02111         Eval3F  equ     $3F
                      (      romdefs.asm):02112         
     0040             (      romdefs.asm):02113         Eval40  equ     $40
     0041             (      romdefs.asm):02114         Eval41  equ     $41
     0042             (      romdefs.asm):02115         Eval42  equ     $42
     0043             (      romdefs.asm):02116         Eval43  equ     $43
     0044             (      romdefs.asm):02117         Eval44  equ     $44
     0045             (      romdefs.asm):02118         Eval45  equ     $45
     0046             (      romdefs.asm):02119         Eval46  equ     $46
     0047             (      romdefs.asm):02120         Eval47  equ     $47
     0048             (      romdefs.asm):02121         Eval48  equ     $48
     0049             (      romdefs.asm):02122         Eval49  equ     $49
     004A             (      romdefs.asm):02123         Eval4A  equ     $4A
     004B             (      romdefs.asm):02124         Eval4B  equ     $4B
     004C             (      romdefs.asm):02125         Eval4C  equ     $4C
     004D             (      romdefs.asm):02126         Eval4D  equ     $4D
     004E             (      romdefs.asm):02127         Eval4E  equ     $4E
                      (      romdefs.asm):02128         
     00CF             (      romdefs.asm):02129         EvalCF  equ     $CF
                      (      romdefs.asm):02130         
     00D1             (      romdefs.asm):02131         EvalD1  equ     $D1
     00D2             (      romdefs.asm):02132         EvalD2  equ     $D2
     00D3             (      romdefs.asm):02133         EvalD3  equ     $D3
     00D4             (      romdefs.asm):02134         EvalD4  equ     $D4
     00D5             (      romdefs.asm):02135         EvalD5  equ     $D5
     00D6             (      romdefs.asm):02136         EvalD6  equ     $D6
     00D7             (      romdefs.asm):02137         EvalD7  equ     $D7
     00D8             (      romdefs.asm):02138         EvalD8  equ     $D8
     00D9             (      romdefs.asm):02139         EvalD9  equ     $D9
     00DA             (      romdefs.asm):02140         EvalDA  equ     $DA
     00DB             (      romdefs.asm):02141         EvalDB  equ     $DB
     00DC             (      romdefs.asm):02142         EvalDC  equ     $DC     
                      (      romdefs.asm):02143         
     0047             (      romdefs.asm):02144         BasFoundLineNo  EQU     Eval47          ; Address of line number found by BasFindLineNo
                      (       ddos12.asm):00028                         use     basictokens.asm
                      (  basictokens.asm):00001         ;
                      (  basictokens.asm):00002         ; BasicTokens.asm
                      (  basictokens.asm):00003         ;
                      (  basictokens.asm):00004         ; Values for Dragon and CoCo basic tokens.
                      (  basictokens.asm):00005         ;
                      (  basictokens.asm):00006         
                      (  basictokens.asm):00007         ;
                      (  basictokens.asm):00008         ; Dragon Commands
                      (  basictokens.asm):00009         ;
                      (  basictokens.asm):00010         
     0080             (  basictokens.asm):00011         DTokFOR         EQU     $80
     0081             (  basictokens.asm):00012         DTokGO          EQU     $81
     0082             (  basictokens.asm):00013         DTokREM         EQU     $82
     0083             (  basictokens.asm):00014         DTokREMComma    EQU     $83
     0084             (  basictokens.asm):00015         DTokELSE        EQU     $84
     0085             (  basictokens.asm):00016         DTokIF          EQU     $85
     0086             (  basictokens.asm):00017         DTokDATA        EQU     $86
     0087             (  basictokens.asm):00018         DTokPRINT       EQU     $87
     0088             (  basictokens.asm):00019         DTokON          EQU     $88
     0089             (  basictokens.asm):00020         DTokINPUT       EQU     $89
     008A             (  basictokens.asm):00021         DTokEND         EQU     $8A
     008B             (  basictokens.asm):00022         DTokNEXT        EQU     $8B
     008C             (  basictokens.asm):00023         DTokDIM         EQU     $8C
     008D             (  basictokens.asm):00024         DTokREAD        EQU     $8D
     008E             (  basictokens.asm):00025         DTokLET         EQU     $8E
     008F             (  basictokens.asm):00026         DTokRUN         EQU     $8F
     0090             (  basictokens.asm):00027         DTokRESTORE     EQU     $90
     0091             (  basictokens.asm):00028         DTokRETURN      EQU     $91
     0092             (  basictokens.asm):00029         DTokSTOP        EQU     $92
     0093             (  basictokens.asm):00030         DTokPOKE        EQU     $93
     0094             (  basictokens.asm):00031         DTokCONT        EQU     $94
     0095             (  basictokens.asm):00032         DTokLIST        EQU     $95
     0096             (  basictokens.asm):00033         DTokCLEAR       EQU     $96
     0097             (  basictokens.asm):00034         DTokNEW         EQU     $97
     0098             (  basictokens.asm):00035         DTokDEF         EQU     $98
     0099             (  basictokens.asm):00036         DTokCLOAD       EQU     $99
     009A             (  basictokens.asm):00037         DTokCSAVE       EQU     $9A
     009B             (  basictokens.asm):00038         DTokOPEN        EQU     $9B
     009C             (  basictokens.asm):00039         DTokCLOSE       EQU     $9C
     009D             (  basictokens.asm):00040         DTokLLIST       EQU     $9D
     009E             (  basictokens.asm):00041         DTokSET         EQU     $9E
     009F             (  basictokens.asm):00042         DTokRESET       EQU     $9F
     00A0             (  basictokens.asm):00043         DTokCLS         EQU     $A0
     00A1             (  basictokens.asm):00044         DTokMOTOR       EQU     $A1
     00A2             (  basictokens.asm):00045         DTokSOUND       EQU     $A2
     00A3             (  basictokens.asm):00046         DTokAUDIO       EQU     $A3
     00A4             (  basictokens.asm):00047         DTokEXEC        EQU     $A4
     00A5             (  basictokens.asm):00048         DTokSKIPF       EQU     $A5
     00A6             (  basictokens.asm):00049         DTokDELETE      EQU     $A6
     00A7             (  basictokens.asm):00050         DTokEDIT        EQU     $A7
     00A8             (  basictokens.asm):00051         DTokTRON        EQU     $A8
     00A9             (  basictokens.asm):00052         DTokTROFF       EQU     $A9
     00AA             (  basictokens.asm):00053         DTokLINE        EQU     $AA
     00AB             (  basictokens.asm):00054         DTokPCLS        EQU     $AB
     00AC             (  basictokens.asm):00055         DTokPSET        EQU     $AC
     00AD             (  basictokens.asm):00056         DTokPRESET      EQU     $AD
     00AE             (  basictokens.asm):00057         DTokSCREEN      EQU     $AE
     00AF             (  basictokens.asm):00058         DTokPCLEAR      EQU     $AF
     00B0             (  basictokens.asm):00059         DTokCOLOR       EQU     $B0
     00B1             (  basictokens.asm):00060         DTokCIRCLE      EQU     $B1
     00B2             (  basictokens.asm):00061         DTokPAINT       EQU     $B2
     00B3             (  basictokens.asm):00062         DTokGET         EQU     $B3
     00B4             (  basictokens.asm):00063         DTokPUT         EQU     $B4
     00B5             (  basictokens.asm):00064         DTokDRAW        EQU     $B5
     00B6             (  basictokens.asm):00065         DTokPCOPY       EQU     $B6
     00B7             (  basictokens.asm):00066         DTokPMODE       EQU     $B7
     00B8             (  basictokens.asm):00067         DTokPLAY        EQU     $B8
     00B9             (  basictokens.asm):00068         DTokDLOAD       EQU     $B9
     00BA             (  basictokens.asm):00069         DTokRENUM       EQU     $BA
     00BB             (  basictokens.asm):00070         DTokTAB         EQU     $BB
     00BC             (  basictokens.asm):00071         DTokTO          EQU     $BC
     00BD             (  basictokens.asm):00072         DTokSUB         EQU     $BD
     00BE             (  basictokens.asm):00073         DTokFN          EQU     $BE
     00BF             (  basictokens.asm):00074         DTokTHEN        EQU     $BF
     00C0             (  basictokens.asm):00075         DTokNOT         EQU     $C0
     00C1             (  basictokens.asm):00076         DTokSTEP        EQU     $C1
     00C2             (  basictokens.asm):00077         DTokOFF         EQU     $C2
     00C3             (  basictokens.asm):00078         DTokPLUS        EQU     $C3
     00C4             (  basictokens.asm):00079         DTokMINUS       EQU     $C4
     00C5             (  basictokens.asm):00080         DTokTIMES       EQU     $C5
     00C6             (  basictokens.asm):00081         DTokDIVIDE      EQU     $C6
     00C7             (  basictokens.asm):00082         DTokAT          EQU     $C7
     00C8             (  basictokens.asm):00083         DTokAND         EQU     $C8
     00C9             (  basictokens.asm):00084         DTokOR          EQU     $C9
     00CA             (  basictokens.asm):00085         DTokGREATER     EQU     $CA
     00CB             (  basictokens.asm):00086         DTokEQUAL       EQU     $CB
     00CC             (  basictokens.asm):00087         DTokLESS        EQU     $CC
     00CD             (  basictokens.asm):00088         DTokUSING       EQU     $CD
                      (  basictokens.asm):00089         
     0080             (  basictokens.asm):00090         DTokFirstC      EQU     DTokFOR
     00CD             (  basictokens.asm):00091         DTokLastC       EQU     DTokUSING
                      (  basictokens.asm):00092         
                      (  basictokens.asm):00093         ;
                      (  basictokens.asm):00094         ; Dragon Functions
                      (  basictokens.asm):00095         ; Tokens are preceeded by $FF
                      (  basictokens.asm):00096         ;
                      (  basictokens.asm):00097         
     0080             (  basictokens.asm):00098         DTokSGN         EQU     $80
     0081             (  basictokens.asm):00099         DTokINT         EQU     $81
     0082             (  basictokens.asm):00100         DTokABS         EQU     $82
     0083             (  basictokens.asm):00101         DTokPOS         EQU     $83
     0084             (  basictokens.asm):00102         DTokRND         EQU     $84
     0085             (  basictokens.asm):00103         DTokSQR         EQU     $85
     0086             (  basictokens.asm):00104         DTokLOG         EQU     $86
     0087             (  basictokens.asm):00105         DTokEXP         EQU     $87
     0088             (  basictokens.asm):00106         DTokSIN         EQU     $88
     0089             (  basictokens.asm):00107         DTokCOS         EQU     $89
     008A             (  basictokens.asm):00108         DTokTAN         EQU     $8A
     008B             (  basictokens.asm):00109         DTokATN         EQU     $8B
     008C             (  basictokens.asm):00110         DTokPEEK        EQU     $8C
     008D             (  basictokens.asm):00111         DTokLEN         EQU     $8D
     008E             (  basictokens.asm):00112         DTokSTRS        EQU     $8E
     008F             (  basictokens.asm):00113         DTokVAL         EQU     $8F
     0090             (  basictokens.asm):00114         DTokASC         EQU     $90
     0091             (  basictokens.asm):00115         DTokCHRS        EQU     $91
     0092             (  basictokens.asm):00116         DTokEOF         EQU     $92
     0093             (  basictokens.asm):00117         DTokJOYSTK      EQU     $93
     0094             (  basictokens.asm):00118         DTokFIX         EQU     $94
     0095             (  basictokens.asm):00119         DTokHEXS        EQU     $95
     0096             (  basictokens.asm):00120         DTokLEFTS       EQU     $96
     0097             (  basictokens.asm):00121         DTokRIGHTS      EQU     $97
     0098             (  basictokens.asm):00122         DTokMIDS        EQU     $98
     0099             (  basictokens.asm):00123         DTokPOINT       EQU     $99
     009A             (  basictokens.asm):00124         DTokINKEYS      EQU     $9A
     009B             (  basictokens.asm):00125         DTokMEM         EQU     $9B
     009C             (  basictokens.asm):00126         DTokVARPTR      EQU     $9C
     009D             (  basictokens.asm):00127         DTokINSTR       EQU     $9D
     009E             (  basictokens.asm):00128         DTokTIMER       EQU     $9E
     009F             (  basictokens.asm):00129         DTokPPOINT      EQU     $9F
     00A0             (  basictokens.asm):00130         DTokSTRINGS     EQU     $A0
     00A1             (  basictokens.asm):00131         DTokUSR         EQU     $A1
                      (  basictokens.asm):00132         
     0080             (  basictokens.asm):00133         DTokFirstF      EQU     DTokSGN
     00A1             (  basictokens.asm):00134         DTokLastF       EQU     DTokUSR
     0021             (  basictokens.asm):00135         DTokCountF      EQU     (DTokLastF-DTokFirstF)
                      (  basictokens.asm):00136         
                      (  basictokens.asm):00137         ;
                      (  basictokens.asm):00138         ; DragonDOS / SuperDOS command tokens
                      (  basictokens.asm):00139         ;
     00CE             (  basictokens.asm):00140         DDTokAUTO       EQU     $CE     
     00CE             (  basictokens.asm):00141         DDTokBACKUP     EQU     $CE
     00D0             (  basictokens.asm):00142         DDTokBEEP       EQU     $D0
     00D1             (  basictokens.asm):00143         DDTokBOOT       EQU     $D1
     00D2             (  basictokens.asm):00144         DDTokCHAIN      EQU     $D2
     00D3             (  basictokens.asm):00145         DDTokCOPY       EQU     $D3
     00D4             (  basictokens.asm):00146         DDTokCREATE     EQU     $D4
     00D5             (  basictokens.asm):00147         DDTokDIR        EQU     $D5
     00D6             (  basictokens.asm):00148         DDTokDRIVE      EQU     $D6
     00D7             (  basictokens.asm):00149         DDTokDSKINIT    EQU     $D7
     00D8             (  basictokens.asm):00150         DDTokFREAD      EQU     $D8
     00D9             (  basictokens.asm):00151         DDTokFWRITE     EQU     $D9
     00DA             (  basictokens.asm):00152         DDTokERROR      EQU     $DA
     00DB             (  basictokens.asm):00153         DDTokKILL       EQU     $DB
     00DC             (  basictokens.asm):00154         DDTokLOAD       EQU     $DC
     00DD             (  basictokens.asm):00155         DDTokMERGE      EQU     $DD
     00DE             (  basictokens.asm):00156         DDTokPROTECT    EQU     $DE
     00DF             (  basictokens.asm):00157         DDTokWAIT       EQU     $DF
     00E0             (  basictokens.asm):00158         DDTokRENAME     EQU     $E0
     00E1             (  basictokens.asm):00159         DDTokSAVE       EQU     $E1
     00E2             (  basictokens.asm):00160         DDTokSREAD      EQU     $E2
     00E3             (  basictokens.asm):00161         DDTokSWRITE     EQU     $E3
     00E4             (  basictokens.asm):00162         DDTokVERIFY     EQU     $E4
     00E5             (  basictokens.asm):00163         DDTokFROM       EQU     $E5
     00E6             (  basictokens.asm):00164         DDTokFLREAD     EQU     $E6
     00E7             (  basictokens.asm):00165         DDTokSWAP       EQU     $E7
                      (  basictokens.asm):00166         
     00CE             (  basictokens.asm):00167         DDTokFirstC     EQU     DDTokAUTO       ; First + Last Dragondos command Token
     00E7             (  basictokens.asm):00168         DDTokLastC      EQU     DDTokSWAP
     001A             (  basictokens.asm):00169         DDTokCountC     EQU     (DDTokLastC-DDTokFirstC)+1
                      (  basictokens.asm):00170         ;
                      (  basictokens.asm):00171         ; DragonDOS / SuperDOS function tokens
                      (  basictokens.asm):00172         ;
                      (  basictokens.asm):00173         
     00A2             (  basictokens.asm):00174         DDTokLOF        EQU     $A2
     00A3             (  basictokens.asm):00175         DDTokFREE       EQU     $A3
     00A4             (  basictokens.asm):00176         DDTokERL        EQU     $A4
     00A5             (  basictokens.asm):00177         DDTokERR        EQU     $A5
     00A6             (  basictokens.asm):00178         DDTokHIMEM      EQU     $A6
     00A7             (  basictokens.asm):00179         DDTokLOC        EQU     $A7
     00A8             (  basictokens.asm):00180         DDTokFRES       EQU     $A8
                      (  basictokens.asm):00181         
     00A2             (  basictokens.asm):00182         DDTokFirstF     EQU     DDTokLOF        ; First + Last Dragondos function Token
     00A8             (  basictokens.asm):00183         DDTokLastF      EQU     DDTokFRES
     0007             (  basictokens.asm):00184         DDTokCountF     EQU     (DDTokLastF-DDTokFirstF)+1
                      (  basictokens.asm):00185         
                      (  basictokens.asm):00186         ; CoCo 1/2 Commands
                      (  basictokens.asm):00187         ;
                      (  basictokens.asm):00188         
     0080             (  basictokens.asm):00189         CTokFOR         EQU     $80
     0081             (  basictokens.asm):00190         CTokGO          EQU     $81
     0082             (  basictokens.asm):00191         CTokREM         EQU     $82
     0083             (  basictokens.asm):00192         CTokREMComma    EQU     $83
     0084             (  basictokens.asm):00193         CTokELSE        EQU     $84
     0085             (  basictokens.asm):00194         CTokIF          EQU     $85
     0086             (  basictokens.asm):00195         CTokDATA        EQU     $86
     0087             (  basictokens.asm):00196         CTokPRINT       EQU     $87
     0088             (  basictokens.asm):00197         CTokON          EQU     $88
     0089             (  basictokens.asm):00198         CTokINPUT       EQU     $89
     008A             (  basictokens.asm):00199         CTokEND         EQU     $8A
     008B             (  basictokens.asm):00200         CTokNEXT        EQU     $8B
     008C             (  basictokens.asm):00201         CTokDIM         EQU     $8C
     008D             (  basictokens.asm):00202         CTokREAD        EQU     $8D
     00BA             (  basictokens.asm):00203         CTokLET         EQU     $BA
     008E             (  basictokens.asm):00204         CTokRUN         EQU     $8E
     008F             (  basictokens.asm):00205         CTokRESTORE     EQU     $8F
     0090             (  basictokens.asm):00206         CTokRETURN      EQU     $90
     0091             (  basictokens.asm):00207         CTokSTOP        EQU     $91
     0092             (  basictokens.asm):00208         CTokPOKE        EQU     $92
     0093             (  basictokens.asm):00209         CTokCONT        EQU     $93
     0094             (  basictokens.asm):00210         CTokLIST        EQU     $94
     0095             (  basictokens.asm):00211         CTokCLEAR       EQU     $95
     0096             (  basictokens.asm):00212         CTokNEW         EQU     $96
     00B9             (  basictokens.asm):00213         CTokDEF         EQU     $B9
     0097             (  basictokens.asm):00214         CTokCLOAD       EQU     $97
     0098             (  basictokens.asm):00215         CTokCSAVE       EQU     $98
     0099             (  basictokens.asm):00216         CTokOPEN        EQU     $99
     009A             (  basictokens.asm):00217         CTokCLOSE       EQU     $9A
     009B             (  basictokens.asm):00218         CTokLLIST       EQU     $9B
     009C             (  basictokens.asm):00219         CTokSET         EQU     $9C
     009D             (  basictokens.asm):00220         CTokRESET       EQU     $9D
     009E             (  basictokens.asm):00221         CTokCLS         EQU     $9E
     009F             (  basictokens.asm):00222         CTokMOTOR       EQU     $9F
     00A0             (  basictokens.asm):00223         CTokSOUND       EQU     $A0
     00A1             (  basictokens.asm):00224         CTokAUDIO       EQU     $A1
     00A2             (  basictokens.asm):00225         CTokEXEC        EQU     $A2
     00A3             (  basictokens.asm):00226         CTokSKIPF       EQU     $A3
     00B5             (  basictokens.asm):00227         CTokDELETE      EQU     $B5
     00B6             (  basictokens.asm):00228         CTokEDIT        EQU     $B6
     00B7             (  basictokens.asm):00229         CTokTRON        EQU     $B7
     00B8             (  basictokens.asm):00230         CTokTROFF       EQU     $B8
     00BB             (  basictokens.asm):00231         CTokLINE        EQU     $BB
     00BC             (  basictokens.asm):00232         CTokPCLS        EQU     $BC
     00BD             (  basictokens.asm):00233         CTokPSET        EQU     $BD
     00BE             (  basictokens.asm):00234         CTokPRESET      EQU     $BE
     00BF             (  basictokens.asm):00235         CTokSCREEN      EQU     $BF
     00C0             (  basictokens.asm):00236         CTokPCLEAR      EQU     $C0
     00C1             (  basictokens.asm):00237         CTokCOLOR       EQU     $C1
     00C2             (  basictokens.asm):00238         CTokCIRCLE      EQU     $C2
     00C3             (  basictokens.asm):00239         CTokPAINT       EQU     $C3
     00C4             (  basictokens.asm):00240         CTokGET         EQU     $C4
     00C5             (  basictokens.asm):00241         CTokPUT         EQU     $C5
     00C6             (  basictokens.asm):00242         CTokDRAW        EQU     $C6
     00C7             (  basictokens.asm):00243         CTokPCOPY       EQU     $C7
     00C8             (  basictokens.asm):00244         CTokPMODE       EQU     $C8
     00C9             (  basictokens.asm):00245         CTokPLAY        EQU     $C9
     00CA             (  basictokens.asm):00246         CTokDLOAD       EQU     $CA
     00CB             (  basictokens.asm):00247         CTokRENUM       EQU     $CB
     00A4             (  basictokens.asm):00248         CTokTAB         EQU     $A4
     00A5             (  basictokens.asm):00249         CTokTO          EQU     $A5
     00A6             (  basictokens.asm):00250         CTokSUB         EQU     $A6
     00CC             (  basictokens.asm):00251         CTokFN          EQU     $CC
     00A7             (  basictokens.asm):00252         CTokTHEN        EQU     $A7
     00A8             (  basictokens.asm):00253         CTokNOT         EQU     $A8
     00A9             (  basictokens.asm):00254         CTokSTEP        EQU     $A9
     00AA             (  basictokens.asm):00255         CTokOFF         EQU     $AA
     00AB             (  basictokens.asm):00256         CTokPLUS        EQU     $AB
     00AC             (  basictokens.asm):00257         CTokMINUS       EQU     $AC
     00AD             (  basictokens.asm):00258         CTokTIMES       EQU     $AD
     00AE             (  basictokens.asm):00259         CTokDIVIDE      EQU     $AE
     00AF             (  basictokens.asm):00260         CTokAT          EQU     $AF
     00B0             (  basictokens.asm):00261         CTokAND         EQU     $B0
     00B1             (  basictokens.asm):00262         CTokOR          EQU     $B1
     00B2             (  basictokens.asm):00263         CTokGREATER     EQU     $B2
     00B3             (  basictokens.asm):00264         CTokEQUAL       EQU     $B3
     00B4             (  basictokens.asm):00265         CTokLESS        EQU     $B4
     00CD             (  basictokens.asm):00266         CTokUSING       EQU     $CD
                      (  basictokens.asm):00267         
     0080             (  basictokens.asm):00268         CTokFirstC      EQU     CTokFOR
     ????             (  basictokens.asm):00269         CtokLastC       EQU     CTokUsing
                      (  basictokens.asm):00270         
                      (  basictokens.asm):00271         ;
                      (  basictokens.asm):00272         ; CoCo 1/2 Functions
                      (  basictokens.asm):00273         ; Tokens are preceeded by $FF
                      (  basictokens.asm):00274         ;
                      (  basictokens.asm):00275         
     0080             (  basictokens.asm):00276         CTokSGN         EQU     $80
     0081             (  basictokens.asm):00277         CTokINT         EQU     $81
     0082             (  basictokens.asm):00278         CTokABS         EQU     $82
     009A             (  basictokens.asm):00279         CTokPOS         EQU     $9A
     0084             (  basictokens.asm):00280         CTokRND         EQU     $84
     009B             (  basictokens.asm):00281         CTokSQR         EQU     $9B
     0099             (  basictokens.asm):00282         CTokLOG         EQU     $99
     0097             (  basictokens.asm):00283         CTokEXP         EQU     $97
     0085             (  basictokens.asm):00284         CTokSIN         EQU     $85
     0095             (  basictokens.asm):00285         CTokCOS         EQU     $95
     0096             (  basictokens.asm):00286         CTokTAN         EQU     $96
     0094             (  basictokens.asm):00287         CTokATN         EQU     $94
     0086             (  basictokens.asm):00288         CTokPEEK        EQU     $86
     0087             (  basictokens.asm):00289         CTokLEN         EQU     $87
     0088             (  basictokens.asm):00290         CTokSTRS        EQU     $88
     0089             (  basictokens.asm):00291         CTokVAL         EQU     $89
     008A             (  basictokens.asm):00292         CTokASC         EQU     $8A
     008B             (  basictokens.asm):00293         CTokCHRS        EQU     $8B
     008C             (  basictokens.asm):00294         CTokEOF         EQU     $8C
     008D             (  basictokens.asm):00295         CTokJOYSTK      EQU     $8D
     0098             (  basictokens.asm):00296         CTokFIX         EQU     $98
     009C             (  basictokens.asm):00297         CTokHEXS        EQU     $9C
     008E             (  basictokens.asm):00298         CTokLEFTS       EQU     $8E
     008F             (  basictokens.asm):00299         CTokRIGHTS      EQU     $8F
     0090             (  basictokens.asm):00300         CTokMIDS        EQU     $90
     0091             (  basictokens.asm):00301         CTokPOINT       EQU     $91
     0092             (  basictokens.asm):00302         CTokINKEYS      EQU     $92
     0093             (  basictokens.asm):00303         CTokMEM         EQU     $93
     009D             (  basictokens.asm):00304         CTokVARPTR      EQU     $9D
     009E             (  basictokens.asm):00305         CTokINSTR       EQU     $9E
     009F             (  basictokens.asm):00306         CTokTIMER       EQU     $9F
     00A0             (  basictokens.asm):00307         CTokPPOINT      EQU     $A0
     00A1             (  basictokens.asm):00308         CTokSTRINGS     EQU     $A1
     0083             (  basictokens.asm):00309         CTokUSR         EQU     $83
                      (  basictokens.asm):00310         
     0080             (  basictokens.asm):00311         CTokFirstF      EQU     CTokSGN
     00A1             (  basictokens.asm):00312         CTokLastF       EQU     CTokSTRINGS
                      (  basictokens.asm):00313         
                      (  basictokens.asm):00314         
                      (  basictokens.asm):00315         ;
                      (  basictokens.asm):00316         ; CoCo RS-DOS command tokens
                      (  basictokens.asm):00317         ;
                      (  basictokens.asm):00318         
     00CE             (  basictokens.asm):00319         CDTokDIR        EQU     $CE
     00CF             (  basictokens.asm):00320         CDTokDRIVE      EQU     $CF
     00D0             (  basictokens.asm):00321         CDTokFIELD      EQU     $D0
     00D1             (  basictokens.asm):00322         CDTokFILES      EQU     $D1
     00D2             (  basictokens.asm):00323         CDTokKILL       EQU     $D2
     00D3             (  basictokens.asm):00324         CDTokLOAD       EQU     $D3
     00D4             (  basictokens.asm):00325         CDTokLSET       EQU     $D4
     00D5             (  basictokens.asm):00326         CDTokMERGE      EQU     $D5
     00D6             (  basictokens.asm):00327         CDTokRENAME     EQU     $D6
     00D7             (  basictokens.asm):00328         CDTokRSET       EQU     $D7
     00D8             (  basictokens.asm):00329         CDTokSAVE       EQU     $D8
     00D9             (  basictokens.asm):00330         CDTokWRITE      EQU     $D9
     00DA             (  basictokens.asm):00331         CDTokVERIFY     EQU     $DA
     00DB             (  basictokens.asm):00332         CDTokUNLOAD     EQU     $DB
     00DC             (  basictokens.asm):00333         CDTokDSKINI     EQU     $DC
     00DD             (  basictokens.asm):00334         CDTokBACKUP     EQU     $DD
     00DE             (  basictokens.asm):00335         CDTokCOPY       EQU     $DE
     00DF             (  basictokens.asm):00336         CDTokDISKIS     EQU     $DF
     00E0             (  basictokens.asm):00337         CDTokDISKOS     EQU     $E0
                      (  basictokens.asm):00338         
     00CE             (  basictokens.asm):00339         CDTokFirstC     EQU     CDTokDIR        ; First RS-DOS command Token
     00E0             (  basictokens.asm):00340         CDTokLastC      EQU     CDTokDISKOS
     0013             (  basictokens.asm):00341         CDTokCountC     EQU     (CDTokLastC-CDTokFirstC)+1
                      (  basictokens.asm):00342         
                      (  basictokens.asm):00343         ;
                      (  basictokens.asm):00344         ; CoCo RS-DOS function tokens
                      (  basictokens.asm):00345         ;
                      (  basictokens.asm):00346         
     00A2             (  basictokens.asm):00347         CDTokCVN        EQU     $A2
     00A3             (  basictokens.asm):00348         CDTokFREE       EQU     $A3
     00A4             (  basictokens.asm):00349         CDTokLOC        EQU     $A4
     00A5             (  basictokens.asm):00350         CDTokLOF        EQU     $A5
     00A6             (  basictokens.asm):00351         CDTokMKNS       EQU     $A6
                      (  basictokens.asm):00352         
     00A2             (  basictokens.asm):00353         CDTokFirstF     EQU     CDTokCVN        ; First RS-DOS function Token
     00A6             (  basictokens.asm):00354         CDTokLastF      EQU     CDTokMKNS
     0005             (  basictokens.asm):00355         CDTokCountF     EQU     (CDTokLastF-CDTokFirstF)+1
                      (  basictokens.asm):00356         
                      (  basictokens.asm):00357         
     0005             (  basictokens.asm):00358         CmdTableSize    equ     5               ; 5 bytes in command table
     0005             (  basictokens.asm):00359         FuncTableSize   equ     5               ; 5 bytes in function table
     000A             (  basictokens.asm):00360         BasTableSize    equ     (CmdTableSize+FuncTableSize)
                      (  basictokens.asm):00361         
                      (  basictokens.asm):00362         ; offsets in command / function table stubs
     0000             (  basictokens.asm):00363         BasTableCount   equ     0               ; No of commands
     0001             (  basictokens.asm):00364         BasTableWords   equ     1               ; address of reserved word list
     0003             (  basictokens.asm):00365         BasTableAddrs   equ     3               ; address of dispatch address table
                      (  basictokens.asm):00366         
                      (  basictokens.asm):00367                         ifdef   Dragon
                      (  basictokens.asm):00368         
     00CE             (  basictokens.asm):00369         DOSTokFirstC    EQU     DDTokFirstC
     00E7             (  basictokens.asm):00370         DOSTokLastC     EQU     DDTokLastC
     001A             (  basictokens.asm):00371         DOSTokCountC    EQU     DDTokCountC
                      (  basictokens.asm):00372         
     00A2             (  basictokens.asm):00373         DOSTokFirstF    EQU     DDTokFirstF
     00A8             (  basictokens.asm):00374         DOSTokLastF     EQU     DDTokLastF
     0007             (  basictokens.asm):00375         DOSTokCountF    EQU     DDTokCountF
                      (  basictokens.asm):00376                         else
                      (  basictokens.asm):00377         
0000                  (  basictokens.asm):00378         DOSTokFirstC    EQU     CDTokFirstC
0000                  (  basictokens.asm):00379         DOSTokLastC     EQU     CDTokLastC
0000                  (  basictokens.asm):00380         DOSTokCountC    EQU     CDTokCountC
                      (  basictokens.asm):00381         
0000                  (  basictokens.asm):00382         DOSTokFirstF    EQU     CDTokFirstF
0000                  (  basictokens.asm):00383         DOSTokLastF     EQU     CDTokLastF
0000                  (  basictokens.asm):00384         DOSTokCountF    EQU     CDTokCountF
                      (  basictokens.asm):00385                         endc
                      (  basictokens.asm):00386         
                      (       ddos12.asm):00029                         use     basicdefs.asm
                      (    basicdefs.asm):00001         ;
                      (    basicdefs.asm):00002         ; BasicDefs.asm : definitions for Dragon / CoCo BASIC.
                      (    basicdefs.asm):00003         ;
                      (    basicdefs.asm):00004         
     F9FF             (    basicdefs.asm):00005         BasMaxLineNo    EQU     $F9FF   ; Maximum allowable line number.
                      (    basicdefs.asm):00006         
                      (    basicdefs.asm):00007         ;
                      (    basicdefs.asm):00008         ; Dragon Basic Error codes
                      (    basicdefs.asm):00009         ; 
     0000             (    basicdefs.asm):00010         DBErrNF         EQU     $00             ; Next without for              
     0002             (    basicdefs.asm):00011         DBErrSN         EQU     $02             ; Syntax
     0004             (    basicdefs.asm):00012         DBErrRG         EQU     $04             ; Return without GOSUB
     0006             (    basicdefs.asm):00013         DBErrOD         EQU     $06             ; Out of Data
     0008             (    basicdefs.asm):00014         DBErrFC         EQU     $08             ; Function Call
     000A             (    basicdefs.asm):00015         DBErrOV         EQU     $0A             ; OVerflow
     000C             (    basicdefs.asm):00016         DBErrOM         EQU     $0C             ; Out of Memory
     000E             (    basicdefs.asm):00017         DBErrUL         EQU     $0E             ; Undefined Line
     0010             (    basicdefs.asm):00018         DBErrBS         EQU     $10             ; Bad Subscript
     0012             (    basicdefs.asm):00019         DBErrDD         EQU     $12             ; Direct Dimension
     0014             (    basicdefs.asm):00020         DBErrZD         EQU     $14             ; Zero Divide
     0016             (    basicdefs.asm):00021         DBErrID         EQU     $16             ; Illegal Direct
     0018             (    basicdefs.asm):00022         DBErrTM         EQU     $18             ; Type Mismatch
     001A             (    basicdefs.asm):00023         DBErrOS         EQU     $1A             ; Out of String space
     001C             (    basicdefs.asm):00024         DBErrLS         EQU     $1C             ; Long String (len > 255)
     001E             (    basicdefs.asm):00025         DBErrST         EQU     $1E             ; String formula Too complex
     0020             (    basicdefs.asm):00026         DBErrCN         EQU     $20             ; Can't coNtinue
     0022             (    basicdefs.asm):00027         DBErrUF         EQU     $22             ; Undefined Function
     0024             (    basicdefs.asm):00028         DBErrFD         EQU     $24             ; bad File Data
     0026             (    basicdefs.asm):00029         DBErrAO         EQU     $26             ; Already Open
     0028             (    basicdefs.asm):00030         DBErrDN         EQU     $28             ; Device Number
     002A             (    basicdefs.asm):00031         DBErrIO         EQU     $2A             ; Input Output
     002C             (    basicdefs.asm):00032         DBErrFM         EQU     $2C             ; File Mismatch
     002E             (    basicdefs.asm):00033         DBErrNO         EQU     $2E             ; file Not Open
     0030             (    basicdefs.asm):00034         DBErrIE         EQU     $30             ; Input past End of file
     0032             (    basicdefs.asm):00035         DBErrDS         EQU     $32             ; Direct Statement
     0034             (    basicdefs.asm):00036         DBErrNE         EQU     $34             ; file does Not Exist
                      (    basicdefs.asm):00037         
                      (    basicdefs.asm):00038         ;
                      (    basicdefs.asm):00039         ; CoCo Basic Error codes.
                      (    basicdefs.asm):00040         ;
                      (    basicdefs.asm):00041         
     0000             (    basicdefs.asm):00042         CBErrNF         EQU     $00             ; Next without for              
     0002             (    basicdefs.asm):00043         CBErrSN         EQU     $02             ; Syntax
     0004             (    basicdefs.asm):00044         CBErrRG         EQU     $04             ; Return without GOSUB
     0006             (    basicdefs.asm):00045         CBErrOD         EQU     $06             ; Out of Data
     0008             (    basicdefs.asm):00046         CBErrFC         EQU     $08             ; Function Call
     000A             (    basicdefs.asm):00047         CBErrOV         EQU     $0A             ; OVerflow
     000C             (    basicdefs.asm):00048         CBErrOM         EQU     $0C             ; Out of Memory
     000E             (    basicdefs.asm):00049         CBErrUL         EQU     $0E             ; Undefined Line
     0010             (    basicdefs.asm):00050         CBErrBS         EQU     $10             ; Bad Subscript
     0012             (    basicdefs.asm):00051         CBErrDD         EQU     $12             ; Direct Dimension
     0014             (    basicdefs.asm):00052         CBErrZD         EQU     $14             ; Zero Divide
     0016             (    basicdefs.asm):00053         CBErrID         EQU     $16             ; Illegal Direct
     0018             (    basicdefs.asm):00054         CBErrTM         EQU     $18             ; Type Mismatch
     001A             (    basicdefs.asm):00055         CBErrOS         EQU     $1A             ; Out of String space
     001C             (    basicdefs.asm):00056         CBErrLS         EQU     $1C             ; Long String (len > 255)
     001E             (    basicdefs.asm):00057         CBErrST         EQU     $1E             ; String formula Too complex
     0020             (    basicdefs.asm):00058         CBErrCN         EQU     $20             ; Can't coNtinue
                      (    basicdefs.asm):00059         
     0022             (    basicdefs.asm):00060         CBErrFD         EQU     $22             ; bad File Data
     0024             (    basicdefs.asm):00061         CBErrAO         EQU     $24             ; Already Open
     0026             (    basicdefs.asm):00062         CBErrDN         EQU     $26             ; Device Number
     0028             (    basicdefs.asm):00063         CBErrIO         EQU     $28             ; Input Output
     002A             (    basicdefs.asm):00064         CBErrFM         EQU     $2A             ; File Mismatch
     002C             (    basicdefs.asm):00065         CBErrNO         EQU     $2C             ; file Not Open
     002E             (    basicdefs.asm):00066         CBErrIE         EQU     $2E             ; Input past End of file
     0030             (    basicdefs.asm):00067         CBErrDS         EQU     $30             ; Direct Statement
                      (    basicdefs.asm):00068         
                      (    basicdefs.asm):00069         ;
                      (    basicdefs.asm):00070         ; CoCo Extended basic error codes
                      (    basicdefs.asm):00071         ;
                      (    basicdefs.asm):00072         
     0032             (    basicdefs.asm):00073         CBErrUF         EQU     $32             ; Undefined Function
     0034             (    basicdefs.asm):00074         CBErrNE         EQU     $34             ; file does Not Exist
                      (    basicdefs.asm):00075         
                      (    basicdefs.asm):00076                 ifdef   Dragon
     0000             (    basicdefs.asm):00077         BErrNF          EQU     DBErrNF         ; Next without for              
     0002             (    basicdefs.asm):00078         BErrSN          EQU     DBErrSN         ; Syntax
     0004             (    basicdefs.asm):00079         BErrRG          EQU     DBErrRG         ; Return without GOSUB
     0006             (    basicdefs.asm):00080         BErrOD          EQU     DBErrOD         ; Out of Data
     0008             (    basicdefs.asm):00081         BErrFC          EQU     DBErrFC         ; Function Call
     000A             (    basicdefs.asm):00082         BErrOV          EQU     DBErrOV         ; OVerflow
     000C             (    basicdefs.asm):00083         BErrOM          EQU     DBErrOM         ; Out of Memory
     000E             (    basicdefs.asm):00084         BErrUL          EQU     DBErrUL         ; Undefined Line
     0010             (    basicdefs.asm):00085         BErrBS          EQU     DBErrBS         ; Bad Subscript
     0012             (    basicdefs.asm):00086         BErrDD          EQU     DBErrDD         ; Direct Dimension
     0014             (    basicdefs.asm):00087         BErrZD          EQU     DBErrZD         ; Zero Divide
     0016             (    basicdefs.asm):00088         BErrID          EQU     DBErrID         ; Illegal Direct
     0018             (    basicdefs.asm):00089         BErrTM          EQU     DBErrTM         ; Type Mismatch
     001A             (    basicdefs.asm):00090         BErrOS          EQU     DBErrOS         ; Out of String space
     001C             (    basicdefs.asm):00091         BErrLS          EQU     DBErrLS         ; Long String (len > 255)
     001E             (    basicdefs.asm):00092         BErrST          EQU     DBErrST         ; String formula Too complex
     0020             (    basicdefs.asm):00093         BErrCN          EQU     DBErrCN         ; Can't coNtinue
     0022             (    basicdefs.asm):00094         BErrUF          EQU     DBErrUF         ; Undefined Function
     0024             (    basicdefs.asm):00095         BErrFD          EQU     DBErrFD         ; bad File Data
     0026             (    basicdefs.asm):00096         BErrAO          EQU     DBErrAO         ; Already Open
     0028             (    basicdefs.asm):00097         BErrDN          EQU     DBErrDN         ; Device Number
     002A             (    basicdefs.asm):00098         BErrIO          EQU     DBErrIO         ; Input Output
     002C             (    basicdefs.asm):00099         BErrFM          EQU     DBErrFM         ; File Mismatch
     002E             (    basicdefs.asm):00100         BErrNO          EQU     DBErrNO         ; file Not Open
     0030             (    basicdefs.asm):00101         BErrIE          EQU     DBErrIE         ; Input past End of file
     0032             (    basicdefs.asm):00102         BErrDS          EQU     DBErrDS         ; Direct Statement
     0034             (    basicdefs.asm):00103         BErrNE          EQU     DBErrNE         ; file does Not Exist
                      (    basicdefs.asm):00104                 else
0000                  (    basicdefs.asm):00105         BErrNF          EQU     CBErrNF         ; Next without for              
0000                  (    basicdefs.asm):00106         BErrSN          EQU     CBErrSN         ; Syntax
0000                  (    basicdefs.asm):00107         BErrRG          EQU     CBErrRG         ; Return without GOSUB
0000                  (    basicdefs.asm):00108         BErrOD          EQU     CBErrOD         ; Out of Data
0000                  (    basicdefs.asm):00109         BErrFC          EQU     CBErrFC         ; Function Call
0000                  (    basicdefs.asm):00110         BErrOV          EQU     CBErrOV         ; OVerflow
0000                  (    basicdefs.asm):00111         BErrOM          EQU     CBErrOM         ; Out of Memory
0000                  (    basicdefs.asm):00112         BErrUL          EQU     CBErrUL         ; Undefined Line
0000                  (    basicdefs.asm):00113         BErrBS          EQU     CBErrBS         ; Bad Subscript
0000                  (    basicdefs.asm):00114         BErrDD          EQU     CBErrDD         ; Direct Dimension
0000                  (    basicdefs.asm):00115         BErrZD          EQU     CBErrZD         ; Zero Divide
0000                  (    basicdefs.asm):00116         BErrID          EQU     CBErrID         ; Illegal Direct
0000                  (    basicdefs.asm):00117         BErrTM          EQU     CBErrTM         ; Type Mismatch
0000                  (    basicdefs.asm):00118         BErrOS          EQU     CBErrOS         ; Out of String space
0000                  (    basicdefs.asm):00119         BErrLS          EQU     CBErrLS         ; Long String (len > 255)
0000                  (    basicdefs.asm):00120         BErrST          EQU     CBErrST         ; String formula Too complex
0000                  (    basicdefs.asm):00121         BErrCN          EQU     CBErrCN         ; Can't coNtinue
0000                  (    basicdefs.asm):00122         BErrUF          EQU     CBErrUF         ; Undefined Function
0000                  (    basicdefs.asm):00123         BErrFD          EQU     CBErrFD         ; bad File Data
0000                  (    basicdefs.asm):00124         BErrAO          EQU     CBErrAO         ; Already Open
0000                  (    basicdefs.asm):00125         BErrDN          EQU     CBErrDN         ; Device Number
0000                  (    basicdefs.asm):00126         BErrIO          EQU     CBErrIO         ; Input Output
0000                  (    basicdefs.asm):00127         BErrFM          EQU     CBErrFM         ; File Mismatch
0000                  (    basicdefs.asm):00128         BErrNO          EQU     CBErrNO         ; file Not Open
0000                  (    basicdefs.asm):00129         BErrIE          EQU     CBErrIE         ; Input past End of file
0000                  (    basicdefs.asm):00130         BErrDS          EQU     CBErrDS         ; Direct Statement
0000                  (    basicdefs.asm):00131         BErrNE          EQU     CBErrNE         ; file does Not Exist
                      (    basicdefs.asm):00132                 endc
                      (       ddos12.asm):00030                         use     samdefs.asm
                      (      samdefs.asm):00001         ;
                      (      samdefs.asm):00002         ; SAM Defs.
                      (      samdefs.asm):00003         ;
                      (      samdefs.asm):00004         
     FFE0             (      samdefs.asm):00005         SAMVectors      equ             $FFE0                   ; SAM vector block at top of memory map
     0020             (      samdefs.asm):00006         SAMVecSize      equ             $20                             ; SAM vector block size
                      (      samdefs.asm):00007         
     FFC0             (      samdefs.asm):00008         SAMBase         equ             $FFC0                   ; Base of SAM bits
                      (      samdefs.asm):00009         
                      (      samdefs.asm):00010         ; V2 V1 V0      Mode(s)
                      (      samdefs.asm):00011         ;  0  0  0      AL, AE, S4, S6
                      (      samdefs.asm):00012         ;  0  0  1      G1C, G1R
                      (      samdefs.asm):00013         ;  0  1  0      G2C
                      (      samdefs.asm):00014         ;  0  1  1      G2R
                      (      samdefs.asm):00015         ;  1  0  0      G3C
                      (      samdefs.asm):00016         ;  1  0  1      G3R
                      (      samdefs.asm):00017         ;  1  1  0      G6C, G6R
                      (      samdefs.asm):00018         ;  1  1  1      DMA
                      (      samdefs.asm):00019         
     FFC0             (      samdefs.asm):00020         SAMCV0          equ             $FFC0                   ; Video mode bits
     FFC1             (      samdefs.asm):00021         SAMSV0          equ             $FFC1
     FFC2             (      samdefs.asm):00022         SAMCV1          equ             $FFC2
     FFC3             (      samdefs.asm):00023         SAMSV1          equ             $FFC3
     FFC4             (      samdefs.asm):00024         SAMCV2          equ             $FFC4
     FFC5             (      samdefs.asm):00025         SAMSV2          equ             $FFC5
                      (      samdefs.asm):00026         
                      (      samdefs.asm):00027         ;
                      (      samdefs.asm):00028         ; Binary offset from $0000, in 512 byte pages.
                      (      samdefs.asm):00029         ;
                      (      samdefs.asm):00030         
     FFC6             (      samdefs.asm):00031         SAMCF0          equ             $FFC6                   ; Display offset
     FFC7             (      samdefs.asm):00032         SAMSF0          equ             $FFC7
     FFC8             (      samdefs.asm):00033         SAMCF1          equ             $FFC8
     FFC9             (      samdefs.asm):00034         SAMSF1          equ             $FFC9
     FFCA             (      samdefs.asm):00035         SAMCF2          equ             $FFCA
     FFCB             (      samdefs.asm):00036         SAMSF2          equ             $FFCB
     FFCC             (      samdefs.asm):00037         SAMCF3          equ             $FFCC
     FFCD             (      samdefs.asm):00038         SAMSF3          equ             $FFCD
     FFCE             (      samdefs.asm):00039         SAMCF4          equ             $FFCE
     FFCF             (      samdefs.asm):00040         SAMSF4          equ             $FFCF
     FFD0             (      samdefs.asm):00041         SAMCF5          equ             $FFD0
     FFD1             (      samdefs.asm):00042         SAMSF5          equ             $FFD1
     FFD2             (      samdefs.asm):00043         SAMCF6          equ             $FFD2
     FFD3             (      samdefs.asm):00044         SAMSF6          equ             $FFD3
                      (      samdefs.asm):00045         
                      (      samdefs.asm):00046         ; Maps 2 pages of 32K into $0000-$7FFF, requires 64K RAM.
                      (      samdefs.asm):00047         
     FFD4             (      samdefs.asm):00048         SAMCP1          equ             $FFD4                   ; Page #1
     FFD5             (      samdefs.asm):00049         SAMSP1          equ             $FFD5
                      (      samdefs.asm):00050         
                      (      samdefs.asm):00051         ; R1 R0
                      (      samdefs.asm):00052         ;  0  0         Slow, 0.89MHz 
                      (      samdefs.asm):00053         ;  0  1         Address dependent 1.7MHz / 0.89MHz
                      (      samdefs.asm):00054         ;  1  0         Fast
                      (      samdefs.asm):00055         ;  1  1         Fast
                      (      samdefs.asm):00056         
     FFD6             (      samdefs.asm):00057         SAMCR0          equ             $FFD6                   ; CPU Rate
     FFD7             (      samdefs.asm):00058         SAMSR0          equ             $FFD7
     FFD8             (      samdefs.asm):00059         SAMCR1          equ             $FFD8
     FFD9             (      samdefs.asm):00060         SAMSR2          equ             $FFD9
                      (      samdefs.asm):00061         
                      (      samdefs.asm):00062         ; M1 M0
                      (      samdefs.asm):00063         ;  0  0          4K dynamic
                      (      samdefs.asm):00064         ;  0  1         16K dynamic
                      (      samdefs.asm):00065         ;  1  0         64K dynamic
                      (      samdefs.asm):00066         ;  1  1         64K static
                      (      samdefs.asm):00067         
     FFDA             (      samdefs.asm):00068         SAMCM0          equ             $FFDA                   ; Memory type
     FFDB             (      samdefs.asm):00069         SAMSM0          equ             $FFDB
     FFDC             (      samdefs.asm):00070         SAMCM1          equ             $FFDC
     FFDD             (      samdefs.asm):00071         SAMSM1          equ             $FFDD
                      (      samdefs.asm):00072         
                      (      samdefs.asm):00073         ; 0= RAM below 32K, ROM above, 1=RAM for entire map 
                      (      samdefs.asm):00074         ; In both map types top 256 bytes reserved for I/O space
                      (      samdefs.asm):00075         
     FFDE             (      samdefs.asm):00076         SAMCTY          equ             $FFDE                   ; Map type
     FFDF             (      samdefs.asm):00077         SAMSTY          equ             $FFDF
                      (      samdefs.asm):00078         
                      (      samdefs.asm):00079         
                      (      samdefs.asm):00080         
                      (      samdefs.asm):00081         
                      (       ddos12.asm):00031                         use     wddefs.asm
                      (       wddefs.asm):00001         ;
                      (       wddefs.asm):00002         ; WD17xx / WD27xx defines.
                      (       wddefs.asm):00003         ;
                      (       wddefs.asm):00004                         ifdef   Tandy
                      (       wddefs.asm):00005         ; Disk command codes WD1793, WD1773, RSDos FDC carts.
0000                  (       wddefs.asm):00006         WDCmdRestore    EQU     $00             ; Restore to track 0
0000                  (       wddefs.asm):00007         WDCmdSeek       EQU     $10             ; Seek to track command
0000                  (       wddefs.asm):00008         WDCmdReadSec    EQU     $80             ; Read sector command
0000                  (       wddefs.asm):00009         WDCmdWriteSec   EQU     $A0             ; Write sector command
0000                  (       wddefs.asm):00010         WDCmdReadAddr   EQU     $C0             ; Read address mark
0000                  (       wddefs.asm):00011         WDCmdForceInt   EQU     $D0             ; Force inturrupt
0000                  (       wddefs.asm):00012         WDCmdWriteTrack EQU     $F4             ; Write (format) track  
                      (       wddefs.asm):00013                         else
                      (       wddefs.asm):00014         ; Disk command codes WD2797, Dragon Dos, Cumana Dos, Dragon Alpha/Professional, Dragon Beta
     0000             (       wddefs.asm):00015         WDCmdRestore    EQU     $00             ; Restore to track 0
     0010             (       wddefs.asm):00016         WDCmdSeek       EQU     $10             ; Seek to track command
     0088             (       wddefs.asm):00017         WDCmdReadSec    EQU     $88             ; Read sector command
     00A8             (       wddefs.asm):00018         WDCmdWriteSec   EQU     $A8             ; Write sector command
     00C0             (       wddefs.asm):00019         WDCmdReadAddr   EQU     $C0             ; Read address mark
     00D0             (       wddefs.asm):00020         WDCmdForceInt   EQU     $D0             ; Force inturrupt
     00F4             (       wddefs.asm):00021         WDCmdWriteTrack EQU     $F4             ; Write (format) track
                      (       wddefs.asm):00022                         endc
                      (       wddefs.asm):00023         ;
                      (       wddefs.asm):00024         ; Step rates.
                      (       wddefs.asm):00025         ;
                      (       wddefs.asm):00026         
     0000             (       wddefs.asm):00027         StepRate6ms     EQU     $00             ;  6ms step rate
     0001             (       wddefs.asm):00028         StepRate12ms    EQU     $01             ; 12ms step rate
     0002             (       wddefs.asm):00029         StepRate20ms    EQU     $02             ; 20ms step rate
     0003             (       wddefs.asm):00030         StepRate30ms    EQU     $03             ; 30ms step rate
                      (       wddefs.asm):00031         
     0002             (       wddefs.asm):00032         StepRateDefault EQU     StepRate20ms    ; Default
                      (       wddefs.asm):00033         
                      (       wddefs.asm):00034         ;
                      (       wddefs.asm):00035         ; WD Error flag / status bits
                      (       wddefs.asm):00036         ;
                      (       wddefs.asm):00037         
     0080             (       wddefs.asm):00038         WDErrNotReady   EQU     $80             ; Not ready
     0040             (       wddefs.asm):00039         WDErrWriteProt  EQU     $40             ; Write protect
     0020             (       wddefs.asm):00040         WDErrHeadLoaded EQU     $20             ; Head loaded, type 1
     0020             (       wddefs.asm):00041         WDErrRecType    EQU     $20             ; Record type, read sec
     0010             (       wddefs.asm):00042         WDErrSeek       EQU     $10             ; Seek error, type 1
     0010             (       wddefs.asm):00043         WDErrRNF        EQU     $10             ; Record not found, read address, sector write sector
     0008             (       wddefs.asm):00044         WDErrCRC        EQU     $08             ; CRC error all but read/write track
     0004             (       wddefs.asm):00045         WDErrTrack0     EQU     $04             ; Head on track 0, type 1
     0004             (       wddefs.asm):00046         WDErrLostData   EQU     $04             ; Lost data 
     0002             (       wddefs.asm):00047         WDErrIndex      EQU     $02             ; Index pulse, type 1
     0002             (       wddefs.asm):00048         WDErrDRQ        EQU     $02             ; Data request
     0001             (       wddefs.asm):00049         WDErrBusy       EQU     $01             ; Busy
                      (       wddefs.asm):00050         
     000F             (       wddefs.asm):00051         WDErrMask0F     EQU     WDErrCRC+WDErrLostData+WDErrDRQ+WDErrBusy
     005F             (       wddefs.asm):00052         WDErrMask5F     EQU     WDErrWriteProt+WDErrRNF+WDErrMask0F
     00DF             (       wddefs.asm):00053         WDErrMaskDF     EQU     WDErrNotReady+WDErrMask5F
     0047             (       wddefs.asm):00054         WDErrMaskFormat EQU     WDErrWriteProt+WDErrLostData+WDErrDRQ+WDErrBusy
     003F             (       wddefs.asm):00055         WDDefErrMask    EQU     WDErrRecType+WDErrSeek+WDErrMask0F
     007C             (       wddefs.asm):00056         WDErrMaskRW     EQU     WDErrWriteProt+WDErrRecType+WDErrRNF+WDErrCRC+WDErrLostData
                      (       wddefs.asm):00057         
                      (       wddefs.asm):00058         
                      (       ddos12.asm):00032                         
                      (       ddos12.asm):00033                         ifdef   DragonAlpha
                      (       ddos12.asm):00034         
                      (       ddos12.asm):00035         * Dragon Alpha has a third PIA at FF24, this is used for
                      (       ddos12.asm):00036         * Drive select / motor control, and provides FIRQ from the
                      (       ddos12.asm):00037         * disk controler.
                      (       ddos12.asm):00038         
0000                  (       ddos12.asm):00039         DPPIADA         EQU     DPPIA2DA
0000                  (       ddos12.asm):00040         DPPIACRA        EQU     DPPIA2CRA               
0000                  (       ddos12.asm):00041         DPPIADB         EQU     DPPIA2DB                
0000                  (       ddos12.asm):00042         DPPIACRB        EQU     DPPIA2CRB
                      (       ddos12.asm):00043         
0000                  (       ddos12.asm):00044         PIADA           EQU     DPPIADA+IO      ; Side A Data/DDR
0000                  (       ddos12.asm):00045         PIACRA          EQU     DPPIACRA+IO     ; Side A Control.
0000                  (       ddos12.asm):00046         PIADB           EQU     DPPIADB+IO      ; Side A Data/DDR
0000                  (       ddos12.asm):00047         PIACRB          EQU     DPPIACRB+IO     ; Side A Control.
                      (       ddos12.asm):00048         
                      (       ddos12.asm):00049         ;WD2797 Floppy disk controler, used in Alpha Note registers in reverse order !
0000                  (       ddos12.asm):00050         DPCmdReg        EQU     DPCmdRegA       ; command/status                        
0000                  (       ddos12.asm):00051         DPTrkReg        EQU     DPTrkRegA       ; Track register
0000                  (       ddos12.asm):00052         DPSecReg        EQU     DPSecRegA       ; Sector register
0000                  (       ddos12.asm):00053         DPDataReg       EQU     DPDataRegA      ; Data register
                      (       ddos12.asm):00054         
0000                  (       ddos12.asm):00055         CmdReg          EQU     DPCmdReg+IO     ; command/status                        
0000                  (       ddos12.asm):00056         TrkReg          EQU     DPTrkReg+IO     ; Track register
0000                  (       ddos12.asm):00057         SecReg          EQU     DPSecReg+IO     ; Sector register
0000                  (       ddos12.asm):00058         DataReg         EQU     DPDataReg+IO    ; Data register
                      (       ddos12.asm):00059         
                      (       ddos12.asm):00060         ; Disk IO bitmasks
                      (       ddos12.asm):00061         
0000                  (       ddos12.asm):00062         NMIEn           EQU     NMIEnA
0000                  (       ddos12.asm):00063         WPCEn           EQU     WPCEnA
0000                  (       ddos12.asm):00064         SDensEn         EQU     SDensEnA
0000                  (       ddos12.asm):00065         MotorOn         EQU     MotorOnA 
                      (       ddos12.asm):00066         
0000                  (       ddos12.asm):00067         Drive0          EQU     Drive0A
0000                  (       ddos12.asm):00068         Drive1          EQU     Drive1A
0000                  (       ddos12.asm):00069         Drive2          EQU     Drive2A
0000                  (       ddos12.asm):00070         Drive3          EQU     Drive3A
                      (       ddos12.asm):00071         
0000                  (       ddos12.asm):00072         KnownBits       EQU     Drive0+Drive1+Drive2+Drive3+MotorOn+WPCEn
                      (       ddos12.asm):00073         
                      (       ddos12.asm):00074                         ELSE
                      (       ddos12.asm):00075                         
     0020             (       ddos12.asm):00076         DPPIADA         EQU     DPPIA1DA
     0021             (       ddos12.asm):00077         DPPIACRA        EQU     DPPIA1CRA               
     0022             (       ddos12.asm):00078         DPPIADB         EQU     DPPIA1DB                
     0023             (       ddos12.asm):00079         DPPIACRB        EQU     DPPIA1CRB
                      (       ddos12.asm):00080         
     FF20             (       ddos12.asm):00081         PIADA           EQU     DPPIADA+IO      ; Side A Data/DDR
     FF21             (       ddos12.asm):00082         PIACRA          EQU     DPPIACRA+IO     ; Side A Control.
     FF22             (       ddos12.asm):00083         PIADB           EQU     DPPIADB+IO      ; Side A Data/DDR
     FF23             (       ddos12.asm):00084         PIACRB          EQU     DPPIACRB+IO     ; Side A Control.
                      (       ddos12.asm):00085         
                      (       ddos12.asm):00086         ;WD2797 Floppy disk controler, used in DragonDos.
     0040             (       ddos12.asm):00087         DPCmdReg        EQU     DPCmdRegD       ; command/status                        
     0041             (       ddos12.asm):00088         DPTrkReg        EQU     DPTrkRegD       ; Track register
     0042             (       ddos12.asm):00089         DPSecReg        EQU     DPSecRegD       ; Sector register
     0043             (       ddos12.asm):00090         DPDataReg       EQU     DPDataRegD      ; Data register
                      (       ddos12.asm):00091         
     FF40             (       ddos12.asm):00092         CmdReg          EQU     DPCmdReg+IO     ; command/status                        
     FF41             (       ddos12.asm):00093         TrkReg          EQU     DPTrkReg+IO     ; Track register
     FF42             (       ddos12.asm):00094         SecReg          EQU     DPSecReg+IO     ; Sector register
     FF43             (       ddos12.asm):00095         DataReg         EQU     DPDataReg+IO    ; Data register
                      (       ddos12.asm):00096         
     0048             (       ddos12.asm):00097         DPDskCtl        EQU     $48             ; Disk DS/motor control reg
     FF48             (       ddos12.asm):00098         DskCtl          EQU     DPDskCtl+IO             
                      (       ddos12.asm):00099         
     0003             (       ddos12.asm):00100         DriveMask       EQU     DriveMaskD      ; Mask to extract drives form DskCtl
                      (       ddos12.asm):00101         
                      (       ddos12.asm):00102         ; Disk IO bitmasks
                      (       ddos12.asm):00103         
     0020             (       ddos12.asm):00104         NMIEn           EQU     NMIEnD
     0010             (       ddos12.asm):00105         WPCEn           EQU     WPCEnD
     0008             (       ddos12.asm):00106         SDensEn         EQU     SDensEnD
     0004             (       ddos12.asm):00107         MotorOn         EQU     MotorOnD
                      (       ddos12.asm):00108         
                      (       ddos12.asm):00109                         ENDC
                      (       ddos12.asm):00110         
                      (       ddos12.asm):00111                         ifndef  Tandy
                      (       ddos12.asm):00112         ; Compiling to run on Dragon 32/64/Alpha
                      (       ddos12.asm):00113         
     0137             (       ddos12.asm):00114         NextResJump     EQU     BasStub2+StubResJumpOfs         ; Jump to reserved word handler of user table
     013C             (       ddos12.asm):00115         NextFuncsJump   EQU     BasStub2+StubFuncsJumpOfs       ; Jump to functions handler of user table
                      (       ddos12.asm):00116         
                      (       ddos12.asm):00117                         ELSE
                      (       ddos12.asm):00118         ; Compiling to run on Tandy CoCo
                      (       ddos12.asm):00119         
0000                  (       ddos12.asm):00120         NextResJump     EQU     BasStub3+StubResJumpOfs         ; Jump to reserved word handler of user table
0000                  (       ddos12.asm):00121         NextFuncsJump   EQU     BasStub3+StubFuncsJumpOfs       ; Jump to functions handler of user table
                      (       ddos12.asm):00122                         ENDC
                      (       ddos12.asm):00123         
                      (       ddos12.asm):00124                         ORG     $C000
                      (       ddos12.asm):00125         
                      (       ddos12.asm):00126         ; Disk controler ID, if a cartrage starts with the chars 'DK', then the basic rom routines
                      (       ddos12.asm):00127         ; will do a JMP to $C002 to init the cartrage.
                      (       ddos12.asm):00128         
C000 444B             (       ddos12.asm):00129         DC000   FCC     /DK/            ; Disk cartrage auto-init identifier.
                      (       ddos12.asm):00130         
C002 2026             (       ddos12.asm):00131         LC002   BRA     DosInit
                      (       ddos12.asm):00132         
                      (       ddos12.asm):00133         ; Indirect jump table, these are probably the official DragonData entry
                      (       ddos12.asm):00134         ; points to be called with jsr [entry]
                      (       ddos12.asm):00135         
C004 C169             (       ddos12.asm):00136                 FDB     DOSLowLevel             ; Low Level disk IO routine
C006 00EA             (       ddos12.asm):00137                 FDB     DosCommand              ; Address of data table for low level command
C008 C7BE             (       ddos12.asm):00138                 FDB     DOSValidFilename        ; Validate filename & copy to disk block.
C00A C87C             (       ddos12.asm):00139                 FDB     DOSOpenFile             ; Open A file.
C00C CF14             (       ddos12.asm):00140                 FDB     DOSCreateFile           ; Create file (make backup)
C00E CE79             (       ddos12.asm):00141                 FDB     DOSGetFLen              ; Get file length
C010 CEBB             (       ddos12.asm):00142                 FDB     DOSCloseAll             ; Close all open files
C012 CED1             (       ddos12.asm):00143                 FDB     DOSCloseFile            ; Close file
C014 C991             (       ddos12.asm):00144                 FDB     DOSFRead                ; Read data from file
C016 CB59             (       ddos12.asm):00145                 FDB     DOSFWrite               ; Write data to file
C018 D14D             (       ddos12.asm):00146                 FDB     DOSGetFree              ; Get free space on a disk
C01A CFB6             (       ddos12.asm):00147                 FDB     DOSDeleteFile           ; Delete a file
                      (       ddos12.asm):00148         
                      (       ddos12.asm):00149                 ifdef PGSFix
                      (       ddos12.asm):00150                 FDB     DOSProtectMC            ; Protect/unprotect file
                      (       ddos12.asm):00151                 FDB     CmdRenameMC             ; Rename a file 
                      (       ddos12.asm):00152                 else
C01C D781             (       ddos12.asm):00153                 FDB     CmdProtect              ; Protect/unprotect file
C01E D7A5             (       ddos12.asm):00154                 FDB     CmdRename               ; Rename a file 
                      (       ddos12.asm):00155                 endc
                      (       ddos12.asm):00156                 
C020 D1D4             (       ddos12.asm):00157                 FDB     DOSGetDirEntry          ; Get a directory entry
C022 D247             (       ddos12.asm):00158                 FDB     DOSFindAndRead          ; Find free buffer and read sector
C024 C734             (       ddos12.asm):00159                 FDB     DOSSyncDir              ; Copy updated sectors from track 20 to 16 (sync direcories)
C026 D30A             (       ddos12.asm):00160                 FDB     DOSReadAbsSector        ; Read absolute sector
C028 D2FA             (       ddos12.asm):00161                 FDB     DOSWriteAbsSector       ; Write absolute sector (no verify)
                      (       ddos12.asm):00162         
                      (       ddos12.asm):00163         ;
                      (       ddos12.asm):00164         ; Init Dos
                      (       ddos12.asm):00165         ; 
                      (       ddos12.asm):00166         
C02A 8E0600           (       ddos12.asm):00167         DosInit LDX     #DosAreaStart           ; Point to bottom of dos vars area      
C02D 1F12             (       ddos12.asm):00168                 TFR     X,Y             
C02F 6F80             (       ddos12.asm):00169         LC02F   CLR     ,X+                     ; Clear a byte, increment X
C031 313F             (       ddos12.asm):00170                 LEAY    -1,Y                    ; decrement counter
C033 26FA             (       ddos12.asm):00171                 BNE     LC02F                   ; loop again if more to do
                      (       ddos12.asm):00172                 
                      (       ddos12.asm):00173         ; X now points to the top of the dos variable area
                      (       ddos12.asm):00174         
C035 1F10             (       ddos12.asm):00175                 TFR     X,D
C037 1F89             (       ddos12.asm):00176                 TFR     A,B
C039 CB18             (       ddos12.asm):00177                 ADDB    #$18
C03B D719             (       ddos12.asm):00178                 STB     <BasStartProg           ; Setup new begining of basic
C03D BDAA87           (       ddos12.asm):00179                 JSR     >BasLocateScreen
C040 96BA             (       ddos12.asm):00180                 LDA     <GrDisplayStartAddr     ; Adjust graphics ram pages
C042 8B06             (       ddos12.asm):00181                 ADDA    #$06
C044 97B7             (       ddos12.asm):00182                 STA     <GrLastDisplayAddr
                      (       ddos12.asm):00183         
                      (       ddos12.asm):00184         ;
                      (       ddos12.asm):00185         ; Init various low ram stuff, interrupt vectors, basic stub etc
                      (       ddos12.asm):00186         ; 
                      (       ddos12.asm):00187         
C046 8EDE1E           (       ddos12.asm):00188                 LDX     #NewVectorTable         ; Point to rom copy of data to copy
C049 E680             (       ddos12.asm):00189         LC049   LDB     ,X+                     ; Get byte count byte
C04B 2707             (       ddos12.asm):00190                 BEQ     LC054                   ; zero= end of table, exit copy
C04D EE81             (       ddos12.asm):00191                 LDU     ,X++                    ; Get destination address
C04F BDB7CC           (       ddos12.asm):00192                 JSR     >UtilCopyBXtoU          ; do copy
C052 20F5             (       ddos12.asm):00193                 BRA     LC049                   ; do next
                      (       ddos12.asm):00194         
                      (       ddos12.asm):00195         
C054 C620             (       ddos12.asm):00196         LC054   LDB     #$20                    ; Set hardware control mask
C056 F70607           (       ddos12.asm):00197                 STB     DosHWMaskFF48
C059 730608           (       ddos12.asm):00198                 COM     DosVerifyFlag           ; function unknown 
                      (       ddos12.asm):00199                
C05C 8E0683           (       ddos12.asm):00200                 LDX     #DosNewUSRTable         ; Adjust usr vector base
C05F 9FB0             (       ddos12.asm):00201                 STX     <BasUSRTableAddr        
C061 CE8B8D           (       ddos12.asm):00202                 LDU     #BasFCError             ; Setup the 10 usr vectors to point to BasFCError
C064 C60A             (       ddos12.asm):00203                 LDB     #$0A                    ; do 10
                      (       ddos12.asm):00204         
C066 EF81             (       ddos12.asm):00205         LC066   STU     ,X++                    ; setup vector
C068 5A               (       ddos12.asm):00206                 DECB                            ; decrement count
C069 26FB             (       ddos12.asm):00207                 BNE     LC066                   ; loop again if more to do
                      (       ddos12.asm):00208                 
C06B 7C060A           (       ddos12.asm):00209                 INC     DosDefDriveNo   
C06E 8D48             (       ddos12.asm):00210                 BSR     DosReset
                      (       ddos12.asm):00211                 
C070 8E015E           (       ddos12.asm):00212                 LDX     #VectBase               ; Point to ram hooks
C073 108EDE95         (       ddos12.asm):00213                 LDY     #RamHookTable           ; Point to ram hook table in rom
C077 CC137E           (       ddos12.asm):00214                 LDD     #$137E                  ; load A with number of vectors B with opcode for JMP
C07A E780             (       ddos12.asm):00215         LC07A   STB     ,X+                     ; setup jump
C07C EEA1             (       ddos12.asm):00216                 LDU     ,Y++                    ; setup vector
C07E EF81             (       ddos12.asm):00217                 STU     ,X++
C080 4A               (       ddos12.asm):00218                 DECA                            ; decrement counter
C081 26F7             (       ddos12.asm):00219                 BNE     LC07A                   ; Loop again if more to do
                      (       ddos12.asm):00220                 
C083 8E4549           (       ddos12.asm):00221                 LDX     #$4549                  ; Look for DK at $E000
C086 BCE000           (       ddos12.asm):00222                 CMPX    $E000
C089 10271F75         (       ddos12.asm):00223                 LBEQ    $E002                   ; Found it, call it's init routine
                      (       ddos12.asm):00224                 
C08D 8EC6DF           (       ddos12.asm):00225         EIEND   LDX     #ResetVector            ; Setup new reset vector
C090 9F72             (       ddos12.asm):00226                 STX     <IndVecReset
C092 8655             (       ddos12.asm):00227                 LDA     #$55
C094 9771             (       ddos12.asm):00228                 STA     <WarmStartFlag
C096 1CAF             (       ddos12.asm):00229                 andcc   #~(FlagIRQ+FlagFIRQ)    ; reenable inturrupts
                      (       ddos12.asm):00230                 
C098 8EB4B2           (       ddos12.asm):00231                 LDX     #BasSignonMess          ; Print staandard Basic signon message
C09B BD90E5           (       ddos12.asm):00232                 JSR     >TextOutString
C09E 0CEB             (       ddos12.asm):00233                 INC     <DosDriveNo
                      (       ddos12.asm):00234                 
C0A0 8E8000           (       ddos12.asm):00235                 LDX     #$8000                  ; delay counter
C0A3 4F               (       ddos12.asm):00236                 CLRA                            
C0A4 3D               (       ddos12.asm):00237         LC0A4   MUL                             ; take some time....
C0A5 301F             (       ddos12.asm):00238                 LEAX    -1,X                    ; decrement count
C0A7 26FB             (       ddos12.asm):00239                 BNE     LC0A4                   ; loop again....
                      (       ddos12.asm):00240                 
C0A9 BDC165           (       ddos12.asm):00241                 JSR     >DosDoRestore
C0AC BDBA77           (       ddos12.asm):00242                 JSR     >TextCls                ; clear screen
                      (       ddos12.asm):00243                 
C0AF 8EDFBA           (       ddos12.asm):00244                 LDX     #DosSignonMess-1        ; Print dos signon message
C0B2 BD90E5           (       ddos12.asm):00245                 JSR     >TextOutString  
C0B5 7E8371           (       ddos12.asm):00246                 JMP     >BasCmdMode             ; Jump to normal basic command mode
                      (       ddos12.asm):00247         
C0B8                  (       ddos12.asm):00248         DosReset   
C0B8 86D0             (       ddos12.asm):00249                 LDA     #WDCmdForceInt          ; Force WD2797 to interrupt & reset
C0BA B7FF40           (       ddos12.asm):00250                 STA     CmdReg
                      (       ddos12.asm):00251                 
                      (       ddos12.asm):00252                 ifdef   PGSFix
                      (       ddos12.asm):00253                 LDX     #DosD0Online            ; Clear drive online flags 
                      (       ddos12.asm):00254                 else
C0BD 8E0696           (       ddos12.asm):00255                 LDX     #DosD0Online-1          ; Clear drive online flags 
                      (       ddos12.asm):00256                 endc
                      (       ddos12.asm):00257                 
C0C0 6F84             (       ddos12.asm):00258                 CLR     ,X                      ; initialize drive info tables
C0C2 6F01             (       ddos12.asm):00259                 CLR     1,X
C0C4 6F02             (       ddos12.asm):00260                 CLR     2,X
C0C6 6F03             (       ddos12.asm):00261                 CLR     3,X
                      (       ddos12.asm):00262                 
C0C8 8E0621           (       ddos12.asm):00263                 LDX     #Drv0Details+DrvDetUseCnt       ; Clear drive in use counts
C0CB 6F84             (       ddos12.asm):00264                 CLR     ,X
C0CD 6F06             (       ddos12.asm):00265                 CLR     6,X
C0CF 6F0C             (       ddos12.asm):00266                 CLR     12,X
C0D1 6F8812           (       ddos12.asm):00267                 CLR     $12,X
                      (       ddos12.asm):00268                 
C0D4 0FF6             (       ddos12.asm):00269                 CLR     <DosIOInProgress        ; Flag to check for timeout
                      (       ddos12.asm):00270                 
C0D6 8E06AB           (       ddos12.asm):00271                 LDX     #DosDirSecStatus        ; Clear Dirctory status, FCBs etc
C0D9 6F80             (       ddos12.asm):00272         LC0D9   CLR     ,X+
C0DB 8C07F3           (       ddos12.asm):00273                 CMPX    #DosFCBEnd
C0DE 26F9             (       ddos12.asm):00274                 BNE     LC0D9
                      (       ddos12.asm):00275                 
C0E0 C604             (       ddos12.asm):00276                 LDB     #$04                    ; Count of buffers to process
C0E2 8E0634           (       ddos12.asm):00277                 LDX     #Buff1Details           ; Setup disk buffer initial values
C0E5 CE0800           (       ddos12.asm):00278                 LDU     #$0800                  ; addr of buffer
C0E8 6F02             (       ddos12.asm):00279         LC0E8   CLR     2,X
C0EA E704             (       ddos12.asm):00280                 STB     4,X
C0EC EF05             (       ddos12.asm):00281                 STU     5,X
C0EE 33C90100         (       ddos12.asm):00282                 LEAU    $0100,U                 ; Increment addr for next buffer
C0F2 3007             (       ddos12.asm):00283                 LEAX    7,X                     ; do next buffer
C0F4 5A               (       ddos12.asm):00284                 DECB                            ; done all ?
C0F5 26F1             (       ddos12.asm):00285                 BNE     LC0E8                   ; no : do next
C0F7 39               (       ddos12.asm):00286                 RTS
                      (       ddos12.asm):00287         
                      (       ddos12.asm):00288         ;
                      (       ddos12.asm):00289         ; The following code is quite clever, there are actually multiple code paths.
                      (       ddos12.asm):00290         ; This involves having a 2 byte instruction encoded as the oprand to a 3
                      (       ddos12.asm):00291         ; byte instruction eg :-
                      (       ddos12.asm):00292         ;
                      (       ddos12.asm):00293         ; L00FA CMPX    #$C605
                      (       ddos12.asm):00294         ;
                      (       ddos12.asm):00295         ; CMPX is one byte long, so a jump to L00DB, will execute the oprand to the
                      (       ddos12.asm):00296         ; CMPX, which decodes as LDB #$05 this saves a few bytes by not having LDB #xx,
                      (       ddos12.asm):00297         ; BRA label.
                      (       ddos12.asm):00298         ;
                      (       ddos12.asm):00299         ; There are several examples of this in the Dos ROM !
                      (       ddos12.asm):00300         ;
                      (       ddos12.asm):00301         
C0F8                  (       ddos12.asm):00302         DosDoReadAddr   
C0F8 C606             (       ddos12.asm):00303                 LDB     #DosFnReadAddr          ; Read address
C0FA 8C               (       ddos12.asm):00304                 FCB     Skip2   
                      (       ddos12.asm):00305         
C0FB                  (       ddos12.asm):00306         DosDoWriteTrack   
C0FB C605             (       ddos12.asm):00307                 LDB     #DosFnWriteTrack        ; Write track
C0FD 8C               (       ddos12.asm):00308                 FCB     Skip2   
                      (       ddos12.asm):00309         
C0FE                  (       ddos12.asm):00310         DosDoWriteSecN   
C0FE C604             (       ddos12.asm):00311                 LDB     #DosFnWriteSecN         ; Write sector no verify
C100 8C               (       ddos12.asm):00312                 FCB     Skip2           
                      (       ddos12.asm):00313         
C101                  (       ddos12.asm):00314         DosDoWriteSecV   
C101 C603             (       ddos12.asm):00315                 LDB     #DosFnWriteSecV         ; Write sector verify
C103 8C               (       ddos12.asm):00316                 FCB     Skip2           
                      (       ddos12.asm):00317         
C104                  (       ddos12.asm):00318         DosDoReadSec   
C104 C602             (       ddos12.asm):00319                 LDB     #DosFnReadSec           ; Read sector
                      (       ddos12.asm):00320         
C106                  (       ddos12.asm):00321         DosDoFuncinB   
C106 3402             (       ddos12.asm):00322                 PSHS    A
C108 327E             (       ddos12.asm):00323                 LEAS    -2,S                    ; Make room on stack
C10A 7F0600           (       ddos12.asm):00324                 CLR     Thrash                  ; clear work byte               
C10D 8603             (       ddos12.asm):00325         LC10D   LDA     #$03                    ; retry count ?
C10F EDE4             (       ddos12.asm):00326                 STD     ,S                      ; save on stack
                      (       ddos12.asm):00327         
C111 8D4F             (       ddos12.asm):00328         LC111   BSR     DosDoSeek               ; Try to seek to track
C113 2509             (       ddos12.asm):00329                 BCS     LC11E                   ; Error ?
                      (       ddos12.asm):00330                 
C115 E661             (       ddos12.asm):00331                 LDB     1,S                     ; No error, get dos op code
C117 D7EA             (       ddos12.asm):00332                 STB     <DosCommand             ; Save operation to perform
C119 BDC169           (       ddos12.asm):00333                 JSR     >DOSLowLevel
C11C 243C             (       ddos12.asm):00334                 BCC     LC15A                   ; No error
                      (       ddos12.asm):00335                 
C11E C184             (       ddos12.asm):00336         LC11E   CMPB    #ErrWP          ; Write protect ?, no point in retrying !
C120 2727             (       ddos12.asm):00337                 BEQ     LC149
                      (       ddos12.asm):00338                 
C122 6AE4             (       ddos12.asm):00339                 DEC     ,S                      ; Dec retry count
C124 2715             (       ddos12.asm):00340                 BEQ     LC13B                   ; Any retries left ?
C126 E6E4             (       ddos12.asm):00341                 LDB     ,S                      ; get retry count
C128 54               (       ddos12.asm):00342                 LSRB                            ; gety lsbit
C129 2408             (       ddos12.asm):00343                 BCC     LC133                   ; on even numbered retry, do recal
C12B 0CEC             (       ddos12.asm):00344                 INC     <DskTrackNo             ; step out a track
C12D 8D33             (       ddos12.asm):00345                 BSR     DosDoSeek
C12F 0AEC             (       ddos12.asm):00346                 DEC     <DskTrackNo             ; step back in when retrying 
C131 20DE             (       ddos12.asm):00347                 BRA     LC111
                      (       ddos12.asm):00348         
C133 96EC             (       ddos12.asm):00349         LC133   LDA     <DskTrackNo             ; Save Track no whilst doing restore
C135 8D2E             (       ddos12.asm):00350                 BSR     DosDoRestore            ; Restore & Recalibrate
C137 97EC             (       ddos12.asm):00351                 STA     <DskTrackNo             ; Put track no back
C139 20D6             (       ddos12.asm):00352                 BRA     LC111                   ; Try again
                      (       ddos12.asm):00353         
                      (       ddos12.asm):00354         ; We come here when all reties exhausted
C13B C180             (       ddos12.asm):00355         LC13B   CMPB    #ErrNR          ; Not ready ?
C13D 2618             (       ddos12.asm):00356                 BNE     LC157
                      (       ddos12.asm):00357         
C13F 7D0600           (       ddos12.asm):00358                 TST     DosAreaStart
C142 2613             (       ddos12.asm):00359                 BNE     LC157
                      (       ddos12.asm):00360         
C144 730600           (       ddos12.asm):00361                 COM     DosAreaStart
C147 200A             (       ddos12.asm):00362                 BRA     LC153
                      (       ddos12.asm):00363         
                      (       ddos12.asm):00364         ; Something to do with dir track ? Make sure same op done to both copies of Dir
C149 96EC             (       ddos12.asm):00365         LC149   LDA     <DskTrackNo             ; Get track number
C14B 8114             (       ddos12.asm):00366                 CMPA    #DirPrimary             ; Track 20 ?
C14D 2608             (       ddos12.asm):00367                 BNE     LC157                   ; no : error
C14F 8610             (       ddos12.asm):00368                 LDA     #DirBackup              ; set track to 16
C151 97EC             (       ddos12.asm):00369                 STA     <DskTrackNo
C153 E661             (       ddos12.asm):00370         LC153   LDB     1,S                     ; Get Dos op code
C155 20B6             (       ddos12.asm):00371                 BRA     LC10D                   ; So same to track 16
                      (       ddos12.asm):00372         
C157 1A01             (       ddos12.asm):00373         LC157   ORCC    #FlagCarry              ; Flag error
C159 21               (       ddos12.asm):00374                 FCB     Skip1                   ; opcocode for BRN
C15A 5F               (       ddos12.asm):00375         LC15A   CLRB                            ; Flag no error
C15B 3262             (       ddos12.asm):00376                 LEAS    2,S                     ; Drop bytes from stack
C15D 3582             (       ddos12.asm):00377                 PULS    A,PC                    ; restore & return
                      (       ddos12.asm):00378         
                      (       ddos12.asm):00379         ;
                      (       ddos12.asm):00380         ; Another LDB, enbeded in CMPX sequence....
                      (       ddos12.asm):00381         ; 
                      (       ddos12.asm):00382         
C15F                  (       ddos12.asm):00383         DosDoReadSec2
C15F C607             (       ddos12.asm):00384                 LDB     #DosFnReadSec2          ; Read sector 2 (just first 2 chars)
C161 8C               (       ddos12.asm):00385                 FCB     Skip2           
                      (       ddos12.asm):00386         
C162                  (       ddos12.asm):00387         DosDoSeek       
C162 C601             (       ddos12.asm):00388                 LDB     #DosFnSeek
C164 8C               (       ddos12.asm):00389                 FCB     Skip2                   ; Seek to a track
                      (       ddos12.asm):00390         
C165                  (       ddos12.asm):00391         DosDoRestore   
C165 C600             (       ddos12.asm):00392                 LDB     #DosFnRestore           ; Restore to track 0
C167 D7EA             (       ddos12.asm):00393                 STB     <DosCommand             ; save in hardware byte
                      (       ddos12.asm):00394         
                      (       ddos12.asm):00395         ;
                      (       ddos12.asm):00396         ; Disk I/O.
                      (       ddos12.asm):00397         ;
                      (       ddos12.asm):00398         ; This is the main Disk I/O entry point. 
                      (       ddos12.asm):00399         ; All registers are preserved except the condition codes and B on the
                      (       ddos12.asm):00400         ; return. (error code).
                      (       ddos12.asm):00401         ;
                      (       ddos12.asm):00402         ; Call :
                      (       ddos12.asm):00403         ;       DosDriveNo      = drive number
                      (       ddos12.asm):00404         ;       DskSectorNo     = sector number
                      (       ddos12.asm):00405         ;       DskTrackNo      = track number
                      (       ddos12.asm):00406         ;       DiskBuffPtr     = buffer pointer
                      (       ddos12.asm):00407         ;       DosCommand      = Dos function to execute (see below)
                      (       ddos12.asm):00408         ;
                      (       ddos12.asm):00409         ;               DosFnRestore    ($00), Restore to track 0
                      (       ddos12.asm):00410         ;               DosFnSeek       ($01), Seek to a track
                      (       ddos12.asm):00411         ;               DosFnReadSec    ($02), Read a sector
                      (       ddos12.asm):00412         ;               DosFnWriteSecV  ($03), Write a sector with verify
                      (       ddos12.asm):00413         ;               DosFnWriteSecN  ($04), Write a sector no verify
                      (       ddos12.asm):00414         ;               DosFnWriteTrack ($05), Write (format) track
                      (       ddos12.asm):00415         ;               DosFnReadAddr   ($06), Read address mark
                      (       ddos12.asm):00416         ;               DosFnReadSec2   ($07), Read first two bytes of a sector
                      (       ddos12.asm):00417         ;
                      (       ddos12.asm):00418         ; Exit conditions :
                      (       ddos12.asm):00419         ;       
                      (       ddos12.asm):00420         ;       DosDiskError    = WD2797 status register, or zero if no error.                  
                      (       ddos12.asm):00421         ;       B               = error code for basic or zero if no error.
                      (       ddos12.asm):00422         ;       CC.carry        = 0 if no error, 1 if error.
                      (       ddos12.asm):00423         ;
                      (       ddos12.asm):00424         
C169                  (       ddos12.asm):00425         DOSLowLevel   
C169 347B             (       ddos12.asm):00426                 PSHS    CC,A,DP,X,Y,U
C16B 1A50             (       ddos12.asm):00427                 ORCC    #(FlagIRQ+FlagFIRQ)     ; Disable interrupts    
C16D 66E4             (       ddos12.asm):00428                 ROR     ,S
C16F 0FF0             (       ddos12.asm):00429                 CLR     <DosDiskError           ; Flag no disk error
C171 96EA             (       ddos12.asm):00430                 LDA     <DosCommand             ; get HW byte
C173 8107             (       ddos12.asm):00431                 CMPA    #$07                    ; Valid op
C175 2302             (       ddos12.asm):00432                 BLS     LC179                   ; yes : do it !
C177 2008             (       ddos12.asm):00433                 BRA     LC181                   ; No: error
                      (       ddos12.asm):00434         
C179 BDC26E           (       ddos12.asm):00435         LC179   JSR     >ResetAndStartDrive
C17C 240E             (       ddos12.asm):00436                 BCC     LC18C                   ; Error ?
C17E C6FD             (       ddos12.asm):00437                 LDB     #$FD                    ; yes flag error
                      (       ddos12.asm):00438         
C180 8C               (       ddos12.asm):00439                 FCB     Skip2                   ; Andothe CMPX saving.....
                      (       ddos12.asm):00440         
C181 C6FC             (       ddos12.asm):00441         LC181   LDB     #$FC                    ; Set error code
C183 1A01             (       ddos12.asm):00442                 ORCC    #FlagCarry              ; and carry bit
C185 69E4             (       ddos12.asm):00443                 ROL     ,S
C187 D7F0             (       ddos12.asm):00444                 STB     <DosDiskError           ; Flag disk error
C189 1600A4           (       ddos12.asm):00445                 LBRA    LC230
                      (       ddos12.asm):00446         
C18C 8EFF01           (       ddos12.asm):00447         LC18C   LDX     #PIA0CRA                ; Point to PIA CR A             
C18F C634             (       ddos12.asm):00448                 LDB     #$34
C191 CEDFD2           (       ddos12.asm):00449                 LDU     #SetPIA
C194 1E35             (       ddos12.asm):00450                 EXG     U,PC                    ; Go Do it dunno why not jsr..rts :)
                      (       ddos12.asm):00451         
C196 CEDFD2           (       ddos12.asm):00452         LC196   LDU     #SetPIA
C199 1E35             (       ddos12.asm):00453                 EXG     U,PC                    ; Go Do it dunno why not jsr..rts :)
                      (       ddos12.asm):00454         
C19B 12               (       ddos12.asm):00455         LC19B   NOP
C19C C637             (       ddos12.asm):00456                 LDB     #$37                    ; enable FIRQ from FDC
C19E F7FF23           (       ddos12.asm):00457                 STB     PIACRB
                      (       ddos12.asm):00458                 
C1A1 8603             (       ddos12.asm):00459                 LDA     #$03
C1A3 3402             (       ddos12.asm):00460                 PSHS    A
                      (       ddos12.asm):00461                 
C1A5 96ED             (       ddos12.asm):00462                 LDA     <DskSectorNo            ; Get disk sector no
C1A7 8112             (       ddos12.asm):00463                 CMPA    #SectorsPerTrack        ; >$12, therefore on second side
C1A9 230A             (       ddos12.asm):00464                 BLS     LC1B5                   ; no: don't adjust
                      (       ddos12.asm):00465                 
C1AB 8012             (       ddos12.asm):00466                 SUBA    #SectorsPerTrack        ; Calculate sector number on second side
                      (       ddos12.asm):00467         
C1AD C602             (       ddos12.asm):00468                 LDB     #$02                    ; Flag as side 2 (Dragon WD2797 only)
C1AF FA0606           (       ddos12.asm):00469                 ORB     DosHWMaskFF40   
C1B2 F70606           (       ddos12.asm):00470                 STB     DosHWMaskFF40
                      (       ddos12.asm):00471         
C1B5 B7FF42           (       ddos12.asm):00472         LC1B5   STA     SecReg
C1B8 109E8A           (       ddos12.asm):00473         LC1B8   LDY     <DBZero
C1BB 9EEE             (       ddos12.asm):00474                 LDX     <DiskBuffPtr            ; Point to buffer
C1BD D6EA             (       ddos12.asm):00475                 LDB     <DosCommand             ; Get hardware byte (function code)
C1BF 58               (       ddos12.asm):00476                 ASLB                            ; Calculate offset in table
                      (       ddos12.asm):00477                 
C1C0 86FF             (       ddos12.asm):00478                 LDA     #$FF                    ; Set DP=$FF, to make IO quicker
C1C2 1F8B             (       ddos12.asm):00479                 TFR     A,DP
C1C4 CEDDD4           (       ddos12.asm):00480                 LDU     #DosFunctionTable       ; Point to function dispatch table
C1C7 ADD5             (       ddos12.asm):00481                 JSR     [B,U]                   ; Jump to function handler
                      (       ddos12.asm):00482                 
C1C9 97F0             (       ddos12.asm):00483                 STA     <DosDiskError           ; Save error code
C1CB 2402             (       ddos12.asm):00484                 BCC     LC1CF                   ; No error : check verify               
C1CD 202E             (       ddos12.asm):00485                 BRA     LC1FD
                      (       ddos12.asm):00486         
C1CF B40609           (       ddos12.asm):00487         LC1CF   ANDA    DosErrorMask            ; Mask out error bits we are not interested in
C1D2 97F0             (       ddos12.asm):00488                 STA     <DosDiskError           ; save errors for later use
C1D4 270E             (       ddos12.asm):00489                 BEQ     LC1E4
                      (       ddos12.asm):00490                 
C1D6 96EA             (       ddos12.asm):00491                 LDA     <DosCommand             ; Get operation code
C1D8 8107             (       ddos12.asm):00492                 CMPA    #DosFnReadSec2          ; ReadSec2 command ?            
C1DA 2704             (       ddos12.asm):00493                 BEQ     LC1E0                   ; yes
                      (       ddos12.asm):00494         
C1DC 6AE4             (       ddos12.asm):00495                 DEC     ,S                      ; Dec retry count
C1DE 26D8             (       ddos12.asm):00496                 BNE     LC1B8                   ; retry, if tries remaining
                      (       ddos12.asm):00497                 
C1E0 1A01             (       ddos12.asm):00498         LC1E0   ORCC    #FlagCarry              ; Flag error
C1E2 2019             (       ddos12.asm):00499                 BRA     LC1FD
                      (       ddos12.asm):00500         
C1E4 7D0609           (       ddos12.asm):00501         LC1E4   TST     DosErrorMask            ; is this write sector ?
C1E7 2A14             (       ddos12.asm):00502                 BPL     LC1FD                   ; no : jump ahead
                      (       ddos12.asm):00503                 
C1E9 96EC             (       ddos12.asm):00504                 LDA     <DskTrackNo             ; Get track number
C1EB 8114             (       ddos12.asm):00505                 CMPA    #DirPrimary             ; Primary Dir track ?
C1ED 270B             (       ddos12.asm):00506                 BEQ     LC1FA
                      (       ddos12.asm):00507         
C1EF 8110             (       ddos12.asm):00508                 CMPA    #DirBackup              ; Secondary dir track ?
C1F1 2707             (       ddos12.asm):00509                 BEQ     LC1FA
                      (       ddos12.asm):00510         
C1F3 7D0608           (       ddos12.asm):00511                 TST     DosVerifyFlag           ; should we verify?
C1F6 1CFE             (       ddos12.asm):00512                 ANDCC   #~(FlagCarry)           ; Flag no carry
C1F8 2A03             (       ddos12.asm):00513                 BPL     LC1FD                   ; no, skip ahead
                      (       ddos12.asm):00514                 
C1FA 17FF62           (       ddos12.asm):00515         LC1FA   LBSR    DosDoReadSec2           ; verify the write
C1FD 3261             (       ddos12.asm):00516         LC1FD   LEAS    1,S
C1FF 6964             (       ddos12.asm):00517                 ROL     4,S
                      (       ddos12.asm):00518                 
C201 8E069A           (       ddos12.asm):00519                 LDX     #DosD0Track-1           ; Point to drive track table
C204 D6EB             (       ddos12.asm):00520                 LDB     <DosDriveNo             ; Get last used drive
C206 3A               (       ddos12.asm):00521                 ABX                             ; get pointer to track for current drive
C207 B6FF41           (       ddos12.asm):00522                 LDA     TrkReg                  ; Get current track number from WD
C20A 91EC             (       ddos12.asm):00523                 CMPA    <DskTrackNo             ; Same as current track no ?
C20C 2711             (       ddos12.asm):00524                 BEQ     LC21F
                      (       ddos12.asm):00525                 
C20E F60609           (       ddos12.asm):00526                 LDB     DosErrorMask            ; is this a seek ?
C211 C119             (       ddos12.asm):00527                 CMPB    #$19
C213 260A             (       ddos12.asm):00528                 BNE     LC21F
                      (       ddos12.asm):00529         
C215 C6FF             (       ddos12.asm):00530                 LDB     #ErrSFF         ; Error code : no error
C217 D7F0             (       ddos12.asm):00531                 STB     <DosDiskError
C219 6664             (       ddos12.asm):00532                 ROR     4,S
C21B 1A01             (       ddos12.asm):00533                 ORCC    #FlagCarry              ; flag error
C21D 6964             (       ddos12.asm):00534                 ROL     4,S
                      (       ddos12.asm):00535                 
C21F A784             (       ddos12.asm):00536         LC21F   STA     ,X                      ; update track table
C221 CEDFE3           (       ddos12.asm):00537                 LDU     #ResetPIA               ; address to call
C224 1E35             (       ddos12.asm):00538                 EXG     U,PC                    ; call without using stack      
                      (       ddos12.asm):00539         
C226 CEDFE6           (       ddos12.asm):00540         LC226   LDU     #ResetPIA2              ; address to call
C229 1E35             (       ddos12.asm):00541                 EXG     U,PC                    ; call without using stack
                      (       ddos12.asm):00542         
C22B 21F7             (       ddos12.asm):00543                 BRN     $C224
                      (       ddos12.asm):00544         
C22D 7F0606           (       ddos12.asm):00545                 CLR     DosHWMaskFF40           ; Clear hardware mask
C230 5F               (       ddos12.asm):00546         LC230   CLRB                            ; Flag no error
C231 357B             (       ddos12.asm):00547                 PULS    CC,A,DP,X,Y,U           ; Restore regs
C233 2501             (       ddos12.asm):00548                 BCS     LC236                   ; error : skip
C235 39               (       ddos12.asm):00549         LC235   RTS
                      (       ddos12.asm):00550         
C236 D6F0             (       ddos12.asm):00551         LC236   LDB     <DosDiskError           ; get last error code
C238 27FB             (       ddos12.asm):00552                 BEQ     LC235                   ; none : return
C23A 2A20             (       ddos12.asm):00553                 BPL     LC25C
                      (       ddos12.asm):00554         ;
                      (       ddos12.asm):00555         ; Work out the dragon error code that coresponds to the hardware
                      (       ddos12.asm):00556         ; error reported by WD.
                      (       ddos12.asm):00557         ;        
C23C C1FC             (       ddos12.asm):00558                 CMPB    #$FC
C23E 2604             (       ddos12.asm):00559                 BNE     LC244
                      (       ddos12.asm):00560          
C240 C6A4             (       ddos12.asm):00561                 LDB     #ErrPR          ; parameter
C242 2027             (       ddos12.asm):00562                 BRA     LC26B
                      (       ddos12.asm):00563         
C244 C1FD             (       ddos12.asm):00564         LC244   CMPB    #$FD
C246 2604             (       ddos12.asm):00565                 BNE     LC24C
                      (       ddos12.asm):00566         
C248 C628             (       ddos12.asm):00567                 LDB     #BErrDN                 ; Device Number 
C24A 201F             (       ddos12.asm):00568                 BRA     LC26B
                      (       ddos12.asm):00569         
C24C C1FE             (       ddos12.asm):00570         LC24C   CMPB    #$FE
C24E 2604             (       ddos12.asm):00571                 BNE     LC254
                      (       ddos12.asm):00572                 
C250 C680             (       ddos12.asm):00573                 LDB     #ErrNR          ; not ready
C252 2017             (       ddos12.asm):00574                 BRA     LC26B
                      (       ddos12.asm):00575         
C254 C1FF             (       ddos12.asm):00576         LC254   CMPB    #$FF
C256 2611             (       ddos12.asm):00577                 BNE     LC269
                      (       ddos12.asm):00578                 
C258 C682             (       ddos12.asm):00579                 LDB     #ErrSK          ; seek
C25A 200F             (       ddos12.asm):00580                 BRA     LC26B
                      (       ddos12.asm):00581         
C25C 1F98             (       ddos12.asm):00582         LC25C   TFR     B,A
C25E C682             (       ddos12.asm):00583                 LDB     #$82
C260 49               (       ddos12.asm):00584                 ROLA
C261 CB02             (       ddos12.asm):00585         LC261   ADDB    #$02
C263 49               (       ddos12.asm):00586                 ROLA
C264 4D               (       ddos12.asm):00587                 TSTA
C265 2504             (       ddos12.asm):00588                 BCS     LC26B
C267 26F8             (       ddos12.asm):00589                 BNE     LC261
                      (       ddos12.asm):00590                 
C269 C6A6             (       ddos12.asm):00591         LC269   LDB     #ErrUD          ; undefined
C26B 1A01             (       ddos12.asm):00592         LC26B   ORCC    #FlagCarry
C26D 39               (       ddos12.asm):00593                 RTS
                      (       ddos12.asm):00594         
                      (       ddos12.asm):00595         ;
                      (       ddos12.asm):00596         ; Reset controler chip, and spin up drive.
                      (       ddos12.asm):00597         ;
                      (       ddos12.asm):00598         
C26E                  (       ddos12.asm):00599         ResetAndStartDrive   
C26E 86D0             (       ddos12.asm):00600                 LDA     #WDCmdForceInt          ; Force interrupt
C270 B7FF40           (       ddos12.asm):00601                 STA     CmdReg
C273 96EB             (       ddos12.asm):00602                 LDA     <DosDriveNo             ; Get last active drive no
C275 2705             (       ddos12.asm):00603                 BEQ     LC27C
                      (       ddos12.asm):00604                 
C277 4A               (       ddos12.asm):00605                 DECA                            ; Make hw drive no 0..3
C278 8103             (       ddos12.asm):00606                 CMPA    #$03                    ; Drive valid ?
C27A 2303             (       ddos12.asm):00607                 BLS     LC27F
C27C 1A01             (       ddos12.asm):00608         LC27C   ORCC    #FlagCarry              ; Flag error
C27E                  (       ddos12.asm):00609         DosHookRetDevParam   
C27E 39               (       ddos12.asm):00610                 RTS
                      (       ddos12.asm):00611         
C27F 8A24             (       ddos12.asm):00612         LC27F   ORA     #NMIEn+MotorOn          ; Mask in nmi enable & Motor on bits
C281 3402             (       ddos12.asm):00613                 PSHS    A
C283 B60607           (       ddos12.asm):00614                 LDA     DosHWMaskFF48           ; Get HW byte mask
                      (       ddos12.asm):00615         
C286 84FC             (       ddos12.asm):00616                 ANDA    #~DriveMask             ; Mask out drive bits   
C288 AAE0             (       ddos12.asm):00617                 ORA     ,S+                     ; Mask in drive bits 
                      (       ddos12.asm):00618                         
                      (       ddos12.asm):00619                 ifdef   DragonAlpha
                      (       ddos12.asm):00620                 LBSR    AlphaDskCtl             ; Write to control reg
                      (       ddos12.asm):00621                 ELSE
C28A B7FF48           (       ddos12.asm):00622                 STA     DskCtl                  ; Write to control reg
                      (       ddos12.asm):00623                 ENDc
                      (       ddos12.asm):00624                         
C28D B70607           (       ddos12.asm):00625                 STA     DosHWMaskFF48           ; Resave hardware mask
C290 8E069A           (       ddos12.asm):00626                 LDX     #DosD0Track-1           ; Point to current track table
C293 96EB             (       ddos12.asm):00627                 LDA     <DosDriveNo             ; Get active drive
C295 A686             (       ddos12.asm):00628                 LDA     A,X                     ; Get drive current track
C297 B7FF41           (       ddos12.asm):00629                 STA     TrkReg                  ; Write to controler
C29A 86D2             (       ddos12.asm):00630                 LDA     #$D2                    ; set timeout           
C29C B70605           (       ddos12.asm):00631                 STA     DosTimeout
C29F 5F               (       ddos12.asm):00632                 CLRB                            ; no error ?
C2A0 39               (       ddos12.asm):00633                 RTS
                      (       ddos12.asm):00634         
                      (       ddos12.asm):00635         ;
                      (       ddos12.asm):00636         ; Dos function 0 restore
                      (       ddos12.asm):00637         ;
                      (       ddos12.asm):00638         
C2A1                  (       ddos12.asm):00639         DosFunctionRestore   
C2A1 4F               (       ddos12.asm):00640                 CLRA                            ; zero track no
C2A2 B700EC           (       ddos12.asm):00641                 STA     >DskTrackNo             ; Save Track number
C2A5 2012             (       ddos12.asm):00642                 BRA     LC2B9
                      (       ddos12.asm):00643         
                      (       ddos12.asm):00644         ;
                      (       ddos12.asm):00645         ; Dos function 1 seek
                      (       ddos12.asm):00646         ; 
                      (       ddos12.asm):00647         
C2A7                  (       ddos12.asm):00648         DosFunctionSeek
C2A7 B600EC           (       ddos12.asm):00649                 LDA     >DskTrackNo             ; Get current track no
C2AA 9141             (       ddos12.asm):00650                 CMPA    DPTrkReg                ; Are we over it ?
C2AC 2607             (       ddos12.asm):00651                 BNE     SeekTrackinA            ; no : seek to it
C2AE 4F               (       ddos12.asm):00652                 CLRA
C2AF B70609           (       ddos12.asm):00653                 STA     DosErrorMask            ; Turn off verify
C2B2 1F8B             (       ddos12.asm):00654                 TFR     A,DP                    ; Reset DP
C2B4 39               (       ddos12.asm):00655                 RTS
                      (       ddos12.asm):00656         
                      (       ddos12.asm):00657         ;
                      (       ddos12.asm):00658         ; Seek to a track, routine will exit either with an error, or via NMI.
                      (       ddos12.asm):00659         ; On entry A contains track to seek to.
                      (       ddos12.asm):00660         ;
                      (       ddos12.asm):00661         
C2B5                  (       ddos12.asm):00662         SeekTrackinA
C2B5 9743             (       ddos12.asm):00663                 STA     <DPDataReg              ; <Eval43 ;DataReg              
C2B7 8610             (       ddos12.asm):00664                 LDA     #WDCmdSeek              ; Seek command
                      (       ddos12.asm):00665                 
C2B9 C619             (       ddos12.asm):00666         LC2B9   LDB     #$19
C2BB F70609           (       ddos12.asm):00667                 STB     DosErrorMask
C2BE 8E069E           (       ddos12.asm):00668                 LDX     #DosD0StepRate-1        ; Point to step rate table
C2C1 F600EB           (       ddos12.asm):00669                 LDB     >DosDriveNo             ; Get active drive
C2C4 AA85             (       ddos12.asm):00670                 ORA     B,X                     ; Mask in that drive's step rate
C2C6 9740             (       ddos12.asm):00671                 STA     DPCmdReg                ; save in command reg
C2C8 3D               (       ddos12.asm):00672         LC2C8   MUL                             ; burn up CPU time waiting....
C2C9 3D               (       ddos12.asm):00673                 MUL                             ; NMI will exit this loop
C2CA 313F             (       ddos12.asm):00674                 LEAY    -1,Y                    ; decrement timeout counter
C2CC 26FA             (       ddos12.asm):00675                 BNE     LC2C8                   ; count exhausted ? : no keep going
C2CE 204B             (       ddos12.asm):00676                 BRA     DosHWError                      ; yes : error
                      (       ddos12.asm):00677         
                      (       ddos12.asm):00678         ;
                      (       ddos12.asm):00679         ; Dos function 6 : Read address mark (Dragon)
                      (       ddos12.asm):00680         ; 
                      (       ddos12.asm):00681         
C2D0                  (       ddos12.asm):00682         DosFunctionReadAddr   
C2D0 86C0             (       ddos12.asm):00683                 LDA     #WDCmdReadAddr          ; Read address mark
C2D2 8C               (       ddos12.asm):00684                 FCB     Skip2                   ; CMPX again :)
                      (       ddos12.asm):00685         ;
                      (       ddos12.asm):00686         ; Dos function 2 : Read sector (Dragon/Cumana)
                      (       ddos12.asm):00687         ; 
C2D3                  (       ddos12.asm):00688         DosFunctionReadSec
C2D3 8688             (       ddos12.asm):00689                 LDA     #WDCmdReadSec           ; Read a sector
C2D5 C63F             (       ddos12.asm):00690                 LDB     #WDDefErrMask           ; set error mask
C2D7 F70609           (       ddos12.asm):00691                 STB     DosErrorMask
                      (       ddos12.asm):00692         
C2DA C605             (       ddos12.asm):00693                 LDB     #$05                    ; try 5x$FFFF for timeout
C2DC BA0606           (       ddos12.asm):00694                 ORA     DosHWMaskFF40           ; Mask in side etc
C2DF 9740             (       ddos12.asm):00695                 STA     DPCmdReg
C2E1                  (       ddos12.asm):00696         LC2E1   
C2E1 9623             (       ddos12.asm):00697                 LDA     DPPIACRB                ; Check for INT from WD
C2E3 2B0E             (       ddos12.asm):00698                 BMI     LC2F3                   ; yes : start reading bytes
C2E5 313F             (       ddos12.asm):00699                 LEAY    -1,Y                    ; decrement timeout count
C2E7 26F8             (       ddos12.asm):00700                 BNE     LC2E1                   ; check for int again, if no timeout
                      (       ddos12.asm):00701                 
C2E9 9622             (       ddos12.asm):00702                 LDA     DPPIADB
                      (       ddos12.asm):00703                 ifdef   PGSFix
                      (       ddos12.asm):00704                 BRN     LC2F2
                      (       ddos12.asm):00705                 else
C2EB 2B05             (       ddos12.asm):00706                 BMI     LC2F2
                      (       ddos12.asm):00707                 endc
C2ED 5A               (       ddos12.asm):00708                 DECB                            ; decrement retry wait count
C2EE 26F1             (       ddos12.asm):00709                 BNE     LC2E1                   ; count=0 ?, no continue waiting
C2F0 2029             (       ddos12.asm):00710                 BRA     DosHWError              ; yes : error and exit
                      (       ddos12.asm):00711         
                      (       ddos12.asm):00712         ;
                      (       ddos12.asm):00713         ; Read sector/address mark loop, exits with NMI.
                      (       ddos12.asm):00714         ;
                      (       ddos12.asm):00715         
C2F2 13               (       ddos12.asm):00716         LC2F2   SYNC
C2F3 9643             (       ddos12.asm):00717         LC2F3   LDA     DPDataReg               ; read byte from WD
C2F5 D622             (       ddos12.asm):00718                 LDB     DPPIADB                 ; clear interrupt
C2F7 A780             (       ddos12.asm):00719                 STA     ,X+                     ; save in buffer
C2F9 20F7             (       ddos12.asm):00720                 BRA     LC2F2                   ; do next byte
                      (       ddos12.asm):00721         
                      (       ddos12.asm):00722         ;
                      (       ddos12.asm):00723         ; Dos function 7 read first two bytes of a sector, used by BOOT command.
                      (       ddos12.asm):00724         ;
                      (       ddos12.asm):00725         
C2FB                  (       ddos12.asm):00726         DosFunctionReadSec2   
C2FB 8E004F           (       ddos12.asm):00727                 LDX     #$004F                  
C2FE 863F             (       ddos12.asm):00728                 LDA     #WDDefErrMask           ; Set error mask
C300 B70609           (       ddos12.asm):00729                 STA     DosErrorMask
                      (       ddos12.asm):00730         
                      (       ddos12.asm):00731         ;
                      (       ddos12.asm):00732         ; Code to wait for DRQ when using Dragon/Cumana controlers.
                      (       ddos12.asm):00733         ;
C303 C605             (       ddos12.asm):00734                 LDB     #$05                    ; Wait 5x$FFFF 
C305 8688             (       ddos12.asm):00735                 LDA     #WDCmdReadSec           ; Read sector command
C307 BA0606           (       ddos12.asm):00736                 ORA     DosHWMaskFF40           ; mask in heads etc
C30A 9740             (       ddos12.asm):00737                 STA     DPCmdReg                ; write it to WD
C30C                  (       ddos12.asm):00738         LC30C   
C30C 9623             (       ddos12.asm):00739                 LDA     DPPIACRB                ; Check for Int from WD
C30E 2B17             (       ddos12.asm):00740                 BMI     LC327                   ; yes : start reading
C310 313F             (       ddos12.asm):00741                 LEAY    -1,Y                    ; decrement timeout
C312 26F8             (       ddos12.asm):00742                 BNE     LC30C                   ; check again
C314 9622             (       ddos12.asm):00743                 LDA     DPPIADB                 ; try clearing int
                      (       ddos12.asm):00744                 
                      (       ddos12.asm):00745                 ifdef   PGSFix
                      (       ddos12.asm):00746                 BRN     LC327
                      (       ddos12.asm):00747                 else
C316 2B0F             (       ddos12.asm):00748                 BMI     LC327
                      (       ddos12.asm):00749                 endc
                      (       ddos12.asm):00750                 
C318 5A               (       ddos12.asm):00751                 DECB                            ; decrement outer count
C319 26F1             (       ddos12.asm):00752                 BNE     LC30C
                      (       ddos12.asm):00753         
C31B                  (       ddos12.asm):00754         DosHWError   
C31B 86D0             (       ddos12.asm):00755                 LDA     #WDCmdForceInt          ; Force the WD to abort
C31D 9740             (       ddos12.asm):00756                 STA     DPCmdReg
C31F 4F               (       ddos12.asm):00757                 CLRA                            ; Reset DP to page 0
C320 1F8B             (       ddos12.asm):00758                 TFR     A,DP
C322 86FE             (       ddos12.asm):00759                 LDA     #$FE                    ; return error
C324 1A01             (       ddos12.asm):00760                 ORCC    #FlagCarry
C326 39               (       ddos12.asm):00761                 RTS
                      (       ddos12.asm):00762         
                      (       ddos12.asm):00763         ;
                      (       ddos12.asm):00764         ; Read data from WD, as normal exited with NMI
                      (       ddos12.asm):00765         ;
                      (       ddos12.asm):00766         ; Read bytes code when using Dragon/Cumana controlers.
                      (       ddos12.asm):00767         ;
                      (       ddos12.asm):00768         
C327 9643             (       ddos12.asm):00769         LC327   LDA     DPDataReg               ; read byte from WD
C329 0D22             (       ddos12.asm):00770                 TST     DPPIADB                 ; clear interrupt
C32B A780             (       ddos12.asm):00771                 STA     ,X+                     ; save in memory
                      (       ddos12.asm):00772                 
C32D 13               (       ddos12.asm):00773                 SYNC                            ; wait for next
                      (       ddos12.asm):00774                 
C32E 9643             (       ddos12.asm):00775                 LDA     DPDataReg               ; get next byte
C330 0D22             (       ddos12.asm):00776                 TST     DPPIADB                 ; clear interrupt
C332 A784             (       ddos12.asm):00777                 STA     ,X                      ; save byte
                      (       ddos12.asm):00778         
C334 13               (       ddos12.asm):00779         LC334   SYNC
C335 9643             (       ddos12.asm):00780                 LDA     DPDataReg               ; read byte
C337 0D22             (       ddos12.asm):00781                 TST     DPPIADB                 ; clear interrupt
C339 20F9             (       ddos12.asm):00782                 BRA     LC334
                      (       ddos12.asm):00783         
                      (       ddos12.asm):00784         ;
                      (       ddos12.asm):00785         ; Dos function 4
                      (       ddos12.asm):00786         ;
                      (       ddos12.asm):00787         
C33B                  (       ddos12.asm):00788         DosFunctionWriteSec2
C33B 865F             (       ddos12.asm):00789                 LDA     #WDErrMask5F            ; set error mask
C33D 8C               (       ddos12.asm):00790                 FCB     Skip2
                      (       ddos12.asm):00791         
                      (       ddos12.asm):00792         ;
                      (       ddos12.asm):00793         ; Dos function 3
                      (       ddos12.asm):00794         ;
                      (       ddos12.asm):00795         
C33E                  (       ddos12.asm):00796         DosFunctionWriteSec
C33E 86DF             (       ddos12.asm):00797                 LDA     #WDErrMaskDF            ; set error mask
C340 B70609           (       ddos12.asm):00798                 STA     DosErrorMask
C343 8D3D             (       ddos12.asm):00799                 BSR     DosSetPrecomp           ; Setup write precomp
                      (       ddos12.asm):00800         
                      (       ddos12.asm):00801         ;
                      (       ddos12.asm):00802         ; Write sector for Dragon/Cumana controlers.
                      (       ddos12.asm):00803         ;
C345 86A8             (       ddos12.asm):00804                 LDA     #WDCmdWriteSec          ; Write sector
C347 BA0606           (       ddos12.asm):00805                 ORA     DosHWMaskFF40           ; Mask in side etc
C34A 9740             (       ddos12.asm):00806                 STA     DPCmdReg                ; write to WD
                      (       ddos12.asm):00807         
C34C A680             (       ddos12.asm):00808                 LDA     ,X+                     ; fetch first byte to write
C34E                  (       ddos12.asm):00809         LC34E   
C34E D623             (       ddos12.asm):00810                 LDB     DPPIACRB                ; Int from WD ?
C350 2B09             (       ddos12.asm):00811                 BMI     LC35B                   ; yes : start writing
                      (       ddos12.asm):00812                 
C352 313F             (       ddos12.asm):00813                 LEAY    -1,Y                    ; decrement timeout
C354 26F8             (       ddos12.asm):00814                 BNE     LC34E                   ; if not timed out continue waiting
C356 20C3             (       ddos12.asm):00815                 BRA     DosHWError              ; timout, abort, and return error
                      (       ddos12.asm):00816         
                      (       ddos12.asm):00817         ; Write sector loop, NMI breaks out of here
                      (       ddos12.asm):00818         
C358 A680             (       ddos12.asm):00819         LC358   LDA     ,X+                     ; get byte to write
C35A 13               (       ddos12.asm):00820                 SYNC                            ; wait for WD
                      (       ddos12.asm):00821                 
C35B 9743             (       ddos12.asm):00822         LC35B   STA     DPDataReg               ; write byte to WD
C35D 9622             (       ddos12.asm):00823                 LDA     DPPIADB                 ; clear interrupt
C35F 20F7             (       ddos12.asm):00824                 BRA     LC358
                      (       ddos12.asm):00825         
                      (       ddos12.asm):00826         ;
                      (       ddos12.asm):00827         ; Dos function 5 write track.
                      (       ddos12.asm):00828         ;
                      (       ddos12.asm):00829         ; Will return WTErr if N.F.G.
                      (       ddos12.asm):00830         ;
                      (       ddos12.asm):00831         ; The format of the write buffer is somewhat strange for this routine.
                      (       ddos12.asm):00832         ; The reason for this is so that we can format a diskette without hosing 
                      (       ddos12.asm):00833         ; the poor user's basic program.
                      (       ddos12.asm):00834         ; The method of run length coding only requires $22B bytes instead of 
                      (       ddos12.asm):00835         ; the normale $0000 bytes.
                      (       ddos12.asm):00836         ;
                      (       ddos12.asm):00837         
C361                  (       ddos12.asm):00838         DosFunctionWriteTrack   
C361 8647             (       ddos12.asm):00839                 LDA     #WDErrMaskFormat        ; set error mask        
C363 B70609           (       ddos12.asm):00840                 STA     DosErrorMask
C366 8D1A             (       ddos12.asm):00841                 BSR     DosSetPrecomp           ; Set write precomp
                      (       ddos12.asm):00842         
C368 86F4             (       ddos12.asm):00843                 LDA     #WDCmdWriteTrack        ; Write (format) track                  
C36A BA0606           (       ddos12.asm):00844                 ORA     DosHWMaskFF40           ; Mask in head etc
C36D 9740             (       ddos12.asm):00845                 STA     DPCmdReg
                      (       ddos12.asm):00846                 
C36F EC81             (       ddos12.asm):00847         LC36F   LDD     ,X++                    ; Get bytes to write A=count, B=byte
C371 13               (       ddos12.asm):00848         LC371   SYNC                            ; Wait for WD
                      (       ddos12.asm):00849         
C372 D743             (       ddos12.asm):00850                 STB     DPDataReg               ; Write a byte on track
C374 9122             (       ddos12.asm):00851                 CMPA    DPPIADB                 ; Clear interrupt
C376 4A               (       ddos12.asm):00852                 DECA                            ; decrement byte count
C377 26F8             (       ddos12.asm):00853                 BNE     LC371                   ; continue until count=0
                      (       ddos12.asm):00854         
C379 A680             (       ddos12.asm):00855                 LDA     ,X+                     ; get next 
C37B 13               (       ddos12.asm):00856                 SYNC
                      (       ddos12.asm):00857                 
C37C 9743             (       ddos12.asm):00858                 STA     DPDataReg               ; write to wd
C37E 9122             (       ddos12.asm):00859                 CMPA    DPPIADB                 ; Clear int
C380 20ED             (       ddos12.asm):00860                 BRA     LC36F
                      (       ddos12.asm):00861         
                      (       ddos12.asm):00862         ;
                      (       ddos12.asm):00863         ; Set write precompensation based on track
                      (       ddos12.asm):00864         ;
                      (       ddos12.asm):00865         
C382                  (       ddos12.asm):00866         DosSetPrecomp
C382 9641             (       ddos12.asm):00867                 LDA     DPTrkReg                ; Get track 
C384 8110             (       ddos12.asm):00868                 CMPA    #TrackPrecomp           ; track < 16
C386 2307             (       ddos12.asm):00869                 BLS     LC38F                   ; no : no write precomp
                      (       ddos12.asm):00870                 
C388 B60607           (       ddos12.asm):00871                 LDA     DosHWMaskFF48           ; Enable precomp
C38B 8A10             (       ddos12.asm):00872                 ORA     #WPCEn
C38D 2005             (       ddos12.asm):00873                 BRA     LC394
                      (       ddos12.asm):00874         
C38F B60607           (       ddos12.asm):00875         LC38F   LDA     DosHWMaskFF48           ; Turn off precomp
C392 84EF             (       ddos12.asm):00876                 ANDA    #~WPCEn ;#$EF
C394                  (       ddos12.asm):00877         LC394 
                      (       ddos12.asm):00878                 ifdef   DragonAlpha
                      (       ddos12.asm):00879                 LBRA    AlphaDskCtl             ; Write control reg
                      (       ddos12.asm):00880                 ELSE
C394 9748             (       ddos12.asm):00881                 STA     DPDskCtl                ; Write control reg
C396 39               (       ddos12.asm):00882                 RTS
                      (       ddos12.asm):00883                 ENDC
                      (       ddos12.asm):00884         
                      (       ddos12.asm):00885         ;
                      (       ddos12.asm):00886         ; Dskinit dispatch routine
                      (       ddos12.asm):00887         ;
                      (       ddos12.asm):00888         ; Syntax :
                      (       ddos12.asm):00889         ;       DSKINIT                         (default drive,sides,tracks)
                      (       ddos12.asm):00890         ;       DSKINIT drive                   (specified drive, default sides,tracks) 
                      (       ddos12.asm):00891         ;       DSKINIT drive,sides             (specified drive,sides default tracks) 
                      (       ddos12.asm):00892         ;       DSKINIT drive,sides,tracks      (specified drive,sides,tracks)
                      (       ddos12.asm):00893         ;
                      (       ddos12.asm):00894                         
C397                  (       ddos12.asm):00895         CmdDskInit   
C397 2723             (       ddos12.asm):00896                 BEQ     LC3BC                   ; No parameters : use defaults
C399 BDC68F           (       ddos12.asm):00897                 JSR     >GetDriveNoInB          ; Get drive no
C39C D7EB             (       ddos12.asm):00898                 STB     <DosDriveNo             ; save it
C39E BDC516           (       ddos12.asm):00899                 JSR     >GetCommaThen8Bit       ; Get comma, and then no of sides
C3A1 271E             (       ddos12.asm):00900                 BEQ     LC3C1                   ; Error, use default sides & tracks
                      (       ddos12.asm):00901                 
C3A3 5A               (       ddos12.asm):00902                 DECB                            ; Convert sides to zero base
C3A4 C101             (       ddos12.asm):00903                 CMPB    #$01                    ; > 1 sides specified : error & exit
C3A6 2211             (       ddos12.asm):00904                 BHI     LC3B9                   ; Error : use default tracks
                      (       ddos12.asm):00905                 
C3A8 D7F4             (       ddos12.asm):00906                 STB     <DosRecLenFlag          ; Save sides
C3AA BDC516           (       ddos12.asm):00907                 JSR     >GetCommaThen8Bit       ; Get comman, then tracks
C3AD 2714             (       ddos12.asm):00908                 BEQ     LC3C3                   ; Error : use default tracks
                      (       ddos12.asm):00909                 
C3AF C128             (       ddos12.asm):00910                 CMPB    #$28                    ; 40 tracks ?
C3B1 2712             (       ddos12.asm):00911                 BEQ     LC3C5                   ; Yes skip on
                      (       ddos12.asm):00912                 
C3B3 00F4             (       ddos12.asm):00913                 NEG     <DosRecLenFlag
C3B5 C150             (       ddos12.asm):00914                 CMPB    #$50                    ; 80 tracks ?
C3B7 270C             (       ddos12.asm):00915                 BEQ     LC3C5                   ; yes, skip on
C3B9 7EC69C           (       ddos12.asm):00916         LC3B9   JMP     >DosPRError
                      (       ddos12.asm):00917         
                      (       ddos12.asm):00918         ;
                      (       ddos12.asm):00919         ; Set defaults for format : disk=1,sides=1,tracks=40
                      (       ddos12.asm):00920         ;
                      (       ddos12.asm):00921         
C3BC F6060A           (       ddos12.asm):00922         LC3BC   LDB     DosDefDriveNo           ; use default drive
C3BF D7EB             (       ddos12.asm):00923                 STB     <DosDriveNo             ; save in last used
C3C1 0FF4             (       ddos12.asm):00924         LC3C1   CLR     <DosRecLenFlag          
C3C3 C628             (       ddos12.asm):00925         LC3C3   LDB     #FmtDefTracks           ; no of tracks to format by default
C3C5 D7F2             (       ddos12.asm):00926         LC3C5   STB     <DosDSKINITraks
                      (       ddos12.asm):00927           
                      (       ddos12.asm):00928         ;
                      (       ddos12.asm):00929         ; <DosDSKINITraks = tracks to format
                      (       ddos12.asm):00930         ; <DosRecLenFlag  = sides-1 so singlesided = 0, double sided = 1
                      (       ddos12.asm):00931         ;
                      (       ddos12.asm):00932               
C3C7 BDD6FB           (       ddos12.asm):00933                 JSR     >DosCloseAllFiles       ; close all files error if can't
C3CA 10260088         (       ddos12.asm):00934                 LBNE    DosJmpToSysError
                      (       ddos12.asm):00935                 
C3CE 8E0800           (       ddos12.asm):00936                 LDX     #DosDiskBuffBase        ; Point to the buffer base
C3D1 9FEE             (       ddos12.asm):00937                 STX     <DiskBuffPtr
C3D3 BDC165           (       ddos12.asm):00938                 JSR     >DosDoRestore           ; Restore to track 0
C3D6 1026007C         (       ddos12.asm):00939                 LBNE    DosJmpToSysError        ; error : exit
                      (       ddos12.asm):00940                 
C3DA 8601             (       ddos12.asm):00941                 LDA     #$01                    ; start at sector 1
C3DC 97ED             (       ddos12.asm):00942                 STA     <DskSectorNo            
C3DE BDC15F           (       ddos12.asm):00943                 JSR     >DosDoReadSec2          ; try reading it
C3E1 C180             (       ddos12.asm):00944                 CMPB    #$80                    
C3E3 2771             (       ddos12.asm):00945                 BEQ     DosJmpToSysError
                      (       ddos12.asm):00946                 
C3E5 0FF3             (       ddos12.asm):00947         LC3E5   CLR     <DosDSKINIHead          ; do head 0
C3E7 0FED             (       ddos12.asm):00948                 CLR     <DskSectorNo            ; start at sector 0
                      (       ddos12.asm):00949                 
C3E9 BDC4E5           (       ddos12.asm):00950                 JSR     >SetupTrackLayout       ; setup track layout in ram
C3EC BDC0FB           (       ddos12.asm):00951                 JSR     >DosDoWriteTrack        ; write the track
C3EF 2565             (       ddos12.asm):00952                 BCS     DosJmpToSysError        ; error : exit
                      (       ddos12.asm):00953                 
C3F1 0DF4             (       ddos12.asm):00954                 TST     <DosRecLenFlag          ; is this a double sided disk ? 
C3F3 270F             (       ddos12.asm):00955                 BEQ     LC404                   ; nope skip
C3F5 8601             (       ddos12.asm):00956                 LDA     #$01                    ; do side 1
C3F7 97F3             (       ddos12.asm):00957                 STA     <DosDSKINIHead
C3F9 40               (       ddos12.asm):00958                 NEGA
C3FA 97ED             (       ddos12.asm):00959                 STA     <DskSectorNo
                      (       ddos12.asm):00960         
C3FC BDC4E5           (       ddos12.asm):00961                 JSR     >SetupTrackLayout       ; setup track layout in ram
C3FF BDC0FB           (       ddos12.asm):00962                 JSR     >DosDoWriteTrack        ; write the track
C402 2552             (       ddos12.asm):00963                 BCS     DosJmpToSysError        ; error : exit
                      (       ddos12.asm):00964         
C404 0CEC             (       ddos12.asm):00965         LC404   INC     <DskTrackNo             ; increment track 
C406 96EC             (       ddos12.asm):00966                 LDA     <DskTrackNo             
C408 91F2             (       ddos12.asm):00967                 CMPA    <DosDSKINITraks         ; have we done all yet ?
C40A 25D9             (       ddos12.asm):00968                 BCS     LC3E5                   ; nope do next track
                      (       ddos12.asm):00969                 
C40C BDC165           (       ddos12.asm):00970                 JSR     >DosDoRestore           ; finished formatting, restore to track 0
C40F 2545             (       ddos12.asm):00971                 BCS     DosJmpToSysError
                      (       ddos12.asm):00972                 
C411 BDC162           (       ddos12.asm):00973         LC411   JSR     >DosDoSeek              ; seek to track 
C414 2540             (       ddos12.asm):00974                 BCS     DosJmpToSysError        ; error : exit
                      (       ddos12.asm):00975                 
C416 4F               (       ddos12.asm):00976                 CLRA
C417 BDC4CE           (       ddos12.asm):00977                 JSR     >CmdDskInitVerifyTrack          ; verify current track
C41A 0CEC             (       ddos12.asm):00978                 INC     <DskTrackNo             ; move to next track
C41C 96EC             (       ddos12.asm):00979                 LDA     <DskTrackNo
C41E 91F2             (       ddos12.asm):00980                 CMPA    <DosDSKINITraks         ; done all ?    
C420 25EF             (       ddos12.asm):00981                 BCS     LC411                   ; nope : do next track
                      (       ddos12.asm):00982                 
C422 9EEE             (       ddos12.asm):00983                 LDX     <DiskBuffPtr            ; point at disk buffer
C424 DC8A             (       ddos12.asm):00984                 LDD     <DBZero ; d=0
C426 ED81             (       ddos12.asm):00985         LC426   STD     ,X++                    ; fill buffer with zeros
C428 8C0B00           (       ddos12.asm):00986                 CMPX    #DskInitBuffer+(3*256)  ; end of buffer?
C42B 26F9             (       ddos12.asm):00987                 BNE     LC426                   ; nope keep filling
                      (       ddos12.asm):00988                 
C42D 8601             (       ddos12.asm):00989                 LDA     #$01                    ; sector 0 
C42F 97ED             (       ddos12.asm):00990                 STA     <DskSectorNo
C431 8614             (       ddos12.asm):00991                 LDA     #DirPrimary             ; Directory track
C433 8D0A             (       ddos12.asm):00992                 BSR     BuildAndWriteBAM        ; build and write BAM 
                      (       ddos12.asm):00993         
C435 0AED             (       ddos12.asm):00994                 DEC     <DskSectorNo            ; Point back at first BAM block 
C437 0AEE             (       ddos12.asm):00995                 DEC     <DiskBuffPtr
C439 8610             (       ddos12.asm):00996                 LDA     #DirBackup              ; Directory backup track
C43B 8D08             (       ddos12.asm):00997                 BSR     WriteBAM                ; Write BAM sectors
C43D 201A             (       ddos12.asm):00998                 BRA     MakeBlankDir
                      (       ddos12.asm):00999         
C43F                  (       ddos12.asm):01000         BuildAndWriteBAM   
C43F 3402             (       ddos12.asm):01001                 PSHS    A
C441 8D3D             (       ddos12.asm):01002                 BSR     BuildBAM                ; Build BAM and geometry info
C443 3502             (       ddos12.asm):01003                 PULS    A
                      (       ddos12.asm):01004         
C445                  (       ddos12.asm):01005         WriteBAM
C445 97EC             (       ddos12.asm):01006                 STA     <DskTrackNo             ; Write sector to track
C447 BDC101           (       ddos12.asm):01007                 JSR     >DosDoWriteSecV
C44A 250A             (       ddos12.asm):01008                 BCS     DosJmpToSysError        ; error : exit
                      (       ddos12.asm):01009                 
C44C 0CED             (       ddos12.asm):01010                 INC     <DskSectorNo            ; do sector 2
C44E 0CEE             (       ddos12.asm):01011                 INC     <DiskBuffPtr
C450 BDC101           (       ddos12.asm):01012                 JSR     >DosDoWriteSecV         ; Write sector to track
C453 2501             (       ddos12.asm):01013                 BCS     DosJmpToSysError        ; error : exit
C455 39               (       ddos12.asm):01014                 RTS
                      (       ddos12.asm):01015         
                      (       ddos12.asm):01016         ;
                      (       ddos12.asm):01017         ; Exit with error, allow basic to handle it.
                      (       ddos12.asm):01018         ;
                      (       ddos12.asm):01019         
C456                  (       ddos12.asm):01020         DosJmpToSysError   
C456 7EC69E           (       ddos12.asm):01021                 JMP     >DosHookSysError        ; Jump to basic error handler
                      (       ddos12.asm):01022         
                      (       ddos12.asm):01023         ; Fill in a blank directory sector, setting default attributes.
                      (       ddos12.asm):01024         ; Bug : this seems to only fill in the backup track, as the call 
                      (       ddos12.asm):01025         ; to Lc489 will never return !
C459                  (       ddos12.asm):01026         MakeBlankDir   
C459 0CEE             (       ddos12.asm):01027                 INC     <DiskBuffPtr            ; Increment buff pointer by 1 page
C45B 9EEE             (       ddos12.asm):01028                 LDX     <DiskBuffPtr                    
C45D CC890A           (       ddos12.asm):01029                 LDD     #(AttrAtFormat*256)+DirEntPerSec        ; Get default attribute & number of entries                     
C460 A784             (       ddos12.asm):01030         LC460   STA     ,X                      ; Fill in attributes
C462 308819           (       ddos12.asm):01031                 LEAX    DirEntryLen,X           ; move to next entry
C465 5A               (       ddos12.asm):01032                 DECB                            ; any more : continue
C466 26F8             (       ddos12.asm):01033                 BNE     LC460                   
                      (       ddos12.asm):01034                 
C468 8D04             (       ddos12.asm):01035                 BSR     LC46E           
                      (       ddos12.asm):01036                 
C46A 8614             (       ddos12.asm):01037                 LDA     #DirPrimary             ; Do primary dir track
C46C 97EC             (       ddos12.asm):01038                 STA     <DskTrackNo
                      (       ddos12.asm):01039                 
C46E CC1003           (       ddos12.asm):01040         LC46E   LDD     #$1003                  ; Process 16 sectors starting at sector 3
C471 D7ED             (       ddos12.asm):01041                 STB     <DskSectorNo
C473 BDC101           (       ddos12.asm):01042         LC473   JSR     >DosDoWriteSecV         ; go write the sector
C476 25DE             (       ddos12.asm):01043                 BCS     DosJmpToSysError        ; error : exit
                      (       ddos12.asm):01044                 
C478 0CED             (       ddos12.asm):01045                 INC     <DskSectorNo            ; do next sector
C47A 4A               (       ddos12.asm):01046                 DECA                            ; decrement count
C47B 26F6             (       ddos12.asm):01047                 BNE     LC473                   ; keep going if more
C47D 7EC0B8           (       ddos12.asm):01048                 JMP     >DosReset               ; reset dos
                      (       ddos12.asm):01049         
                      (       ddos12.asm):01050         ;
                      (       ddos12.asm):01051         ; Build the block availability bitmap in sectors 1 and 2 of directory track
                      (       ddos12.asm):01052         ; this does 3 things.
                      (       ddos12.asm):01053         ; 1) Marks all physical sectors as available, adjusting for DS/SS & 40/80 tracks
                      (       ddos12.asm):01054         ; 2) Marks all directory track sectors as being in use, ajusting for DS/SS disks.
                      (       ddos12.asm):01055         ; 3) Fills in disk geometry bytes in the first BAM sector.
                      (       ddos12.asm):01056         ;
C480                  (       ddos12.asm):01057         BuildBAM   
C480 97EC             (       ddos12.asm):01058                 STA     <DskTrackNo
C482 8612             (       ddos12.asm):01059                 LDA     #SectorsPerTrack
C484 C65A             (       ddos12.asm):01060                 LDB     #BAMEntries40SS         ; used to calculate number of needed BAM entries
C486 0DF4             (       ddos12.asm):01061                 TST     <DosRecLenFlag          ; Double sided ?
C488 2702             (       ddos12.asm):01062                 BEQ     LC48C
                      (       ddos12.asm):01063                 
C48A 58               (       ddos12.asm):01064                 ASLB                            ; Double number of sectors as DS
C48B 48               (       ddos12.asm):01065                 ASLA                            ; Double number of BAM entries as DS
C48C B708FD           (       ddos12.asm):01066         LC48C   STA     DskInitBuffer+DirSecPerTrk      ; save sectors / track
C48F 43               (       ddos12.asm):01067                 COMA
C490 B708FF           (       ddos12.asm):01068                 STA     DskInitBuffer+DirSecPerTrk1s    ; save complement for error check
                      (       ddos12.asm):01069         
C493 96F2             (       ddos12.asm):01070                 LDA     <DosDSKINITraks         ; Get number of tracks
C495 B708FC           (       ddos12.asm):01071                 STA     DskInitBuffer+DirTracks ; Save no of tracks
                      (       ddos12.asm):01072         
C498 43               (       ddos12.asm):01073                 COMA                            ; Complement for error check
C499 B708FE           (       ddos12.asm):01074                 STA     DskInitBuffer+DirTracks1s       ; Save no of tracks check
                      (       ddos12.asm):01075                 
C49C 9EEE             (       ddos12.asm):01076                 LDX     <DiskBuffPtr
C49E CE0900           (       ddos12.asm):01077                 LDU     #DskInitBuffer+(256*1)  ; 1 sector into buffer
C4A1 86FF             (       ddos12.asm):01078                 LDA     #$FF                    ; Mark a block of sectors free
C4A3 A780             (       ddos12.asm):01079         LC4A3   STA     ,X+
C4A5 5A               (       ddos12.asm):01080                 DECB                            ; Any more BAM groups ?
C4A6 26FB             (       ddos12.asm):01081                 BNE     LC4A3
                      (       ddos12.asm):01082         
C4A8 CC242D           (       ddos12.asm):01083                 LDD     #(BAMOffDirBakSS*256)+BAMOffDirPriSS ; get offsets in BAM of dir sectors SS     
C4AB 0DF4             (       ddos12.asm):01084                 TST     <DosRecLenFlag          ; double sided ?
C4AD 270D             (       ddos12.asm):01085                 BEQ     LC4BC
C4AF 2A08             (       ddos12.asm):01086                 BPL     LC4B9
                      (       ddos12.asm):01087                 
C4B1 CCB4FF           (       ddos12.asm):01088                 LDD     #$B4FF
C4B4 E7C0             (       ddos12.asm):01089         LC4B4   STB     ,U+
C4B6 4A               (       ddos12.asm):01090                 DECA
C4B7 26FB             (       ddos12.asm):01091                 BNE     LC4B4
                      (       ddos12.asm):01092         
C4B9 CC485A           (       ddos12.asm):01093         LC4B9   LDD     #(BAMOffDirBakDS*256)+BAMOffDirPriDS ; get offsets in BAM of dir sectors DS 
                      (       ddos12.asm):01094         
C4BC DE8A             (       ddos12.asm):01095         LC4BC   LDU     <DBZero ; U=0
C4BE 3402             (       ddos12.asm):01096                 PSHS    A                       ; Mark track 20 dir in use
C4C0 8D02             (       ddos12.asm):01097                 BSR     LC4C4
C4C2 3504             (       ddos12.asm):01098                 PULS    B                       ; mark track 16 dir in use
                      (       ddos12.asm):01099         
C4C4 9EEE             (       ddos12.asm):01100         LC4C4   LDX     <DiskBuffPtr            ; get pointer to BAM
C4C6 3A               (       ddos12.asm):01101                 ABX                             ; calculate offset
C4C7 86FC             (       ddos12.asm):01102                 LDA     #$FC                    ; mask for last 2 sectors
C4C9 EF81             (       ddos12.asm):01103                 STU     ,X++                    ; mark dir sectors in use
C4CB A784             (       ddos12.asm):01104                 STA     ,X
C4CD 39               (       ddos12.asm):01105                 RTS
                      (       ddos12.asm):01106         
C4CE                  (       ddos12.asm):01107         CmdDskInitVerifyTrack   
C4CE 0FED             (       ddos12.asm):01108                 CLR     <DskSectorNo            ; Sector 0
C4D0 0DF4             (       ddos12.asm):01109                 TST     <DosRecLenFlag          ; is it DS ?
C4D2 2702             (       ddos12.asm):01110                 BEQ     LC4D6                   ; nope just do side 0
C4D4 8D00             (       ddos12.asm):01111                 BSR     LC4D6                   ; do side 0 then 1
                      (       ddos12.asm):01112                 
C4D6 8612             (       ddos12.asm):01113         LC4D6   LDA     #SectorsPerTrack        ; Sector counter
C4D8 0CED             (       ddos12.asm):01114         LC4D8   INC     <DskSectorNo            ; next sector
C4DA BDC15F           (       ddos12.asm):01115                 JSR     >DosDoReadSec2          ; go read it
C4DD 1025FF75         (       ddos12.asm):01116                 LBCS    DosJmpToSysError        ; error : exit
C4E1 4A               (       ddos12.asm):01117                 DECA                            ; decrement count
C4E2 26F4             (       ddos12.asm):01118                 BNE     LC4D8                   ; loop again if more
C4E4 39               (       ddos12.asm):01119         LC4E4   RTS
                      (       ddos12.asm):01120         
                      (       ddos12.asm):01121         ;
                      (       ddos12.asm):01122         ; Setup format block for write track
                      (       ddos12.asm):01123         ;
                      (       ddos12.asm):01124         ; The track format used by write track is made up of records of 3 bytes :
                      (       ddos12.asm):01125         ;
                      (       ddos12.asm):01126         ; byte 0        repeat count
                      (       ddos12.asm):01127         ; byte 1        data byte
                      (       ddos12.asm):01128         ; byte 2        terminator byte
                      (       ddos12.asm):01129         ; 
                      (       ddos12.asm):01130         ; The low level write track then takes the byte counts and outputs the repeated 
                      (       ddos12.asm):01131         ; bytes for us. This is slightly more complex than the systems used on other 
                      (       ddos12.asm):01132         ; systems (e.g. Nascom, Atom, BBC) where the entire track is laid out in memory
                      (       ddos12.asm):01133         ; raw. However this has the major advantage of needing much less memory, meaning
                      (       ddos12.asm):01134         ; the track layout can be kept within the disk buffers. This means that (unlike 
                      (       ddos12.asm):01135         ; the Atom and BBC DFS) formatting a disk does not corrupt any of the non DOS 
                      (       ddos12.asm):01136         ; related memory - neat.
                      (       ddos12.asm):01137         ;
                      (       ddos12.asm):01138         
C4E5                  (       ddos12.asm):01139         SetupTrackLayout   
C4E5 DEEE             (       ddos12.asm):01140                 LDU     <DiskBuffPtr            ; Point to disk buffer
C4E7 8EDDF7           (       ddos12.asm):01141                 LDX     #TrackHeaderTable
C4EA 108EDDE4         (       ddos12.asm):01142                 LDY     #SectorIDTable          ; Table of sector IDs with required interleave          
                      (       ddos12.asm):01143                 
                      (       ddos12.asm):01144         ; Write track header
C4EE C60C             (       ddos12.asm):01145                 LDB     #TrackHeaderSize        ; Count
C4F0 8D21             (       ddos12.asm):01146                 BSR     DosUtilCopyBXtoU        ; copy bytes
                      (       ddos12.asm):01147                 
                      (       ddos12.asm):01148         ; Write sector ID       
C4F2 8EDE03           (       ddos12.asm):01149         LC4F2   LDX     #SectorIDLayout         ; first part of sector ID
C4F5 C606             (       ddos12.asm):01150                 LDB     #SectorIDP1Len          ; count 
C4F7 8D1A             (       ddos12.asm):01151                 BSR     DosUtilCopyBXtoU        ; copy bytes
                      (       ddos12.asm):01152                 
                      (       ddos12.asm):01153         ; now fill in the C,H,R,N values for the sector 
C4F9 8601             (       ddos12.asm):01154                 LDA     #$01                    ; repeat count 1 byte   
C4FB D6EC             (       ddos12.asm):01155                 LDB     <DskTrackNo             ; get Cylinder number 
C4FD EDC1             (       ddos12.asm):01156                 STD     ,U++                    ; save in buffer
C4FF D6F3             (       ddos12.asm):01157                 LDB     <DosDSKINIHead          ; get Head 
C501 E7C0             (       ddos12.asm):01158                 STB     ,U+                     ; save in buffer (as term byte)
C503 E6A0             (       ddos12.asm):01159                 LDB     ,Y+                     ; get sector (Record) number 
C505 EDC1             (       ddos12.asm):01160                 STD     ,U++                    ; save count of 1 plus sector number
C507 A7C0             (       ddos12.asm):01161                 STA     ,U+                     ; save sector size of 1 (N=256)
                      (       ddos12.asm):01162                 
                      (       ddos12.asm):01163         ; Write end of sector ID + Sector data area
C509 C612             (       ddos12.asm):01164                 LDB     #SectorIDP2Len          ; count of bytes in rest of sector ID and sectro data
C50B 8D06             (       ddos12.asm):01165                 BSR     DosUtilCopyBXtoU        ; coopy bytes
                      (       ddos12.asm):01166                 
C50D 6DA4             (       ddos12.asm):01167                 TST     ,Y                      ; done all sectors?
C50F 26E1             (       ddos12.asm):01168                 BNE     LC4F2                   ; nope loop again
                      (       ddos12.asm):01169         
                      (       ddos12.asm):01170         ; Write track filler bytes
C511 C603             (       ddos12.asm):01171                 LDB     #TrackFillerLen         ; no of bytes at end of track
                      (       ddos12.asm):01172         
C513                  (       ddos12.asm):01173         DosUtilCopyBXtoU   
C513 7EB7CC           (       ddos12.asm):01174                 JMP     >UtilCopyBXtoU
                      (       ddos12.asm):01175         
                      (       ddos12.asm):01176         ;
                      (       ddos12.asm):01177         ; GetCommaThen8Bit, scan for comma, error if not found, then fetch 8 bit that follows (or error). 
                      (       ddos12.asm):01178         ;
                      (       ddos12.asm):01179         
C516                  (       ddos12.asm):01180         GetCommaThen8Bit
C516 9DA5             (       ddos12.asm):01181                 JSR     <BasChrGetCurr          ; Get current basic char
C518 27CA             (       ddos12.asm):01182                 BEQ     LC4E4                   ; Any left no: return 
C51A BD89AA           (       ddos12.asm):01183                 JSR     >VarCKComma             ; check for comma
C51D 7EC63F           (       ddos12.asm):01184                 JMP     >Get8BitorError         ; go get it
                      (       ddos12.asm):01185         
                      (       ddos12.asm):01186         ;
                      (       ddos12.asm):01187         ; Basic BACKUP command
                      (       ddos12.asm):01188         ;
                      (       ddos12.asm):01189         ; BACKUP src_drv TO dest_drv[,s][,t]
                      (       ddos12.asm):01190         ;       src_drv         = source drive no 1..4
                      (       ddos12.asm):01191         ;       dest_drv        = destination drive no 1..4
                      (       ddos12.asm):01192         ;       s               = number of sides 1 or 2
                      (       ddos12.asm):01193         ;       t               = number of tracks 40 or 80
                      (       ddos12.asm):01194         ;
                      (       ddos12.asm):01195         ; Stack frame
                      (       ddos12.asm):01196         ;       $0015   Ram buffer size in sectors
                      (       ddos12.asm):01197         ;       $0014   Sectors / tracks
                      (       ddos12.asm):01198         ;
                      (       ddos12.asm):01199         ;  Destination Drive ---------------------------        
                      (       ddos12.asm):01200         ;
                      (       ddos12.asm):01201         ;       $0012   Ram pointer
                      (       ddos12.asm):01202         ;       $0010   String pointer
                      (       ddos12.asm):01203         ;       $0009   Sector
                      (       ddos12.asm):01204         ;       $0008   Track
                      (       ddos12.asm):01205         ;       $0007   Drive
                      (       ddos12.asm):01206         ;
                      (       ddos12.asm):01207         ;  Source drive --------------------------------
                      (       ddos12.asm):01208         ;       
                      (       ddos12.asm):01209         ;       $0005   Ram pointer
                      (       ddos12.asm):01210         ;       $0003   String pointer
                      (       ddos12.asm):01211         ;       $0002   Sector
                      (       ddos12.asm):01212         ;       $0001   Track
                      (       ddos12.asm):01213         ;       $0000   Drive
                      (       ddos12.asm):01214         ;  U->
                      (       ddos12.asm):01215         ;
                      (       ddos12.asm):01216         ; U is used as a pointer to the beginning of the stack frame. 
                      (       ddos12.asm):01217         ; Below this is the stack usage for the subroutines within the backup.
                      (       ddos12.asm):01218         ;
                      (       ddos12.asm):01219         ;
                      (       ddos12.asm):01220         
C520                  (       ddos12.asm):01221         CmdBackup   
C520 3270             (       ddos12.asm):01222                 LEAS    -BupStackFrame,S        ; Make tempory space on stack
C522 1F43             (       ddos12.asm):01223                 TFR     S,U                     ; Point U at base of tempory space (Like OS-9 !)
C524 1F30             (       ddos12.asm):01224                 TFR     U,D             
C526 830040           (       ddos12.asm):01225                 SUBD    #$0040                  ; reserve room for working stack
C529 931F             (       ddos12.asm):01226                 SUBD    <BasVarEnd              ; Check that we have suficient memory available
C52B 102BBE13         (       ddos12.asm):01227                 LBMI    BasOMError              ; NO: report ?OM error
                      (       ddos12.asm):01228                 
C52F 8101             (       ddos12.asm):01229                 CMPA    #$01                    ; At least 1 sector's worth of ram (256 bytes) available
C531 102DBE0D         (       ddos12.asm):01230                 LBLT    BasOMError              ; NO: report ?OM error
C535 A74F             (       ddos12.asm):01231                 STA     BupAvailPages,U         ; Store memory page count of avaiable RAM
C537 8612             (       ddos12.asm):01232                 LDA     #SectorsPerTrack        ; Sectors per track, initially 18 for SS disk
C539 A74E             (       ddos12.asm):01233                 STA     BupSecTrk,U
C53B DC1F             (       ddos12.asm):01234                 LDD     <BasVarEnd              ; Get end of RAM in use by basic
C53D ED45             (       ddos12.asm):01235                 STD     BupSrcBuff,U            ; save in buffer pointers for source and dest
C53F ED4C             (       ddos12.asm):01236                 STD     BupDestBuff,U
                      (       ddos12.asm):01237         
C541 CCDF54           (       ddos12.asm):01238                 LDD     #MessInsertSource-1     ; Insert source and destination message pointers
C544 ED43             (       ddos12.asm):01239                 STD     BupSrcMess,U
C546 CCDF63           (       ddos12.asm):01240                 LDD     #MessInsertDest-1
C549 ED4A             (       ddos12.asm):01241                 STD     BupDestMess,U
                      (       ddos12.asm):01242                 
C54B CC0001           (       ddos12.asm):01243                 LDD     #$0001                  ; Set source and dest track and sector to 0 & 1
C54E ED41             (       ddos12.asm):01244                 STD     BupSrcTrk,U
C550 ED48             (       ddos12.asm):01245                 STD     BupDestTrk,U
C552 B6060A           (       ddos12.asm):01246                 LDA     DosDefDriveNo           ; Get default drive no
C555 A7C4             (       ddos12.asm):01247                 STA     ,U                      ; save in source drive
C557 A747             (       ddos12.asm):01248                 STA     BupDestDrive,U          ; and dest
C559 108E02D0         (       ddos12.asm):01249                 LDY     #(SectorsPerTrack*40)   ; sector count 720 sectors=ss40 disk
                      (       ddos12.asm):01250         
C55D 9DA5             (       ddos12.asm):01251                 JSR     <BasChrGetCurr
C55F 274A             (       ddos12.asm):01252                 BEQ     DoCmdBackup             ; No params backup from default drive to default 
C561 BDC63F           (       ddos12.asm):01253                 JSR     >Get8BitorError
C564 C104             (       ddos12.asm):01254                 CMPB    #MaxDriveNo             ; greater than Max drive (4)?
C566 1022012F         (       ddos12.asm):01255                 LBHI    DosDNError
                      (       ddos12.asm):01256         
C56A E7C4             (       ddos12.asm):01257                 STB     ,U                      ; Save source drive
C56C E747             (       ddos12.asm):01258                 STB     BupDestDrive,U          ; and default dest to same drive
                      (       ddos12.asm):01259         
C56E 9DA5             (       ddos12.asm):01260                 JSR     <BasChrGetCurr          ; Get current character from basic
C570 2739             (       ddos12.asm):01261                 BEQ     DoCmdBackup             ; end of line : yes do backup
                      (       ddos12.asm):01262         
C572 81BC             (       ddos12.asm):01263                 CMPA    #DTokTO                 ; is this the "TO" token ?
C574 2619             (       ddos12.asm):01264                 BNE     CmdBackupErrorExit
                      (       ddos12.asm):01265         
C576 9D9F             (       ddos12.asm):01266                 JSR     <BasChrGet              ; Get next char, skip over "TO"
C578 BDC63F           (       ddos12.asm):01267                 JSR     >Get8BitorError         ; Get dest drive in B
C57B C104             (       ddos12.asm):01268                 CMPB    #MaxDriveNo             ; greater than Max drive (4)?
C57D 10220118         (       ddos12.asm):01269                 LBHI    DosDNError
                      (       ddos12.asm):01270         
C581 E747             (       ddos12.asm):01271                 STB     BupDestDrive,U          ; Save in Dest driveno
                      (       ddos12.asm):01272         
C583 8D91             (       ddos12.asm):01273                 BSR     GetCommaThen8Bit        ; Skip comma, and get next param
C585 2724             (       ddos12.asm):01274                 BEQ     DoCmdBackup             ; nothing : do backup
                      (       ddos12.asm):01275         
C587 C102             (       ddos12.asm):01276                 CMPB    #$02                    ; 2 sided disk specified ?
C589 2707             (       ddos12.asm):01277                 BEQ     BackupDS                ; yes backup double sided
C58B C101             (       ddos12.asm):01278                 CMPB    #$01                    ; 1 sided disk specified ?
C58D 2709             (       ddos12.asm):01279                 BEQ     BackupSS                ; yes backup single sided
                      (       ddos12.asm):01280         
                      (       ddos12.asm):01281         
C58F                  (       ddos12.asm):01282         CmdBackupErrorExit   
C58F 7E89B4           (       ddos12.asm):01283                 JMP     >BasSNError             ; error : exit
                      (       ddos12.asm):01284         
C592                  (       ddos12.asm):01285         BackupDS   
C592 1F20             (       ddos12.asm):01286                 TFR     Y,D                     ; Double sector count if double sided
C594 31AB             (       ddos12.asm):01287                 LEAY    D,Y
C596 684E             (       ddos12.asm):01288                 ASL     BupSecTrk,U             ; Set sectors per track for DS disk
                      (       ddos12.asm):01289         
C598                  (       ddos12.asm):01290         BackupSS   
C598 BDC516           (       ddos12.asm):01291                 JSR     >GetCommaThen8Bit       ; Get next param (if any)
C59B 270E             (       ddos12.asm):01292                 BEQ     DoCmdBackup             ; none: continue
C59D C150             (       ddos12.asm):01293                 CMPB    #$50                    ; Do 80 tracks ?
C59F 2706             (       ddos12.asm):01294                 BEQ     Backup80
C5A1 C128             (       ddos12.asm):01295                 CMPB    #$28                    ; Do 40 tracks ?
C5A3 2706             (       ddos12.asm):01296                 BEQ     DoCmdBackup
C5A5 20E8             (       ddos12.asm):01297                 BRA     CmdBackupErrorExit      ; neither : error
                      (       ddos12.asm):01298         
C5A7                  (       ddos12.asm):01299         Backup80
C5A7 1F20             (       ddos12.asm):01300                 TFR     Y,D                     ; Double sector count if 80 track
C5A9 31AB             (       ddos12.asm):01301                 LEAY    D,Y
                      (       ddos12.asm):01302         
C5AB                  (       ddos12.asm):01303         DoCmdBackup   
C5AB 4F               (       ddos12.asm):01304                 CLRA
C5AC                  (       ddos12.asm):01305         BupReadFromSrc   
C5AC 3121             (       ddos12.asm):01306                 LEAY    1,Y                     ; Get sector count
C5AE 30C4             (       ddos12.asm):01307                 LEAX    ,U                      ; point to source drive on stack frame
C5B0 8D6D             (       ddos12.asm):01308                 BSR     BupCheckPrompt          ; Check if drives are same & prompt if so
                      (       ddos12.asm):01309                 
C5B2 313F             (       ddos12.asm):01310         LC5B2   LEAY    -1,Y                    ; decrement sector count
C5B4 2606             (       ddos12.asm):01311                 BNE     LC5BC                   ; if more sectors, do next
C5B6 8D1D             (       ddos12.asm):01312                 BSR     BupWriteToDest
C5B8 32C810           (       ddos12.asm):01313                 LEAS    BupStackFrame,U         ; Clear stack frame
C5BB 39               (       ddos12.asm):01314         LC5BB   RTS
                      (       ddos12.asm):01315         
C5BC A14F             (       ddos12.asm):01316         LC5BC   CMPA    BupAvailPages,U         ; Filled all available RAM pages ?      
C5BE 260E             (       ddos12.asm):01317                 BNE     LC5CE                   ; no : do next sector
C5C0 8D13             (       ddos12.asm):01318                 BSR     BupWriteToDest          ; Yes : write to destination
C5C2 3406             (       ddos12.asm):01319                 PSHS    D
C5C4 DC1F             (       ddos12.asm):01320                 LDD     <BasVarEnd              ; Get end of basic storage
C5C6 ED4C             (       ddos12.asm):01321                 STD     BupDestBuff,U           ; Save in source and dest buffer pointers
C5C8 ED45             (       ddos12.asm):01322                 STD     BupSrcBuff,U
C5CA 3506             (       ddos12.asm):01323                 PULS    D
C5CC 20DE             (       ddos12.asm):01324                 BRA     BupReadFromSrc          ; Do next sector
                      (       ddos12.asm):01325         
C5CE C602             (       ddos12.asm):01326         LC5CE   LDB     #DosFnReadSec           ; Read the sectors
C5D0 8D12             (       ddos12.asm):01327                 BSR     LC5E4                   ; go do it
C5D2 4C               (       ddos12.asm):01328                 INCA                            
C5D3 20DD             (       ddos12.asm):01329                 BRA     LC5B2
                      (       ddos12.asm):01330         
C5D5                  (       ddos12.asm):01331         BupWriteToDest   
C5D5 4D               (       ddos12.asm):01332                 TSTA
C5D6 27E3             (       ddos12.asm):01333                 BEQ     LC5BB
C5D8 3047             (       ddos12.asm):01334                 LEAX    BupDestDrive,U          ; Point to dest drive vars
C5DA 8D43             (       ddos12.asm):01335                 BSR     BupCheckPrompt          ; Check if drives are same & prompt if so
C5DC C603             (       ddos12.asm):01336                 LDB     #DosFnWriteSecV         ; write sectors to destination
C5DE 8D04             (       ddos12.asm):01337         LC5DE   BSR     LC5E4                   ; go do it
C5E0 4A               (       ddos12.asm):01338                 DECA                            ; decrement sector count
C5E1 26FB             (       ddos12.asm):01339                 BNE     LC5DE                   ; if more go again
C5E3 39               (       ddos12.asm):01340         LC5E3   RTS
                      (       ddos12.asm):01341         
C5E4 3406             (       ddos12.asm):01342         LC5E4   PSHS    D
C5E6 A684             (       ddos12.asm):01343                 LDA     ,X                      ; Get source drive
C5E8 97EB             (       ddos12.asm):01344                 STA     <DosDriveNo             ; make source drive the current drive
                      (       ddos12.asm):01345         
C5EA EC05             (       ddos12.asm):01346                 LDD     BupSrcBuff,X            ; point to source buffer
C5EC DDEE             (       ddos12.asm):01347                 STD     <DiskBuffPtr
C5EE EC01             (       ddos12.asm):01348                 LDD     BupSrcTrk,X             ; get source track and sector
C5F0 DDEC             (       ddos12.asm):01349                 STD     <DskTrackNo             ; set them
C5F2 E661             (       ddos12.asm):01350                 LDB     1,S                     ; get the function code read or write
C5F4 BDC106           (       ddos12.asm):01351                 JSR     >DosDoFuncinB           ; Ask dos to do it !
C5F7 2414             (       ddos12.asm):01352                 BCC     LC60D                   ; no error, skip on
C5F9 F70603           (       ddos12.asm):01353                 STB     DosErrorCode            ; save error code
                      (       ddos12.asm):01354         
C5FC A661             (       ddos12.asm):01355                 LDA     1,S                     ; Get function, read or write
C5FE 8102             (       ddos12.asm):01356                 CMPA    #DosFnReadSec           ; Read ?
C600 2605             (       ddos12.asm):01357                 BNE     LC607
C602 3516             (       ddos12.asm):01358                 PULS    D,X
                      (       ddos12.asm):01359         
C604 BDC5D5           (       ddos12.asm):01360                 JSR     >BupWriteToDest
C607 F60603           (       ddos12.asm):01361         LC607   LDB     DosErrorCode            ; Retrieve error code
C60A 7EC69E           (       ddos12.asm):01362                 JMP     >DosHookSysError
                      (       ddos12.asm):01363         
C60D 6C02             (       ddos12.asm):01364         LC60D   INC     BupSrcSec,X             ; Move to next source sector
C60F A602             (       ddos12.asm):01365                 LDA     BupSrcSec,X
C611 A14E             (       ddos12.asm):01366                 CMPA    BupSecTrk,U             ; still sectors on this track to read ?
C613 2306             (       ddos12.asm):01367                 BLS     LC61B                   ; yep : keep going
                      (       ddos12.asm):01368                 
C615 8601             (       ddos12.asm):01369                 LDA     #$01
C617 A702             (       ddos12.asm):01370                 STA     BupSrcSec,X             ; set source sec to 1
C619 6C01             (       ddos12.asm):01371                 INC     BupSrcTrk,X             ; increment source track
C61B 6C05             (       ddos12.asm):01372         LC61B   INC     BupSrcBuff,X            ; move to next memorty page
C61D 3586             (       ddos12.asm):01373                 PULS    D,PC
                      (       ddos12.asm):01374         
                      (       ddos12.asm):01375         ;
                      (       ddos12.asm):01376         ; Check if source and dest drives are the same and if so prompt to swap disks.
                      (       ddos12.asm):01377         ;
                      (       ddos12.asm):01378         
C61F                  (       ddos12.asm):01379         BupCheckPrompt   
C61F E6C4             (       ddos12.asm):01380                 LDB     ,U                      ; get source drive
C621 E147             (       ddos12.asm):01381                 CMPB    7,U                     ; same as dest drive ?
C623 26BE             (       ddos12.asm):01382                 BNE     LC5E3                   ; no : continue
                      (       ddos12.asm):01383                 
C625 3472             (       ddos12.asm):01384                 PSHS    A,X,Y,U
C627 BDBA77           (       ddos12.asm):01385                 JSR     >TextCls                ; clear screen
C62A AE61             (       ddos12.asm):01386                 LDX     1,S                     ; get message pointer
C62C AE03             (       ddos12.asm):01387                 LDX     3,X
C62E BD90E5           (       ddos12.asm):01388                 JSR     >TextOutString          ; Print message (insert source/insert dest)
C631 8EDF77           (       ddos12.asm):01389                 LDX     #MessPressAnyKey-1
C634 BD90E5           (       ddos12.asm):01390                 JSR     >TextOutString          ; Print press any key
C637 BDB505           (       ddos12.asm):01391                 JSR     >TextWaitKeyCurs2       ; Wait for a kepress
C63A BDBA77           (       ddos12.asm):01392                 JSR     >TextCls
C63D 35F2             (       ddos12.asm):01393                 PULS    A,X,Y,U,PC
                      (       ddos12.asm):01394         
                      (       ddos12.asm):01395         ;
                      (       ddos12.asm):01396         ; Get8BitorError, get non zero 8 bit value in B, or generate error
                      (       ddos12.asm):01397         ;
C63F                  (       ddos12.asm):01398         Get8BitorError
C63F 3460             (       ddos12.asm):01399                 PSHS    Y,U
C641 BD8E51           (       ddos12.asm):01400                 JSR     >VarGet8Bit             ; Get 8 bit value into B
C644 5D               (       ddos12.asm):01401                 TSTB                            ; B non zero ?
C645 2603             (       ddos12.asm):01402                 BNE     LC64A
C647 7E8B8D           (       ddos12.asm):01403                 JMP     >BasFCError             ; No : error
                      (       ddos12.asm):01404                 
C64A 35E0             (       ddos12.asm):01405         LC64A   PULS    Y,U,PC                  ; Restore and return
                      (       ddos12.asm):01406         
C64C                  (       ddos12.asm):01407         DosCmdDispatch   
C64C 81FF             (       ddos12.asm):01408                 CMPA    #$FF                    ; Invalid token ?
C64E 1027C362         (       ddos12.asm):01409                 LBEQ    BasSNError
C652 80CE             (       ddos12.asm):01410                 SUBA    #DDTokFirstC            ; Make token number zero based
C654 2A03             (       ddos12.asm):01411                 BPL     LC659                   ; valid token : yep continue
                      (       ddos12.asm):01412                 
C656 7E89B4           (       ddos12.asm):01413         LC656   JMP     >BasSNError             ; nope SNError
                      (       ddos12.asm):01414         
C659 811A             (       ddos12.asm):01415         LC659   CMPA    #DDTokCountC            ; check token in range
C65B 2406             (       ddos12.asm):01416                 BCC     LC663                   ; Nope, continue to next jump table
C65D 8EDE53           (       ddos12.asm):01417                 LDX     #CommandDispatchTable   ; Point to command address table
C660 7E84ED           (       ddos12.asm):01418                 JMP     >BasDoDispatch          ; go do it !
                      (       ddos12.asm):01419                 
C663 6E9F0137         (       ddos12.asm):01420         LC663   JMP     [>NextResJump]          ; Jump to user reserved word handler >$0137
                      (       ddos12.asm):01421         
C667                  (       ddos12.asm):01422         DosFuncDispatch   
C667 C044             (       ddos12.asm):01423                 SUBB    #$44
C669 2A02             (       ddos12.asm):01424                 BPL     LC66D                   ; Check token in range, skip if ok
C66B 20E9             (       ddos12.asm):01425                 BRA     LC656                   ; else ?SN Error
                      (       ddos12.asm):01426         
C66D C10E             (       ddos12.asm):01427         LC66D   CMPB    #(DDTokCountF*2)        ; check token in range
C66F 2408             (       ddos12.asm):01428                 BCC     LC679                   ; nope : skip to next handler
C671 8EDE87           (       ddos12.asm):01429                 LDX     #FunctionDipatchTable   ; point to function table
C674 AD95             (       ddos12.asm):01430                 JSR     [B,X]                   ; jump to function
C676 7E8874           (       ddos12.asm):01431                 JMP     >VarGetExprCC           ; return value to basic
                      (       ddos12.asm):01432         
C679 6E9F013C         (       ddos12.asm):01433         LC679   JMP     [>NextFuncsJump]        ; Jump to user function handler >$013C
                      (       ddos12.asm):01434         
                      (       ddos12.asm):01435         ; test and flush all buffers
                      (       ddos12.asm):01436         
C67D                  (       ddos12.asm):01437         TestAndFlushAll   
C67D 8E0634           (       ddos12.asm):01438                 LDX     #Buff1Details           ; Point to first buffer
C680 BDD2B4           (       ddos12.asm):01439         LC680   JSR     >TestAndFlushBuffer     ; Flush if needed
C683 2619             (       ddos12.asm):01440                 BNE     DosHookSysError         ; error : exit
                      (       ddos12.asm):01441                 
C685 6F02             (       ddos12.asm):01442                 CLR     BuffFlag,X              ; mark buffer free
C687 3007             (       ddos12.asm):01443                 LEAX    BuffDetailSize,X        ; move to next buffer
C689 8C0650           (       ddos12.asm):01444                 CMPX    #(Buff1Details+(BuffCount*BuffDetailSize))      
                      (       ddos12.asm):01445                 
C68C 25F2             (       ddos12.asm):01446                 BCS     LC680                   ; done all : no loop again
C68E 39               (       ddos12.asm):01447         LC68E   RTS
                      (       ddos12.asm):01448         
                      (       ddos12.asm):01449         ;
                      (       ddos12.asm):01450         ; Get drive no in B, returns drive no (from command) in B,
                      (       ddos12.asm):01451         ; or causes error if (drive < 0 ) or (drive > 4)
                      (       ddos12.asm):01452         ;
                      (       ddos12.asm):01453         
C68F                  (       ddos12.asm):01454         GetDriveNoInB   
C68F BD8E51           (       ddos12.asm):01455                 JSR     >VarGet8Bit             ; Get 8 bit var
C692 5D               (       ddos12.asm):01456                 TSTB
C693 2704             (       ddos12.asm):01457                 BEQ     DosDNError
C695 C104             (       ddos12.asm):01458                 CMPB    #$04                    ; Valid < 4 ?
C697 23F5             (       ddos12.asm):01459                 BLS     LC68E                   ; yes : skip
                      (       ddos12.asm):01460                  
C699                  (       ddos12.asm):01461         DosDNError   
C699 C628             (       ddos12.asm):01462                 LDB     #BErrDN                 ; Device no error
C69B 8C               (       ddos12.asm):01463                 FCB     Skip2           
                      (       ddos12.asm):01464         
C69C                  (       ddos12.asm):01465         DosPRError
C69C C6A4             (       ddos12.asm):01466                 LDB     #ErrPR          ; Parameter error
                      (       ddos12.asm):01467         
C69E                  (       ddos12.asm):01468         DosHookSysError   
C69E F70619           (       ddos12.asm):01469                 STB     DosErrLast              ; save last error code
C6A1 9E68             (       ddos12.asm):01470                 LDX     <BasCurrentLine         ; Get current line no
C6A3 BF0617           (       ddos12.asm):01471                 STX     DosErrLineNo            ; save for ERR routine
C6A6 BD8434           (       ddos12.asm):01472                 JSR     >BasResetStack          ; reset basic stack
C6A9 0FF6             (       ddos12.asm):01473                 CLR     <DosIOInProgress        ; Flag no IO in progress
C6AB BDBDDC           (       ddos12.asm):01474                 JSR     >CasMotorOff            ; turn off tape motor
C6AE BDBAC3           (       ddos12.asm):01475                 JSR     >SndDisable             ; disable sound
C6B1 0F6F             (       ddos12.asm):01476                 CLR     <TextDevN               ; Set device no back to console
C6B3 BD90A1           (       ddos12.asm):01477                 JSR     >TextOutCRLF            ; output EOL
C6B6 7D0614           (       ddos12.asm):01478                 TST     DosErrGotoFlag          ; Do we have an error handler ?
C6B9 2A06             (       ddos12.asm):01479                 BPL     LC6C1                   ; Yes, handle errors
C6BB 9E68             (       ddos12.asm):01480                 LDX     <BasCurrentLine         ; Get current line no
C6BD 3001             (       ddos12.asm):01481                 LEAX    1,X
C6BF 2611             (       ddos12.asm):01482                 BNE     LC6D2
                      (       ddos12.asm):01483         
C6C1 BD90F8           (       ddos12.asm):01484         LC6C1   JSR     >TextOutQuestion        ; output '?'
C6C4 8E82A9           (       ddos12.asm):01485                 LDX     #BasErrorCodeTable      ; Point to error code table $82A9
C6C7 F60619           (       ddos12.asm):01486                 LDB     DosErrLast              ; Get last error code
C6CA 2A03             (       ddos12.asm):01487                 BPL     LC6CF
                      (       ddos12.asm):01488                 
C6CC 8EDF13           (       ddos12.asm):01489                 LDX     #(DosErrorCodeTable-DDFirstError)       ; Get pointer to error table !
C6CF 7E835E           (       ddos12.asm):01490         LC6CF   JMP     >SysErr2                ; Jump to basic Error handler
                      (       ddos12.asm):01491         
C6D2 8E84DA           (       ddos12.asm):01492         LC6D2   LDX     #BasBRARun              ; Go back to main interpreter loop $84DA
C6D5 3410             (       ddos12.asm):01493                 PSHS    X                       ; push X as return address
C6D7 FC0615           (       ddos12.asm):01494                 LDD     DosErrDestLine          ; get on error goto line
C6DA DD2B             (       ddos12.asm):01495                 STD     <BasTempLine            ; save it in temp line
C6DC 7E85E7           (       ddos12.asm):01496                 JMP     >BasSkipLineNo          ; jump to it.
                      (       ddos12.asm):01497         
                      (       ddos12.asm):01498         ;
                      (       ddos12.asm):01499         ; New reset vector
                      (       ddos12.asm):01500         ;
                      (       ddos12.asm):01501         
C6DF                  (       ddos12.asm):01502         ResetVector
C6DF 12               (       ddos12.asm):01503                 NOP                             ; Main ROM checks for reset->NOP
C6E0 4F               (       ddos12.asm):01504                 CLRA                            ; Reset DP=0
C6E1 1F8B             (       ddos12.asm):01505                 TFR     A,DP            
C6E3 BDC0B8           (       ddos12.asm):01506                 JSR     >DosReset               ; Reset WD, and various Dos vars.
C6E6 7F0609           (       ddos12.asm):01507                 CLR     DosErrorMask            ; reset various flags
C6E9 7F0605           (       ddos12.asm):01508                 CLR     DosTimeout
C6EC 7F0613           (       ddos12.asm):01509                 CLR     DosAutoFlag
C6EF 8635             (       ddos12.asm):01510                 LDA     #$35                    ; Re-enable NMI
C6F1 B7FF03           (       ddos12.asm):01511                 STA     PIA0CRB
C6F4 7EB44F           (       ddos12.asm):01512                 JMP     >WarmStart              ; Jump back to Main ROM reset routine
                      (       ddos12.asm):01513         
                      (       ddos12.asm):01514         ;
                      (       ddos12.asm):01515         ; NMI vector, called to break out of read & write loops between 6809 & WD
                      (       ddos12.asm):01516         ; This allows the IO routines to handle sectors of all lengths.
                      (       ddos12.asm):01517         ;
                      (       ddos12.asm):01518         
C6F7                  (       ddos12.asm):01519         NMISrv   
C6F7 9640             (       ddos12.asm):01520                 LDA     DPCmdReg                ; Read status register.
C6F9 5F               (       ddos12.asm):01521                 CLRB                            ; Reset DP=0
C6FA 1F9B             (       ddos12.asm):01522                 TFR     B,DP
C6FC 326C             (       ddos12.asm):01523                 LEAS    12,S                    ; Drop registers from stack
C6FE 4D               (       ddos12.asm):01524                 TSTA                            ; Setup CC
C6FF 39               (       ddos12.asm):01525         LC6FF   RTS
                      (       ddos12.asm):01526         
                      (       ddos12.asm):01527         ;
                      (       ddos12.asm):01528         ; New IRQ vector, used to count down and shut off drives.
                      (       ddos12.asm):01529         ;
                      (       ddos12.asm):01530         ; Note PGS fixes to IRQSrv could be re-arranged to avoid all the jumping around.
                      (       ddos12.asm):01531         ; but for now applying them unmodified.
C700                  (       ddos12.asm):01532         IRQSrv  
                      (       ddos12.asm):01533                 ifdef   PGSFix
                      (       ddos12.asm):01534                 BRA     LC72D                   ; branch to fix code
                      (       ddos12.asm):01535                 ELSE
C700 0DF6             (       ddos12.asm):01536                 TST     <DosIOInProgress        ; Doing IO ?
                      (       ddos12.asm):01537                 ENDC
                      (       ddos12.asm):01538                 
C702 261A             (       ddos12.asm):01539         IRQSrv2 BNE     LC71E                   ; Yes: don't time out
C704 B60605           (       ddos12.asm):01540                 LDA     DosTimeout              ; Get timeout byte 
C707 2715             (       ddos12.asm):01541                 BEQ     LC71E                   ; Already timed out : exit
                      (       ddos12.asm):01542          
C709 4A               (       ddos12.asm):01543                 DECA                            ; Decrement timeout count
C70A B70605           (       ddos12.asm):01544                 STA     DosTimeout      
                      (       ddos12.asm):01545         
C70D 260F             (       ddos12.asm):01546                 BNE     LC71E                   ; not zero, don't timeout yet
C70F 8D23             (       ddos12.asm):01547                 BSR     DOSSyncDir              ; syncronsise directory
C711 260E             (       ddos12.asm):01548                 BNE     LC721                   ; Error : report it
C713 B60607           (       ddos12.asm):01549                 LDA     DosHWMaskFF48           ; turn off motor in hw byte
C716 84FB             (       ddos12.asm):01550                 ANDA    #~MotorOn       
                      (       ddos12.asm):01551                
                      (       ddos12.asm):01552                 ifdef   DragonAlpha
                      (       ddos12.asm):01553                 LBSR    AlphaDskCtl             ; Actually turn off motor
                      (       ddos12.asm):01554                 ELSE
C718 B7FF48           (       ddos12.asm):01555                 STA     DskCtl                  ; Actually turn off motor
                      (       ddos12.asm):01556                 ENDC
                      (       ddos12.asm):01557                         
C71B B70607           (       ddos12.asm):01558                 STA     DosHWMaskFF48           ; Just turn off drives on Dragon
                      (       ddos12.asm):01559         
C71E                  (       ddos12.asm):01560         LC71E   
                      (       ddos12.asm):01561                 ifdef   PGSFix
                      (       ddos12.asm):01562                 BRA     LC72D
                      (       ddos12.asm):01563                 NOP
                      (       ddos12.asm):01564                 else
C71E 7E9D3D           (       ddos12.asm):01565                 JMP     >BasIRQVec              ; Jump to BASIC IRQ
                      (       ddos12.asm):01566                 endc
                      (       ddos12.asm):01567                 
C721 7EC69E           (       ddos12.asm):01568         LC721   JMP     >DosHookSysError
                      (       ddos12.asm):01569         
                      (       ddos12.asm):01570                 ifdef   PGSFix
                      (       ddos12.asm):01571                 PSHS    B                       ; save B
                      (       ddos12.asm):01572                 CLRA                            ; Make sure DP is set to 0
                      (       ddos12.asm):01573                 TFR     A,DP
                      (       ddos12.asm):01574                 TST     <DosIOInProgress        ; Doing IO ?
                      (       ddos12.asm):01575                 BRA     IRQSrv2                 ; Branch back to IRQ service
                      (       ddos12.asm):01576         
C724                  (       ddos12.asm):01577         LC72D   PULS    B                       ; restore B
                      (       ddos12.asm):01578                 JMP     >BasIRQVec              ; Jump to BASIC IRQ
                      (       ddos12.asm):01579                 NOP                             ; resync locations in output
                      (       ddos12.asm):01580                 NOP
                      (       ddos12.asm):01581                 else
                      (       ddos12.asm):01582         ;
                      (       ddos12.asm):01583         ; This code seems unused ! but checks for at least a free page of memory
                      (       ddos12.asm):01584         ; between the top of the basic vars and the bottom of the stack.
                      (       ddos12.asm):01585         ; 
                      (       ddos12.asm):01586         
C724 1F40             (       ddos12.asm):01587         LC724   TFR     S,D                     ; Get stack pointer in D
C726 830100           (       ddos12.asm):01588                 SUBD    #$0100                  ; move down a page
C729 931F             (       ddos12.asm):01589                 SUBD    <BasVarEnd              ; Subtract end of bas vars                      
C72B 2B04             (       ddos12.asm):01590                 BMI     LC731                   ; -ve so out of memory
C72D 5F               (       ddos12.asm):01591                 CLRB                            ; clear LSB of new stack
C72E 4D               (       ddos12.asm):01592                 TSTA                            ; At least a page free ?
C72F 26CE             (       ddos12.asm):01593                 BNE     LC6FF                   ; yep : return
C731 7E8342           (       ddos12.asm):01594         LC731   JMP     >BasOMError
                      (       ddos12.asm):01595                 endc
                      (       ddos12.asm):01596         ;
                      (       ddos12.asm):01597         ; Copy updated track 20 to track 16
                      (       ddos12.asm):01598         ;
                      (       ddos12.asm):01599         ; Backup the directory to the alternate directory.
                      (       ddos12.asm):01600         ;
                      (       ddos12.asm):01601         ; No calling arguments.
                      (       ddos12.asm):01602         ;
                      (       ddos12.asm):01603         ; Stack frame.
                      (       ddos12.asm):01604         ;       $0008   Sector number
                      (       ddos12.asm):01605         ;       $0007   Sector number
                      (       ddos12.asm):01606         ;       $0006   Sector number
                      (       ddos12.asm):01607         ;       $0005   Sector number
                      (       ddos12.asm):01608         ;       $0004   Number of full buffers
                      (       ddos12.asm):01609         ;       $0003   Current sector number
                      (       ddos12.asm):01610         ;       $0002   User's drive number
                      (       ddos12.asm):01611         ;       $0001   Last error
                      (       ddos12.asm):01612         ;       $0000   bitmask for 'DTYDIR'
                      (       ddos12.asm):01613         ;
                      (       ddos12.asm):01614         
C734                  (       ddos12.asm):01615         DOSSyncDir   
C734 BDC67D           (       ddos12.asm):01616                 JSR     >TestAndFlushAll        ; Flush all buffers if needed
C737 3278             (       ddos12.asm):01617                 LEAS    -8,S                    ; Make room on stack
C739 33E4             (       ddos12.asm):01618                 LEAU    ,S                      ; Point U at stack frame
C73B 3144             (       ddos12.asm):01619                 LEAY    SyncSectors,U           ; point Y at sync sector table
                      (       ddos12.asm):01620                 
C73D 8E0800           (       ddos12.asm):01621                 LDX     #DosDiskBuffBase        ; Point at tempory buffer area
C740 9FEE             (       ddos12.asm):01622                 STX     <DiskBuffPtr
C742 6F42             (       ddos12.asm):01623                 CLR     SyncBufferNo,U          ; clear buffer no counter
C744 D6EB             (       ddos12.asm):01624                 LDB     <DosDriveNo             ; Get last accessed drive
C746 E741             (       ddos12.asm):01625                 STB     SyncDrive,U             ; Save it
C748 C601             (       ddos12.asm):01626                 LDB     #$01                    ; Drive counter shifted left to count
C74A E7C4             (       ddos12.asm):01627                 STB     ,U
C74C 0FEB             (       ddos12.asm):01628                 CLR     <DosDriveNo
C74E 8E06AA           (       ddos12.asm):01629                 LDX     #DosDirSecStatus-1      ; $06AA
                      (       ddos12.asm):01630                 
C751 C612             (       ddos12.asm):01631         LC751   LDB     #SectorsPerTrack        ; Sector count
C753 E743             (       ddos12.asm):01632                 STB     SyncSecNo,U
C755 0CEB             (       ddos12.asm):01633                 INC     <DosDriveNo
                      (       ddos12.asm):01634         
C757 E643             (       ddos12.asm):01635         LC757   LDB     SyncSecNo,U             ; get sector no
C759 A685             (       ddos12.asm):01636                 LDA     B,X                     ; get it's status byte
C75B A5C4             (       ddos12.asm):01637                 BITA    ,U                      ; test it
C75D 271E             (       ddos12.asm):01638                 BEQ     LC77D
                      (       ddos12.asm):01639                 
C75F 43               (       ddos12.asm):01640                 COMA
C760 A485             (       ddos12.asm):01641                 ANDA    B,X
C762 A785             (       ddos12.asm):01642                 STA     B,X
C764 6C42             (       ddos12.asm):01643                 INC     SyncBufferNo,U          ; move to next buffer
C766 D7ED             (       ddos12.asm):01644                 STB     <DskSectorNo
C768 E7A0             (       ddos12.asm):01645                 STB     ,Y+
C76A C614             (       ddos12.asm):01646                 LDB     #DirPrimary             ; Track 20
C76C D7EC             (       ddos12.asm):01647                 STB     <DskTrackNo             
C76E BDC104           (       ddos12.asm):01648                 JSR     >DosDoReadSec           ; Go read sector
                      (       ddos12.asm):01649                 
                      (       ddos12.asm):01650                 ifdef   PGSFix
                      (       ddos12.asm):01651                 BNE     LC794                   ; Error !
                      (       ddos12.asm):01652                 else
C771 268C             (       ddos12.asm):01653                 BNE     LC6FF                   ; Error !
                      (       ddos12.asm):01654                 endc
                      (       ddos12.asm):01655                 
C773 0CEE             (       ddos12.asm):01656                 INC     <DiskBuffPtr            ; use next disk buffer
C775 E642             (       ddos12.asm):01657                 LDB     SyncBufferNo,U          ; Check to see if we have filled all buffers
C777 C104             (       ddos12.asm):01658                 CMPB    #$04                    
C779 2502             (       ddos12.asm):01659                 BCS     LC77D                   ; nope keep going
C77B 8D1A             (       ddos12.asm):01660                 BSR     LC797                   ; flush them
                      (       ddos12.asm):01661                 
C77D 6A43             (       ddos12.asm):01662         LC77D   DEC     SyncSecNo,U             ; decrement sector no
C77F 26D6             (       ddos12.asm):01663                 BNE     LC757                   ; keep going if more sectors
                      (       ddos12.asm):01664                 
C781 6D42             (       ddos12.asm):01665                 TST     SyncBufferNo,U          ; any buffers in use ?, so sectors still waiting to be flushed ?
C783 2702             (       ddos12.asm):01666                 BEQ     LC787                   ; no  skip
C785 8D10             (       ddos12.asm):01667                 BSR     LC797                   ; yes : flush them
                      (       ddos12.asm):01668                 
C787 68C4             (       ddos12.asm):01669         LC787   ASL     ,U                      ; move to next drive                    
C789 A6C4             (       ddos12.asm):01670                 LDA     ,U                              
C78B 8108             (       ddos12.asm):01671                 CMPA    #$08                    ; done all drives ?     
C78D 23C2             (       ddos12.asm):01672                 BLS     LC751                   ; nope do next
                      (       ddos12.asm):01673                         
C78F A641             (       ddos12.asm):01674                 LDA     SyncDrive,U             ; Restore last used drive
C791 97EB             (       ddos12.asm):01675                 STA     <DosDriveNo
                      (       ddos12.asm):01676                 
                      (       ddos12.asm):01677                 ifdef   PGSFix
                      (       ddos12.asm):01678                 CLRB                            ; Flag no error
C793                  (       ddos12.asm):01679         LC794   LEAS    8,U                     ; Drop stack frame
                      (       ddos12.asm):01680                 else
C793 3248             (       ddos12.asm):01681                 LEAS    8,U                     ; Drop stack frame
C795 5F               (       ddos12.asm):01682                 CLRB                            ; Flag no error
                      (       ddos12.asm):01683                 endc
C796 39               (       ddos12.asm):01684                 RTS
                      (       ddos12.asm):01685         
C797 8610             (       ddos12.asm):01686         LC797   LDA     #DirBackup              ; Backup track no
C799 97EC             (       ddos12.asm):01687                 STA     <DskTrackNo
C79B 0AEE             (       ddos12.asm):01688         LC79B   DEC     <DiskBuffPtr            ; Move to previous buffer
C79D 313F             (       ddos12.asm):01689                 LEAY    -1,Y
C79F A6A4             (       ddos12.asm):01690                 LDA     ,Y
C7A1 97ED             (       ddos12.asm):01691                 STA     <DskSectorNo            ; Pickup sector no
C7A3 BDC101           (       ddos12.asm):01692                 JSR     >DosDoWriteSecV         ; Go write it
C7A6 2703             (       ddos12.asm):01693                 BEQ     LC7AB
                      (       ddos12.asm):01694                 
                      (       ddos12.asm):01695                 ifdef   PGSFix
                      (       ddos12.asm):01696                 LEAS    8,U
                      (       ddos12.asm):01697                 else
C7A8 3262             (       ddos12.asm):01698                 LEAS    2,S
                      (       ddos12.asm):01699                 endc
C7AA 39               (       ddos12.asm):01700                 RTS
                      (       ddos12.asm):01701         
C7AB 6A42             (       ddos12.asm):01702         LC7AB   DEC     SyncBufferNo,U          ; move to previous disk buffer
C7AD 26EC             (       ddos12.asm):01703                 BNE     LC79B
C7AF 39               (       ddos12.asm):01704         LC7AF   RTS
                      (       ddos12.asm):01705         
C7B0                  (       ddos12.asm):01706         FIRQSrv   
C7B0 7DFF21           (       ddos12.asm):01707                 TST     PIACRA                  ; Clear interrupt conditions 
C7B3 7DFF23           (       ddos12.asm):01708                 TST     PIACRB
C7B6 3B               (       ddos12.asm):01709                 RTI                             ; and return
                      (       ddos12.asm):01710         
                      (       ddos12.asm):01711         ;
                      (       ddos12.asm):01712         ; Validate and open a file.
                      (       ddos12.asm):01713         ;
                      (       ddos12.asm):01714         ; Entry conditions are as for DOSValidFilename (below).
                      (       ddos12.asm):01715         ; Exit conditions are as for DOSOpenFile if carry clear, else
                      (       ddos12.asm):01716         ; error code in B if carry set.
                      (       ddos12.asm):01717         ;
                      (       ddos12.asm):01718         
C7B7                  (       ddos12.asm):01719         DosValidateAndOpen
C7B7 8D05             (       ddos12.asm):01720                 BSR     DOSValidFilename        ; Validate filename
C7B9 26F4             (       ddos12.asm):01721                 BNE     LC7AF                   ; Error : exit
C7BB 7EC87C           (       ddos12.asm):01722                 JMP     >DOSOpenFile            ; Open file if valid
                      (       ddos12.asm):01723         
                      (       ddos12.asm):01724         ;
                      (       ddos12.asm):01725         ; Validate filename and copy to current drive block
                      (       ddos12.asm):01726         ;
                      (       ddos12.asm):01727         ;       On entry:
                      (       ddos12.asm):01728         ;         X points to filename e.g. '3:FILENAME.EXT'
                      (       ddos12.asm):01729         ;         B length of filename e.g. 0x0e
                      (       ddos12.asm):01730         ;         Y points to default extension to use if none is given e.g. 'DAT'.
                      (       ddos12.asm):01731         ;           Use '   ' for no default extension
                      (       ddos12.asm):01732         ;       
                      (       ddos12.asm):01733         ;       If no drive given default drive (DosDriveNo) is used.                   
                      (       ddos12.asm):01734         ;               
                      (       ddos12.asm):01735         ;       On Return:
                      (       ddos12.asm):01736         ;         Filename appears at $0650-$065a (DosCurFilename)
                      (       ddos12.asm):01737         ;         Current drive (DosCurDriveNo) is set
                      (       ddos12.asm):01738         ;         CC.Z clear on error
                      (       ddos12.asm):01739         ;         B contains error code
                      (       ddos12.asm):01740         ;         U $065b always (SuperDosE6)
                      (       ddos12.asm):01741         ;
                      (       ddos12.asm):01742         ; Filenames can be of the following formats :
                      (       ddos12.asm):01743         ;       "d:filename.ext"
                      (       ddos12.asm):01744         ;       "filename.ext:d"
                      (       ddos12.asm):01745         ;       "d:filename"
                      (       ddos12.asm):01746         ;       "filename:d"
                      (       ddos12.asm):01747         ;       "filename"
                      (       ddos12.asm):01748         ;       "filename.ext"
                      (       ddos12.asm):01749         ;
                      (       ddos12.asm):01750         
C7BE                  (       ddos12.asm):01751         DOSValidFilename   
                      (       ddos12.asm):01752                 ifdef   PGSFix
                      (       ddos12.asm):01753                 JSR     LDFF3                   ; prevent null / invalid filenames
                      (       ddos12.asm):01754                 else
C7BE B6060A           (       ddos12.asm):01755                 LDA     DosDefDriveNo
                      (       ddos12.asm):01756                 endc
                      (       ddos12.asm):01757                 
C7C1 B7065B           (       ddos12.asm):01758         LC7C1   STA     DosCurDriveNo           ; Set current drive number, default if non specified
C7C4 7F0660           (       ddos12.asm):01759                 CLR     DosCurCount
C7C7 CE0650           (       ddos12.asm):01760                 LDU     #DosCurDriveInfo        ; Point at current drive info
                      (       ddos12.asm):01761         
C7CA 8607             (       ddos12.asm):01762                 LDA     #$07                    ; Zero out first 8 bytes (filename)     
C7CC 6FC6             (       ddos12.asm):01763         LC7CC   CLR     A,U
C7CE 4A               (       ddos12.asm):01764                 DECA
C7CF 2AFB             (       ddos12.asm):01765                 BPL     LC7CC
                      (       ddos12.asm):01766                 
C7D1 A622             (       ddos12.asm):01767                 LDA     2,Y                     ; Transfer extension into current details
C7D3 B7065A           (       ddos12.asm):01768                 STA     DosCurExtension+2       ; $065A
C7D6 A621             (       ddos12.asm):01769                 LDA     1,Y
C7D8 B70659           (       ddos12.asm):01770                 STA     DosCurExtension+1       ; $0659
C7DB A6A4             (       ddos12.asm):01771                 LDA     ,Y
C7DD B70658           (       ddos12.asm):01772                 STA     DosCurExtension         ; $0658
                      (       ddos12.asm):01773         
C7E0 C10E             (       ddos12.asm):01774                 CMPB    #MaxFilenameLen         ; Filename too long ?
C7E2 2245             (       ddos12.asm):01775                 BHI     LC829                   ; Yep : error
                      (       ddos12.asm):01776                 
C7E4 C103             (       ddos12.asm):01777                 CMPB    #$03                    ; Long enough to contain drive no ?
C7E6 2529             (       ddos12.asm):01778                 BCS     LC811                   ; nope : skip on
                      (       ddos12.asm):01779                 
                      (       ddos12.asm):01780         ; Because of the order of compare a drive letter at the END of the filename always
                      (       ddos12.asm):01781         ; takes presedence, this would only be siginificant if the filename where something like
                      (       ddos12.asm):01782         ; '1:2' which would access a file called '1' on drive 2, and NOT 2 on drive 1
                      (       ddos12.asm):01783                 
C7E8 C002             (       ddos12.asm):01784                 SUBB    #$02                    ; Look for drive no at end of filename
C7EA A685             (       ddos12.asm):01785                 LDA     B,X
C7EC 813A             (       ddos12.asm):01786                 CMPA    #':'                    ; Seperator present ? $3A
C7EE 2606             (       ddos12.asm):01787                 BNE     LC7F6                   ; No skip on
C7F0 5C               (       ddos12.asm):01788                 INCB
C7F1 A685             (       ddos12.asm):01789                 LDA     B,X                     ; Get drive no
C7F3 5C               (       ddos12.asm):01790                 INCB
C7F4 200A             (       ddos12.asm):01791                 BRA     LC800
                      (       ddos12.asm):01792         
C7F6 CB02             (       ddos12.asm):01793         LC7F6   ADDB    #$02                    ; Check for drive at begining of path
C7F8 A601             (       ddos12.asm):01794                 LDA     1,X
C7FA 813A             (       ddos12.asm):01795                 CMPA    #':'                    ; Seperator present ? $3A
C7FC 2613             (       ddos12.asm):01796                 BNE     LC811                   ; nope, use default drive
                      (       ddos12.asm):01797                 
C7FE A681             (       ddos12.asm):01798                 LDA     ,X++                    ; Get ascii drive no
C800 8030             (       ddos12.asm):01799         LC800   SUBA    #$30                    ; Work out drive number
                      (       ddos12.asm):01800                 
                      (       ddos12.asm):01801                 ifdef   PGSFix
                      (       ddos12.asm):01802                 BLS     LC808
                      (       ddos12.asm):01803                 CMPA    #MaxDriveNo             ; Drive valid ?
                      (       ddos12.asm):01804                 BLS     LC810
C802                  (       ddos12.asm):01805         LC808   LDB     #$28
                      (       ddos12.asm):01806                 RTS
                      (       ddos12.asm):01807                 NOP                             ; nop for resync of assembled file
                      (       ddos12.asm):01808                 else
C802 1023FE93         (       ddos12.asm):01809                 LBLS    DosDNError              ; error if -ve
                      (       ddos12.asm):01810                 
C806 8104             (       ddos12.asm):01811                 CMPA    #MaxDriveNo             ; Drive valid ?
C808 1022FE8D         (       ddos12.asm):01812                 LBHI    DosDNError              ; error if too big
                      (       ddos12.asm):01813                 endc
                      (       ddos12.asm):01814                 
C80C B7065B           (       ddos12.asm):01815                 STA     DosCurDriveNo           ; Set current drive if specified
C80F C002             (       ddos12.asm):01816                 SUBB    #$02
                      (       ddos12.asm):01817         
                      (       ddos12.asm):01818         ; Parse filename looking for extension seperator
                      (       ddos12.asm):01819                 
C811 A680             (       ddos12.asm):01820         LC811   LDA     ,X+                     ; Get next char
C813 5A               (       ddos12.asm):01821         LC810   DECB                            ; Decrement path count
C814 2B64             (       ddos12.asm):01822                 BMI     LC87A                   ; Reached end : yes skip
                      (       ddos12.asm):01823                 
C816 812F             (       ddos12.asm):01824                 CMPA    #'/'                    ; Check for slash $2F
C818 2704             (       ddos12.asm):01825                 BEQ     LC81E
                      (       ddos12.asm):01826         
C81A 812E             (       ddos12.asm):01827                 CMPA    #'.'                    ; Check for period $2E
C81C 261C             (       ddos12.asm):01828                 BNE     LC83A
                      (       ddos12.asm):01829         
C81E 11830650         (       ddos12.asm):01830         LC81E   CMPU    #DosCurDriveInfo        ; $0650
C822 2705             (       ddos12.asm):01831                 BEQ     LC829
                      (       ddos12.asm):01832                 
C824 7D0660           (       ddos12.asm):01833                 TST     DosCurCount             ; First pass ?
C827 2703             (       ddos12.asm):01834                 BEQ     LC82C                   ; yes : skip on
                      (       ddos12.asm):01835         
C829 C696             (       ddos12.asm):01836         LC829   LDB     #ErrFS          ; Error : bad filespec 
C82B 39               (       ddos12.asm):01837                 RTS
                      (       ddos12.asm):01838         
C82C 7C0660           (       ddos12.asm):01839         LC82C   INC     DosCurCount             ; Mark second pass
C82F CE0658           (       ddos12.asm):01840                 LDU     #DosCurExtension        ; $0658
C832 6FC4             (       ddos12.asm):01841                 CLR     ,U                      ; Zero out extension
C834 6F41             (       ddos12.asm):01842                 CLR     1,U
C836 6F42             (       ddos12.asm):01843                 CLR     2,U
C838 20D7             (       ddos12.asm):01844                 BRA     LC811
                      (       ddos12.asm):01845         
                      (       ddos12.asm):01846         ; Validate filename chars
                      (       ddos12.asm):01847         
C83A 8141             (       ddos12.asm):01848         LC83A   CMPA    #'A'                    ; $41
C83C 2510             (       ddos12.asm):01849                 BCS     LC84E                   ; Below, check if still valid
                      (       ddos12.asm):01850                 
C83E 815A             (       ddos12.asm):01851                 CMPA    #'Z'                    ; $5A
C840 2318             (       ddos12.asm):01852                 BLS     LC85A                   ; valid, skip on
                      (       ddos12.asm):01853                 
C842 8020             (       ddos12.asm):01854                 SUBA    #$20                    ; Convert to lower case if upper
C844 8141             (       ddos12.asm):01855                 CMPA    #'A'                    ; $41
C846 25E1             (       ddos12.asm):01856                 BCS     LC829                   ; Invalid, return error
                      (       ddos12.asm):01857                 
C848 815A             (       ddos12.asm):01858                 CMPA    #'Z'                    ; $5A
C84A 230E             (       ddos12.asm):01859                 BLS     LC85A                   ; Valid: skip on
C84C 20DB             (       ddos12.asm):01860                 BRA     LC829
                      (       ddos12.asm):01861         
C84E 812D             (       ddos12.asm):01862         LC84E   CMPA    #'-'                    ; $2D
C850 2708             (       ddos12.asm):01863                 BEQ     LC85A                   ; Valid skip on
                      (       ddos12.asm):01864                 
C852 8130             (       ddos12.asm):01865                 CMPA    #'0'                    ; $30
C854 25D3             (       ddos12.asm):01866                 BCS     LC829                   ; Invalid : error
                      (       ddos12.asm):01867                 
C856 8139             (       ddos12.asm):01868                 CMPA    #'9'                    ; $39
C858 22CF             (       ddos12.asm):01869                 BHI     LC829                   ; Invalid : error
                      (       ddos12.asm):01870                 
C85A A7C0             (       ddos12.asm):01871         LC85A   STA     ,U+                     ; Save char in path
C85C 1183065B         (       ddos12.asm):01872                 CMPU    #DosCurDriveNo          ; Path full ?
C860 2605             (       ddos12.asm):01873                 BNE     LC867                   ; nope : skip
                      (       ddos12.asm):01874                 
C862 5D               (       ddos12.asm):01875                 TSTB                            ; Done all path chars ?
C863 26C4             (       ddos12.asm):01876                 BNE     LC829                   ; nope : error !
C865 2013             (       ddos12.asm):01877                 BRA     LC87A
                      (       ddos12.asm):01878         
C867 11830658         (       ddos12.asm):01879         LC867   CMPU    #DosCurExtension        ; Reached extension ? $0658
C86B 26A4             (       ddos12.asm):01880                 BNE     LC811
                      (       ddos12.asm):01881                 
C86D A680             (       ddos12.asm):01882                 LDA     ,X+                     ; Get next 
C86F 5A               (       ddos12.asm):01883                 DECB                            ; Dec count
C870 2B08             (       ddos12.asm):01884                 BMI     LC87A                   ; Done, return
                      (       ddos12.asm):01885                 
C872 812E             (       ddos12.asm):01886                 CMPA    #'.'                    ; Check for seperator $2E
C874 27A8             (       ddos12.asm):01887                 BEQ     LC81E                   ; yep loop back
                      (       ddos12.asm):01888                 
C876 812F             (       ddos12.asm):01889                 CMPA    #'/'                    ; Check for seperator $2F
C878 27A4             (       ddos12.asm):01890                 BEQ     LC81E                   ; Yep loop back
                      (       ddos12.asm):01891                 
C87A 5F               (       ddos12.asm):01892         LC87A   CLRB
C87B 39               (       ddos12.asm):01893                 RTS
                      (       ddos12.asm):01894         
                      (       ddos12.asm):01895         ;
                      (       ddos12.asm):01896         ; Open a file and copy dir entry into FCB.
                      (       ddos12.asm):01897         ;
                      (       ddos12.asm):01898         ; The name in DosCurFilename is searched for in the FIBs, if found then
                      (       ddos12.asm):01899         ; the FIB number is returned in A. If not found a FIB is created and the
                      (       ddos12.asm):01900         ; disk is searched for the filaname. If not file is found ErrNE is returned
                      (       ddos12.asm):01901         ; in B.
                      (       ddos12.asm):01902         ;
                      (       ddos12.asm):01903         ;  On entry:
                      (       ddos12.asm):01904         ;           Filename at DosCurFilename
                      (       ddos12.asm):01905         ;           Drive no at DosCurDriveNo   
                      (       ddos12.asm):01906         ;         Returns:
                      (       ddos12.asm):01907         ;           CC.Z clear on error
                      (       ddos12.asm):01908         ;           A FIB number (0-9)
                      (       ddos12.asm):01909         ;           B contains error code
                      (       ddos12.asm):01910         ;
                      (       ddos12.asm):01911         
C87C                  (       ddos12.asm):01912         DOSOpenFile   
C87C 8E06BD           (       ddos12.asm):01913                 LDX     #DosFCB0Addr            ; Point to first FCB
C87F 0FF1             (       ddos12.asm):01914                 CLR     <DosCurrCtrlBlk
C881 FC0650           (       ddos12.asm):01915                 LDD     DosCurDriveInfo         ; Get first 2 bytes of current drive info
C884 10A384           (       ddos12.asm):01916         LC884   CMPD    ,X                      ; Does this FCB point to it ?
C887 2616             (       ddos12.asm):01917                 BNE     LC89F                   ; Nope : check next
                      (       ddos12.asm):01918                 
                      (       ddos12.asm):01919         ; Found matching first 2 bytes of name in an FCB
                      (       ddos12.asm):01920                 
C889 CE0652           (       ddos12.asm):01921                 LDU     #DosCurDriveInfo+2      ; Check bytes 2..end of filename
C88C 3102             (       ddos12.asm):01922                 LEAY    2,X                     ; Compare from byte 2 of FCB
C88E C60A             (       ddos12.asm):01923                 LDB     #$0A                    ; Do 10 bytes, rest of filename + ext
C890 A6C0             (       ddos12.asm):01924         LC890   LDA     ,U+                     ; Get a byte from current
C892 A1A0             (       ddos12.asm):01925                 CMPA    ,Y+                     ; compare to FCB
C894 2606             (       ddos12.asm):01926                 BNE     LC89C                   ; Don't match : exit check
C896 5A               (       ddos12.asm):01927                 DECB                            ; Decrement counter
C897 26F7             (       ddos12.asm):01928                 BNE     LC890                   ; Not at end : do next
C899 1600AB           (       ddos12.asm):01929                 LBRA    LC947
                      (       ddos12.asm):01930         
                      (       ddos12.asm):01931         
                      (       ddos12.asm):01932         ; Move to check next FCB
                      (       ddos12.asm):01933         
C89C FC0650           (       ddos12.asm):01934         LC89C   LDD     DosCurDriveInfo         ; Re-get first 2 chars of current filaname
C89F 30881F           (       ddos12.asm):01935         LC89F   LEAX    DosFCBLength,X          ; Skip to next FCB
C8A2 0CF1             (       ddos12.asm):01936                 INC     <DosCurrCtrlBlk         ; Set current control block
C8A4 8C07F3           (       ddos12.asm):01937                 CMPX    #DosFCBEnd              ; End of blocks ?
C8A7 25DB             (       ddos12.asm):01938                 BCS     LC884                   ; No, loop back and check this block
                      (       ddos12.asm):01939                 
C8A9 0FF1             (       ddos12.asm):01940                 CLR     <DosCurrCtrlBlk         ; Set current block to zero
C8AB 8E06BD           (       ddos12.asm):01941                 LDX     #DosFCB0Addr            ; Point at first FCB
                      (       ddos12.asm):01942         
C8AE 6D84             (       ddos12.asm):01943         LC8AE   TST     ,X                      ; FCB in use ?
C8B0 270D             (       ddos12.asm):01944                 BEQ     LC8BF                   ; No : skip on
                      (       ddos12.asm):01945                 
C8B2 30881F           (       ddos12.asm):01946                 LEAX    DosFCBLength,X          ; Check next FCB
C8B5 0CF1             (       ddos12.asm):01947                 INC     <DosCurrCtrlBlk         
C8B7 8C07F3           (       ddos12.asm):01948                 CMPX    #DosFCBEnd              ; Done all FCBs
C8BA 25F2             (       ddos12.asm):01949                 BCS     LC8AE                   ; No : check next, yes error, can't open file, no free FCBS
C8BC C6A2             (       ddos12.asm):01950                 LDB     #ErrTF          ; error : too many files open
C8BE 39               (       ddos12.asm):01951         LC8BE   RTS
                      (       ddos12.asm):01952         
C8BF C60C             (       ddos12.asm):01953         LC8BF   LDB     #$0C                    ; Copy 12 characters of filename
C8C1 1F12             (       ddos12.asm):01954                 TFR     X,Y                     ; Point Y at selected FCB
C8C3 CE0650           (       ddos12.asm):01955                 LDU     #DosCurDriveInfo        ; Point at current info
C8C6 A6C0             (       ddos12.asm):01956         LC8C6   LDA     ,U+                     ; Copy filename
C8C8 A7A0             (       ddos12.asm):01957                 STA     ,Y+
C8CA 5A               (       ddos12.asm):01958                 DECB                            ; Dec count
C8CB 26F9             (       ddos12.asm):01959                 BNE     LC8C6                   ; if not all done : do next
                      (       ddos12.asm):01960                 
C8CD 97EB             (       ddos12.asm):01961                 STA     <DosDriveNo             ; Save current drive
                      (       ddos12.asm):01962         
                      (       ddos12.asm):01963         ; Note in disassembled superdos source, the following was LDU #$0616, which is part of the error line !
                      (       ddos12.asm):01964         ; This makes no sense, and is Drv0Details, in DragonDos source, I think I just fixed a 20 year old
                      (       ddos12.asm):01965         ; bug !!!!!!
                      (       ddos12.asm):01966         
C8CF CE061C           (       ddos12.asm):01967                 LDU     #Drv0Details            ; Get drive details      
C8D2 C606             (       ddos12.asm):01968                 LDB     #DrvDeatailLen          ; 6 bytes/drive
C8D4 3D               (       ddos12.asm):01969                 MUL
C8D5 33CB             (       ddos12.asm):01970                 LEAU    D,U                     ; Point at drive detail block
C8D7 6C45             (       ddos12.asm):01971                 INC     DrvDetUseCnt,U          ; Increment usage/open file count       
                      (       ddos12.asm):01972                 
C8D9 C613             (       ddos12.asm):01973                 LDB     #$13                    ; Clear rest of FCB
C8DB 6FA0             (       ddos12.asm):01974         LC8DB   CLR     ,Y+
C8DD 5A               (       ddos12.asm):01975                 DECB                            ; Dec counter
C8DE 26FB             (       ddos12.asm):01976                 BNE     LC8DB                   ; Loop if more
                      (       ddos12.asm):01977                 
C8E0 8680             (       ddos12.asm):01978                 LDA     #AttrDeleted            ; Flag file as deleted by default
C8E2 A70F             (       ddos12.asm):01979                 STA     FCBDirFlags,X
                      (       ddos12.asm):01980                 
C8E4 7F0681           (       ddos12.asm):01981                 CLR     DosTempFileNo           ; start temp fileno at 0
C8E7 BDD17D           (       ddos12.asm):01982                 JSR     >DosGetDiskGeometry     ; get disk geometry
C8EA 26D2             (       ddos12.asm):01983                 BNE     LC8BE                   ; error : exit
                      (       ddos12.asm):01984                 
C8EC 10AE84           (       ddos12.asm):01985                 LDY     ,X                      ; get LSN number from buffer                    
C8EF 3122             (       ddos12.asm):01986                 LEAY    2,Y                     ; add 2
C8F1 8610             (       ddos12.asm):01987                 LDA     #DIRSecCount            ; set number of sectors to scan
C8F3 B70660           (       ddos12.asm):01988                 STA     DosCurCount
                      (       ddos12.asm):01989         
C8F6 10BF065C         (       ddos12.asm):01990         LC8F6   STY     DosLSNCounter           ; save LSN
C8FA BDD247           (       ddos12.asm):01991                 JSR     >DOSFindAndRead         ; go read it
C8FD 26BF             (       ddos12.asm):01992                 BNE     LC8BE                   ; error
                      (       ddos12.asm):01993                 
C8FF AE05             (       ddos12.asm):01994                 LDX     BuffAddr,X              ; get address of data buffer
C901 338900FA         (       ddos12.asm):01995                 LEAU    DirLastByte,X           ; point U at first byte after last entry
C905 FF065E           (       ddos12.asm):01996                 STU     DosSaveBuffAddr         ; save buff addr
                      (       ddos12.asm):01997         
C908 A684             (       ddos12.asm):01998         LC908   LDA     ,X                      ; get first data byte (attribute)
C90A 8581             (       ddos12.asm):01999                 BITA    #(AttrDeleted+AttrIsCont) ; is this a deleted or continuation entry ?   
C90C 261A             (       ddos12.asm):02000                 BNE     LC928
                      (       ddos12.asm):02001         
C90E FC0650           (       ddos12.asm):02002                 LDD     DosCurFilename          ; get first 2 characters of filename
C911 10A301           (       ddos12.asm):02003                 CMPD    DirEntFilename,X        ; compare to directory entry
C914 2612             (       ddos12.asm):02004                 BNE     LC928                   ; not the same, skip to next
                      (       ddos12.asm):02005         
C916 CE0652           (       ddos12.asm):02006                 LDU     #DosCurFilename+2       ; check the rest of the name
C919 3103             (       ddos12.asm):02007                 LEAY    DirEntFilename+2,X      ; point to name[2] in entry             
C91B C609             (       ddos12.asm):02008                 LDB     #$09                    ; check 9 characters, 6 left from name + 3 from extension
C91D A6C0             (       ddos12.asm):02009         LC91D   LDA     ,U+                     ; get character from name
C91F A1A0             (       ddos12.asm):02010                 CMPA    ,Y+                     ; compare to dir entry
C921 2605             (       ddos12.asm):02011                 BNE     LC928                   ; not equal : give up
                      (       ddos12.asm):02012                 
C923 5A               (       ddos12.asm):02013                 DECB                            ; decrement character count
C924 26F7             (       ddos12.asm):02014                 BNE     LC91D                   ; keep going if more to compare
                      (       ddos12.asm):02015                 
C926 202C             (       ddos12.asm):02016                 BRA     LC954                   ; if we get here then we have a match
                      (       ddos12.asm):02017         
C928 A684             (       ddos12.asm):02018         LC928   LDA     ,X                      ; get first data byte (attribute)
C92A 8508             (       ddos12.asm):02019                 BITA    #AttrEndOfDir           ; end of directory ?
C92C 2616             (       ddos12.asm):02020                 BNE     LC944                   ; yep 
                      (       ddos12.asm):02021                 
C92E 7C0681           (       ddos12.asm):02022                 INC     DosTempFileNo           ; Move to next fileno
C931 308819           (       ddos12.asm):02023                 LEAX    DirEntryLen,X           ; move to next dir entry in sector
C934 BC065E           (       ddos12.asm):02024                 CMPX    DosSaveBuffAddr         ; beyond last entry ?
C937 25CF             (       ddos12.asm):02025                 BCS     LC908                   ; nope process next entry
                      (       ddos12.asm):02026                 
C939 10BE065C         (       ddos12.asm):02027                 LDY     DosLSNCounter           ; get current DIR LSN
C93D 3121             (       ddos12.asm):02028                 LEAY    1,Y                     ; increment it
C93F 7A0660           (       ddos12.asm):02029                 DEC     DosCurCount             ; decrement directory sector count
C942 26B2             (       ddos12.asm):02030                 BNE     LC8F6                   ; if any left loop again
                      (       ddos12.asm):02031                 
C944 BDCEAC           (       ddos12.asm):02032         LC944   JSR     >DosFCBNoToAddr         ; get FCB address
C947 5F               (       ddos12.asm):02033         LC947   CLRB
C948 6D0F             (       ddos12.asm):02034                 TST     FCBDirFlags,X           ; check flags
C94A 2A02             (       ddos12.asm):02035                 BPL     LC94E                   ; not a deleted file
                      (       ddos12.asm):02036                 
C94C C6A0             (       ddos12.asm):02037                 LDB     #ErrNE          ; flag file does not exist
C94E 300C             (       ddos12.asm):02038         LC94E   LEAX    FCBFilePointer,X        ; point to file pointer !!!
C950 96F1             (       ddos12.asm):02039                 LDA     <DosCurrCtrlBlk
C952 5D               (       ddos12.asm):02040                 TSTB                            ; set CC.Z on error
C953 39               (       ddos12.asm):02041                 RTS
                      (       ddos12.asm):02042         
C954 3410             (       ddos12.asm):02043         LC954   PSHS    X                       ; save dir entry pointer
C956 BDCEAC           (       ddos12.asm):02044                 JSR     >DosFCBNoToAddr         ; get FCB address
C959 3520             (       ddos12.asm):02045                 PULS    Y                       ; recover dir entry pointer
C95B B60681           (       ddos12.asm):02046                 LDA     DosTempFileNo           ; get file no
                      (       ddos12.asm):02047                 
                      (       ddos12.asm):02048         ; Fill in FCB
                      (       ddos12.asm):02049         
C95E A7881D           (       ddos12.asm):02050                 STA     FCBDiskFileNo,X         ; fill in fileno
C961 A6A4             (       ddos12.asm):02051                 LDA     ,Y
C963 A70F             (       ddos12.asm):02052                 STA     FCBDirFlags,X           ; attribute
                      (       ddos12.asm):02053                 
C965 EC2C             (       ddos12.asm):02054                 LDD     DirEntFnBlock1,Y
C967 ED8815           (       ddos12.asm):02055                 STD     FCBLSNExtent1,X         ; LSN of extent 1
                      (       ddos12.asm):02056                 
C96A A62E             (       ddos12.asm):02057                 LDA     DirEntFnBlock1+2,Y
C96C A78817           (       ddos12.asm):02058                 STA     FCBSecExtent1,X         ; sector count of extent 1
C96F A78819           (       ddos12.asm):02059                 STA     FCBFSNExtent2+1,X
                      (       ddos12.asm):02060                 
C972 6F8818           (       ddos12.asm):02061                 CLR     FCBFSNExtent2,X
C975 6F8813           (       ddos12.asm):02062                 CLR     FCBFSNExtent1,X         ; Clear FSN 
C978 6F8814           (       ddos12.asm):02063                 CLR     FCBFSNExtent1+1,X
                      (       ddos12.asm):02064                 
C97B EC2F             (       ddos12.asm):02065                 LDD     DirEntFnBlock2,Y        ; LSN of extent 2
C97D ED881A           (       ddos12.asm):02066                 STD     FCBLSNExtent2,X
                      (       ddos12.asm):02067                 
C980 A6A811           (       ddos12.asm):02068                 LDA     DirEntFnBlock2+2,Y      ; sector count of extent 2
C983 A7881C           (       ddos12.asm):02069                 STA     FCBSecExtent2,X
                      (       ddos12.asm):02070                 
C986 CCFFFF           (       ddos12.asm):02071                 LDD     #$FFFF                  ; set file len to -1
C989 ED8810           (       ddos12.asm):02072                 STD     FCBFileLen,X            
C98C A78812           (       ddos12.asm):02073                 STA     FCBFileLen+2,X
C98F 20B6             (       ddos12.asm):02074                 BRA     LC947
                      (       ddos12.asm):02075         
                      (       ddos12.asm):02076         ;
                      (       ddos12.asm):02077         ; Read from a file.
                      (       ddos12.asm):02078         ;
                      (       ddos12.asm):02079         ; Entry :
                      (       ddos12.asm):02080         ;       A = FCB no
                      (       ddos12.asm):02081         ;       X = pointer to buffer to receive data
                      (       ddos12.asm):02082         ;       Y = no of bytes to read
                      (       ddos12.asm):02083         ;       U = MSW of file offset (FSN sector no).
                      (       ddos12.asm):02084         ;       B = LSB of file offset (byte within sector).
                      (       ddos12.asm):02085         ;               U:B is effectivly the filepointer.
                      (       ddos12.asm):02086         ; Exit:
                      (       ddos12.asm):02087         ;       B = Error code
                      (       ddos12.asm):02088         ;       X = no of bytes *NOT* read if error = EOF
                      (       ddos12.asm):02089         ;
                      (       ddos12.asm):02090         ; Secondary entry points :
                      (       ddos12.asm):02091         ;       RWrite  called by DOSFWrite
                      (       ddos12.asm):02092         ;       Verify  called by DOSFWrite
                      (       ddos12.asm):02093         ;
C991                  (       ddos12.asm):02094         DOSFRead   
C991 0FF5             (       ddos12.asm):02095                 CLR     <DosRWFlag              ; Flag this is a read
C993 97F1             (       ddos12.asm):02096                 STA     <DosCurrCtrlBlk         ; set control block
C995 2007             (       ddos12.asm):02097                 BRA     LC99E                   ; skip ahead
                      (       ddos12.asm):02098         
C997                  (       ddos12.asm):02099         RWrite   
C997 8601             (       ddos12.asm):02100                 LDA     #FileOpWrite            ; Flag this is a write
C999 8C               (       ddos12.asm):02101                 FCB     CSkip2
                      (       ddos12.asm):02102         
C99A                  (       ddos12.asm):02103         Verify   
C99A 86FF             (       ddos12.asm):02104                 LDA     #FileOpVerify           ; Flag this is a verify
C99C 97F5             (       ddos12.asm):02105                 STA     <DosRWFlag
                      (       ddos12.asm):02106                 
C99E 10BF0661         (       ddos12.asm):02107         LC99E   STY     DosBytesRead            ; save byte count
C9A2 102700E3         (       ddos12.asm):02108                 LBEQ    DosFReadExit            ; no bytes : exit
                      (       ddos12.asm):02109                 
C9A6 FF0669           (       ddos12.asm):02110                 STU     DosCurrSector           ; save file pointer
C9A9 F70663           (       ddos12.asm):02111                 STB     DosSecOffset
C9AC 3410             (       ddos12.asm):02112                 PSHS    X                       ; save buffer pointer
                      (       ddos12.asm):02113                 
C9AE BDCEAC           (       ddos12.asm):02114                 JSR     >DosFCBNoToAddr         ; convert FCB no to address in X
                      (       ddos12.asm):02115                 
C9B1 A60B             (       ddos12.asm):02116                 LDA     FCBDrive,X              ; get drive number
C9B3 97EB             (       ddos12.asm):02117                 STA     <DosDriveNo
                      (       ddos12.asm):02118                 
C9B5 0DF5             (       ddos12.asm):02119                 TST     <DosRWFlag              ; Is this a read or write ?
C9B7 260B             (       ddos12.asm):02120                 BNE     LC9C4                   ; if write skip on
                      (       ddos12.asm):02121                 
C9B9 FC0661           (       ddos12.asm):02122                 LDD     DosBytesRead            ; get bytes read so far
C9BC E30D             (       ddos12.asm):02123                 ADDD    FCBFilePointer+1,X      ; add LSW of fileptr
C9BE 2402             (       ddos12.asm):02124                 BCC     LC9C2                   ; any carry ?
                      (       ddos12.asm):02125                 
C9C0 6C0C             (       ddos12.asm):02126                 INC     FCBFilePointer,X        ; carry to MSB
C9C2 ED0D             (       ddos12.asm):02127         LC9C2   STD     FCBFilePointer+1,X      ; update fileptr
                      (       ddos12.asm):02128         
C9C4 3510             (       ddos12.asm):02129         LC9C4   PULS    X                       ; recover data buffer ptr       
                      (       ddos12.asm):02130         
C9C6 F60663           (       ddos12.asm):02131                 LDB     DosSecOffset            ; get offset into last sector
C9C9 4F               (       ddos12.asm):02132         LC9C9   CLRA            
C9CA 50               (       ddos12.asm):02133                 NEGB                            ; distance to end of sector             
C9CB 2601             (       ddos12.asm):02134                 BNE     LC9CE                   ; not zero, skip
                      (       ddos12.asm):02135                 
C9CD 4C               (       ddos12.asm):02136                 INCA                            ; increment MSB
C9CE 10B30661         (       ddos12.asm):02137         LC9CE   CMPD    DosBytesRead            ; read all bytes yet ?
C9D2 2303             (       ddos12.asm):02138                 BLS     LC9D7                   ; nope 
                      (       ddos12.asm):02139                 
C9D4 FC0661           (       ddos12.asm):02140                 LDD     DosBytesRead            ; get bytes read
C9D7 3416             (       ddos12.asm):02141         LC9D7   PSHS    D,X                     ; save 
C9D9 FE0669           (       ddos12.asm):02142                 LDU     DosCurrSector           ; get current FSN
C9DC BDCA8B           (       ddos12.asm):02143                 JSR     >FSNtoLSN               ; convert to LSN
C9DF 260E             (       ddos12.asm):02144                 BNE     DosFReadErrorExit                       ; error, tydy up stack and return
                      (       ddos12.asm):02145                 
C9E1 1F02             (       ddos12.asm):02146                 TFR     D,Y                     ; transfer LSN to Y     
                      (       ddos12.asm):02147                 
C9E3 A60F             (       ddos12.asm):02148                 LDA     FCBDirFlags,X           ; get directory flags from FIB
C9E5 8502             (       ddos12.asm):02149                 BITA    #AttrWriteProt          ; is the file protected?
C9E7 2709             (       ddos12.asm):02150                 BEQ     LC9F2                   ; no skip
                      (       ddos12.asm):02151                 
C9E9 0DF5             (       ddos12.asm):02152                 TST     <DosRWFlag              ; are we reading or writing?
C9EB 2705             (       ddos12.asm):02153                 BEQ     LC9F2                   ; writing, and protected!
C9ED C698             (       ddos12.asm):02154                 LDB     #ErrPT                  ; protected error
C9EF                  (       ddos12.asm):02155         DosFReadErrorExit   
C9EF 3264             (       ddos12.asm):02156                 LEAS    4,S                     ; clean up stack
C9F1 39               (       ddos12.asm):02157                 RTS                             ; return
                      (       ddos12.asm):02158         
C9F2 AE62             (       ddos12.asm):02159         LC9F2   LDX     2,S                     ; get pointer to buffer                 
C9F4 6D61             (       ddos12.asm):02160                 TST     1,S                     ; test MSB of length
C9F6 262A             (       ddos12.asm):02161                 BNE     LCA22                   ; skip ahead if nonzero
                      (       ddos12.asm):02162                 
C9F8 0DF5             (       ddos12.asm):02163                 TST     <DosRWFlag              ; are we reading or writing?
C9FA 2707             (       ddos12.asm):02164                 BEQ     LCA03                   ; reading, do it
                      (       ddos12.asm):02165                 
C9FC 2A0A             (       ddos12.asm):02166                 BPL     LCA08                   ; writing, do it
C9FE BDD303           (       ddos12.asm):02167                 JSR     >DosVerifyAbsSector     ; else go verify it
CA01 2008             (       ddos12.asm):02168                 BRA     LCA0B                   ; skip on
                      (       ddos12.asm):02169         
CA03 BDD30A           (       ddos12.asm):02170         LCA03   JSR     >DOSReadAbsSector       ; read the sector
CA06 2003             (       ddos12.asm):02171                 BRA     LCA0B                   ; skip on
                      (       ddos12.asm):02172         
CA08 BDD2FA           (       ddos12.asm):02173         LCA08   JSR     >DOSWriteAbsSector      ; write the sector
CA0B 26E2             (       ddos12.asm):02174         LCA0B   BNE     DosFReadErrorExit               ; error clean up stack and exit
                      (       ddos12.asm):02175         
CA0D 6C62             (       ddos12.asm):02176                 INC     2,S                     ; increment MSB of buffer
CA0F BE0669           (       ddos12.asm):02177                 LDX     DosCurrSector           ; increment current sector
CA12 3001             (       ddos12.asm):02178                 LEAX    1,X
CA14 BF0669           (       ddos12.asm):02179                 STX     DosCurrSector           ; and save it back
CA17 7A0661           (       ddos12.asm):02180                 DEC     DosBytesRead            ; decrement MSB of length
CA1A FC0661           (       ddos12.asm):02181                 LDD     DosBytesRead            ; get length
CA1D 3516             (       ddos12.asm):02182                 PULS    D,X                     ; restore length & pointer (flags unchanged)
CA1F 26A8             (       ddos12.asm):02183                 BNE     LC9C9                   ; keep going if more to do      
CA21 39               (       ddos12.asm):02184                 RTS                             ; otherwise return to caller
                      (       ddos12.asm):02185         
CA22 0DF5             (       ddos12.asm):02186         LCA22   TST     <DosRWFlag              ; skip this part on verify
CA24 2B46             (       ddos12.asm):02187                 BMI     RWNext                  
                      (       ddos12.asm):02188                 
CA26 BDD247           (       ddos12.asm):02189                 JSR     >DOSFindAndRead         ; read next sector to buffer
CA29 26C4             (       ddos12.asm):02190                 BNE     DosFReadErrorExit       ; error, exit
                      (       ddos12.asm):02191                 
CA2B BF0667           (       ddos12.asm):02192                 STX     DosPageBufAddr          ; save page buffer pointer
CA2E 10AE62           (       ddos12.asm):02193                 LDY     2,S                     ; get user buffer ptr
CA31 F60663           (       ddos12.asm):02194                 LDB     DosSecOffset            ; get offset into the sector 
CA34 0DF5             (       ddos12.asm):02195                 TST     <DosRWFlag              ; reading or writing?
CA36 2728             (       ddos12.asm):02196                 BEQ     LCA60                   ; branch if reading
                      (       ddos12.asm):02197         
                      (       ddos12.asm):02198         ; This code is used if we are writing   
CA38 86FF             (       ddos12.asm):02199                 LDA     #BuffDirty              ; mark buffer dirty                                     
CA3A A702             (       ddos12.asm):02200                 STA     BuffFlag,X
CA3C AE05             (       ddos12.asm):02201                 LDX     BuffAddr,X              ; get address of data in buffer 
CA3E 3A               (       ddos12.asm):02202                 ABX                             ; add offset within sector
                      (       ddos12.asm):02203                 
CA3F 1F10             (       ddos12.asm):02204                 TFR     X,D                     ; Deleted from DDv2 as redundent
CA41 5A               (       ddos12.asm):02205                 DECB                            ; Deleted from DDv2 as redundent
CA42 2400             (       ddos12.asm):02206                 BCC     LCA44                   ; Deleted from DDv2 as redundent
                      (       ddos12.asm):02207                 
CA44 E661             (       ddos12.asm):02208         LCA44   LDB     1,S                     ; get byte count
CA46 A6A0             (       ddos12.asm):02209         LCA46   LDA     ,Y+                     ; get data from user's buffer
CA48 A780             (       ddos12.asm):02210                 STA     ,X+                     ; put in disk read buffer
CA4A 5A               (       ddos12.asm):02211                 DECB                            ; decrement count
CA4B 26F9             (       ddos12.asm):02212                 BNE     LCA46                   ; keep going until all done
                      (       ddos12.asm):02213                 
CA4D 1F10             (       ddos12.asm):02214                 TFR     X,D                     ; get disk buffer pointer into d
CA4F 5D               (       ddos12.asm):02215                 TSTB                            ; reached end of buffer?
CA50 261A             (       ddos12.asm):02216                 BNE     RWNext                  ; nope
                      (       ddos12.asm):02217                 
CA52 BE0667           (       ddos12.asm):02218                 LDX     DosPageBufAddr          ; get Page buffer address in X
CA55 3420             (       ddos12.asm):02219                 PSHS    Y                       ; save Y
CA57 BDD2B4           (       ddos12.asm):02220                 JSR     >TestAndFlushBuffer     ; flush the buffer to disk
CA5A 3520             (       ddos12.asm):02221                 PULS    Y                       ; restore Y
CA5C 2691             (       ddos12.asm):02222                 BNE     DosFReadErrorExit       ; error, exit
CA5E 200C             (       ddos12.asm):02223                 BRA     RWNext                  ; keep going
                      (       ddos12.asm):02224         
                      (       ddos12.asm):02225         ; this code is used if we are reading
CA60 AE05             (       ddos12.asm):02226         LCA60   LDX     BuffAddr,X              ; get address of data in buffer 
CA62 3A               (       ddos12.asm):02227                 ABX                             ; add offset within buffer
CA63 E661             (       ddos12.asm):02228                 LDB     1,S                     ; lsb of length of data
CA65 A680             (       ddos12.asm):02229         LCA65   LDA     ,X+                     ; fetch a byte from disk buffer
CA67 A7A0             (       ddos12.asm):02230                 STA     ,Y+                     ; write a byte to user's buffer
CA69 5A               (       ddos12.asm):02231                 DECB                            ; decrement byte count
CA6A 26F9             (       ddos12.asm):02232                 BNE     LCA65                   ; keep going until all done
                      (       ddos12.asm):02233         
                      (       ddos12.asm):02234         ; read / write next sector
CA6C BE0669           (       ddos12.asm):02235         RWNext  LDX     DosCurrSector           ; move to the next LSN
CA6F 3001             (       ddos12.asm):02236                 LEAX    1,X
CA71 BF0669           (       ddos12.asm):02237                 STX     DosCurrSector           ; save it back
CA74 1F21             (       ddos12.asm):02238                 TFR     Y,X                     ; user's buffer to X    
CA76 FC0661           (       ddos12.asm):02239                 LDD     DosBytesRead            ; get bytes read
CA79 A3E1             (       ddos12.asm):02240                 SUBD    ,S++                    ; subtract bytes transferred
CA7B FD0661           (       ddos12.asm):02241                 STD     DosBytesRead            ; save it back
CA7E 3262             (       ddos12.asm):02242                 LEAS    2,S                     ; drop pointer from stack
CA80 2707             (       ddos12.asm):02243                 BEQ     DosFReadExit            ; branch if done all
CA82 7F0663           (       ddos12.asm):02244                 CLR     DosSecOffset            ; clear sector offset, so we start 
CA85 5F               (       ddos12.asm):02245                 CLRB                            ; at beginning of next sector
CA86 7EC9C9           (       ddos12.asm):02246                 JMP     >LC9C9                  ; loop again
                      (       ddos12.asm):02247         
CA89                  (       ddos12.asm):02248         DosFReadExit   
CA89 5F               (       ddos12.asm):02249                 CLRB                            ; no error
CA8A 39               (       ddos12.asm):02250                 RTS
                      (       ddos12.asm):02251         
                      (       ddos12.asm):02252         ; 
                      (       ddos12.asm):02253         ; Convert a file sector number to a logical sector number.
                      (       ddos12.asm):02254         ;
                      (       ddos12.asm):02255         ; On entry 
                      (       ddos12.asm):02256         ;  U                    FSN that we want
                      (       ddos12.asm):02257         ;  DosCurrCtrlBlk       Current FIB no.
                      (       ddos12.asm):02258         ;
                      (       ddos12.asm):02259         ; Returns:
                      (       ddos12.asm):02260         ;  D                    Logical sector number
                      (       ddos12.asm):02261         ;  X                    FIB entry
                      (       ddos12.asm):02262         ;  U                    FSN (preserved).
                      (       ddos12.asm):02263         
CA8B                  (       ddos12.asm):02264         FSNtoLSN 
CA8B BDCEAC           (       ddos12.asm):02265                 JSR     >DosFCBNoToAddr         ; get FCB addr in X
CA8E 1F30             (       ddos12.asm):02266         LCA8E   TFR     U,D                     ; get FSN in D
CA90 A38813           (       ddos12.asm):02267                 SUBD    FCBFSNExtent1,X         ; test to see where extent block is in file
CA93 250D             (       ddos12.asm):02268                 BCS     LCAA2                   ; if -ve then this block is after the one we want
                      (       ddos12.asm):02269         
                      (       ddos12.asm):02270         ; check to see if required sector is within this group of sectors
                      (       ddos12.asm):02271         
CA95 4D               (       ddos12.asm):02272                 TSTA                            ; If MSB is not 0 then it is not
CA96 260A             (       ddos12.asm):02273                 BNE     LCAA2                   
                      (       ddos12.asm):02274                 
CA98 E18817           (       ddos12.asm):02275                 CMPB    FCBSecExtent1,X         
CA9B 2405             (       ddos12.asm):02276                 BCC     LCAA2
                      (       ddos12.asm):02277         
CA9D E38815           (       ddos12.asm):02278                 ADDD    FCBLSNExtent1,X
CAA0 2012             (       ddos12.asm):02279                 BRA     LCAB4
                      (       ddos12.asm):02280         
                      (       ddos12.asm):02281         ; check extent 2
                      (       ddos12.asm):02282         
CAA2 1F30             (       ddos12.asm):02283         LCAA2   TFR     U,D                     ; get FSN in D
CAA4 A38818           (       ddos12.asm):02284                 SUBD    FCBFSNExtent2,X         ; test to see where extent block is in file
CAA7 250E             (       ddos12.asm):02285                 BCS     LCAB7                   ; if -ve then this block is after the one we want
                      (       ddos12.asm):02286           
                      (       ddos12.asm):02287         ; check to see if required sector is within this group of sectors
                      (       ddos12.asm):02288         
CAA9 4D               (       ddos12.asm):02289                 TSTA                            ; If MSB is not 0 then it is not
CAAA 260B             (       ddos12.asm):02290                 BNE     LCAB7
                      (       ddos12.asm):02291           
CAAC E1881C           (       ddos12.asm):02292                 CMPB    FCBSecExtent2,X
CAAF 2406             (       ddos12.asm):02293                 BCC     LCAB7
                      (       ddos12.asm):02294                 
CAB1 E3881A           (       ddos12.asm):02295                 ADDD    FCBLSNExtent2,X
                      (       ddos12.asm):02296         
CAB4 1A04             (       ddos12.asm):02297         LCAB4   ORCC    #FlagZero               ; Found the block we want flag it
CAB6 39               (       ddos12.asm):02298                 RTS
                      (       ddos12.asm):02299         
                      (       ddos12.asm):02300         ; Wanted FSN not in extent 1 or 2
                      (       ddos12.asm):02301         
CAB7 3440             (       ddos12.asm):02302         LCAB7   PSHS    U                       ; save FSN
CAB9 8D3E             (       ddos12.asm):02303                 BSR     FindFSNinU              ; scan extents
CABB 260B             (       ddos12.asm):02304                 BNE     LCAC8                   ; error exit
                      (       ddos12.asm):02305                 
CABD FC066B           (       ddos12.asm):02306                 LDD     DosTotalSFound          ; how many scanned?
CAC0 10B3066D         (       ddos12.asm):02307                 CMPD    DosFSNToFind            ; Have we found it?
CAC4 2204             (       ddos12.asm):02308                 BHI     LCACA                   ; branch if so
                      (       ddos12.asm):02309                 
CAC6 C69A             (       ddos12.asm):02310                 LDB     #ErrPE          ; else past EOF error
CAC8 35C0             (       ddos12.asm):02311         LCAC8   PULS    U,PC                    ; restore & return
                      (       ddos12.asm):02312         
                      (       ddos12.asm):02313         ; At this point Y points to allocation extent block in directory entry.
                      (       ddos12.asm):02314         
CACA E022             (       ddos12.asm):02315         LCACA   SUBB    AllocCount,Y            ; length of extent
CACC 8200             (       ddos12.asm):02316                 SBCA    #$00                    ; propogate carry       
CACE ED8813           (       ddos12.asm):02317                 STD     FCBFSNExtent1,X         ; start of this extent
                      (       ddos12.asm):02318                 
CAD1 A622             (       ddos12.asm):02319                 LDA     AllocCount,Y            ; get allocation sector count
CAD3 A78817           (       ddos12.asm):02320                 STA     FCBSecExtent1,X         ; save it in extent
CAD6 ECA4             (       ddos12.asm):02321                 LDD     ,Y                      ; get allocation LSN
CAD8 ED8815           (       ddos12.asm):02322                 STD     FCBLSNExtent1,X         ; save in extent
                      (       ddos12.asm):02323                 
CADB 1F20             (       ddos12.asm):02324                 TFR     Y,D                     ; transfer start LSN to D
CADD 3440             (       ddos12.asm):02325                 PSHS    U                       ; save FSN
CADF A3E1             (       ddos12.asm):02326                 SUBD    ,S++                    ; subtract from LSN
CAE1 3540             (       ddos12.asm):02327                 PULS    U                       ; restore FSN
                      (       ddos12.asm):02328                 
CAE3 C113             (       ddos12.asm):02329                 CMPB    #DirEntryLen-6          ; end of entry?
CAE5 2410             (       ddos12.asm):02330                 BCC     LCAF7                   ; yep, no more extents
                      (       ddos12.asm):02331                 
CAE7 A625             (       ddos12.asm):02332                 LDA     5,Y                     ; length of next extent
CAE9 A7881C           (       ddos12.asm):02333                 STA     FCBSecExtent2,X
CAEC EC23             (       ddos12.asm):02334                 LDD     3,Y                     ; LSN of next extent
CAEE ED881A           (       ddos12.asm):02335                 STD     $1A,X
CAF1 FC066B           (       ddos12.asm):02336                 LDD     DosTotalSFound
CAF4 ED8818           (       ddos12.asm):02337                 STD     FCBFSNExtent2,X
CAF7 2095             (       ddos12.asm):02338         LCAF7   BRA     LCA8E                   ; loop again
                      (       ddos12.asm):02339         
                      (       ddos12.asm):02340         ;
                      (       ddos12.asm):02341         ; Scan extents
                      (       ddos12.asm):02342         ;
                      (       ddos12.asm):02343         ; Entry : 
                      (       ddos12.asm):02344         ;       X       Address of a FCB
                      (       ddos12.asm):02345         ;       U       FSN to find (File Sector Number)
                      (       ddos12.asm):02346         ;       B       File number (on disk), also in $1d,X
                      (       ddos12.asm):02347         ;
                      (       ddos12.asm):02348         ; Returns with:
                      (       ddos12.asm):02349         ;       DosTotalSFound  number of sectors scanned
                      (       ddos12.asm):02350         ;       DosFSNToFind    Original U 
                      (       ddos12.asm):02351         ;       Y               Extent entry in dir sector.
                      (       ddos12.asm):02352         ;
                      (       ddos12.asm):02353         
CAF9                  (       ddos12.asm):02354         FindFSNinU   
CAF9 3410             (       ddos12.asm):02355                 PSHS    X
CAFB 7F066C           (       ddos12.asm):02356                 CLR     DosTotalSFound+1
CAFE 7F066B           (       ddos12.asm):02357                 CLR     DosTotalSFound
CB01 FF066D           (       ddos12.asm):02358                 STU     DosFSNToFind            ; set FSN to find 
CB04 E6881D           (       ddos12.asm):02359                 LDB     FCBDiskFileNo,X         ; set current file to be FCB file
CB07 F70682           (       ddos12.asm):02360                 STB     DosCurFileNo
CB0A BDD1D4           (       ddos12.asm):02361                 JSR     >DOSGetDirEntry         ; Go get directory entry
CB0D 2647             (       ddos12.asm):02362                 BNE     LCB56                   ; Error : exit
                      (       ddos12.asm):02363                 
CB0F 1F13             (       ddos12.asm):02364                 TFR     X,U                     ; point u at dir entry
CB11 3510             (       ddos12.asm):02365                 PULS    X                       ; recover FCB pointer
                      (       ddos12.asm):02366                 
CB13 314C             (       ddos12.asm):02367                 LEAY    DirEntFnBlock1,U        ; point Y at first allocation block
CB15 C604             (       ddos12.asm):02368                 LDB     #$04                    ; entry counter
CB17 A6C4             (       ddos12.asm):02369         LCB17   LDA     ,U                      ; get attributes 
CB19 8420             (       ddos12.asm):02370                 ANDA    #AttrContinued          ; extract continuation flag     
CB1B 2703             (       ddos12.asm):02371                 BEQ     LCB20                   ; not a continuation block, skip
                      (       ddos12.asm):02372                 
CB1D A6C818           (       ddos12.asm):02373                 LDA     DirEntFlag,U            ; get dir entry flag
                      (       ddos12.asm):02374         
CB20 3406             (       ddos12.asm):02375         LCB20   PSHS    D
CB22 FC066B           (       ddos12.asm):02376         LCB22   LDD     DosTotalSFound          ; get total sectors found so far
CB25 EB22             (       ddos12.asm):02377                 ADDB    2,Y                     ; add sector count for this allocation block to total
CB27 8900             (       ddos12.asm):02378                 ADCA    #$00                    ; carry from b to a if neeeded
CB29 FD066B           (       ddos12.asm):02379                 STD     DosTotalSFound          ; update total found
CB2C 10B3066D         (       ddos12.asm):02380                 CMPD    DosFSNToFind            ; found the sector we need yet ?
CB30 2223             (       ddos12.asm):02381                 BHI     LCB55                   ; yep : exit
                      (       ddos12.asm):02382                 
CB32 3123             (       ddos12.asm):02383                 LEAY    AllocEntrySize,Y        ; move to next allocation entry                 
CB34 6A61             (       ddos12.asm):02384                 DEC     1,S                     ; decrement entry counter
CB36 26EA             (       ddos12.asm):02385                 BNE     LCB22                   ; if more to do loop again
                      (       ddos12.asm):02386         
CB38 E6E4             (       ddos12.asm):02387                 LDB     ,S                      ; recover DirEntFlag or AttrContinued   
CB3A 2717             (       ddos12.asm):02388                 BEQ     LCB53                   ; if it's 0
                      (       ddos12.asm):02389                 
CB3C 3262             (       ddos12.asm):02390                 LEAS    2,S                     ; drop stack frame
CB3E F70682           (       ddos12.asm):02391                 STB     DosCurFileNo            
                      (       ddos12.asm):02392         
CB41 3410             (       ddos12.asm):02393                 PSHS    X                       ; save FCB pointer      
CB43 BDD1D4           (       ddos12.asm):02394                 JSR     >DOSGetDirEntry         ; get next entry
CB46 1F13             (       ddos12.asm):02395                 TFR     X,U                     ; make u point to dir entry
CB48 3510             (       ddos12.asm):02396                 PULS    X                       ; recover FCB pointer
CB4A 2701             (       ddos12.asm):02397                 BEQ     LCB4D
                      (       ddos12.asm):02398         
CB4C 39               (       ddos12.asm):02399                 RTS
                      (       ddos12.asm):02400         
CB4D 3141             (       ddos12.asm):02401         LCB4D   LEAY    DirEntCntBlock1,U       ; point at first extension entry                        
CB4F C607             (       ddos12.asm):02402                 LDB     #$07                    ; 7 entries in a continuation block
CB51 20C4             (       ddos12.asm):02403                 BRA     LCB17
                      (       ddos12.asm):02404         
CB53 313D             (       ddos12.asm):02405         LCB53   LEAY    -3,Y
CB55 5F               (       ddos12.asm):02406         LCB55   CLRB                            ; flag no error
CB56 3262             (       ddos12.asm):02407         LCB56   LEAS    2,S                     ; Drop stack frame
CB58 39               (       ddos12.asm):02408                 RTS                             ; Return
                      (       ddos12.asm):02409         ;
                      (       ddos12.asm):02410         ; Write to a file.
                      (       ddos12.asm):02411         ;
                      (       ddos12.asm):02412         ; Entry :
                      (       ddos12.asm):02413         ;       A = FCB no
                      (       ddos12.asm):02414         ;       X = pointer to buffer to receive data
                      (       ddos12.asm):02415         ;       U = no of bytes to read
                      (       ddos12.asm):02416         ;       Y = MSW of file offset (FSN sector no).
                      (       ddos12.asm):02417         ;       B = LSB of file offset (byte within sector).
                      (       ddos12.asm):02418         ;               Y:B is effectivly the filepointer.
                      (       ddos12.asm):02419         ; Exit:
                      (       ddos12.asm):02420         ;       B = Error code
                      (       ddos12.asm):02421         ;
                      (       ddos12.asm):02422         
CB59                  (       ddos12.asm):02423         DOSFWrite   
CB59 97F1             (       ddos12.asm):02424                 STA     <DosCurrCtrlBlk         ; Set FCB to be current
CB5B BF0671           (       ddos12.asm):02425                 STX     DosFWBufPtr             ; save params for later
CB5E FF0673           (       ddos12.asm):02426                 STU     DosFWByteCount
CB61 10BF0675         (       ddos12.asm):02427                 STY     DosFWFPoint
CB65 F70677           (       ddos12.asm):02428                 STB     DosFWFPoint+2
                      (       ddos12.asm):02429                 
CB68 BDCEAC           (       ddos12.asm):02430                 JSR     >DosFCBNoToAddr         ; Get address of FCB
                      (       ddos12.asm):02431         
CB6B E60B             (       ddos12.asm):02432                 LDB     FCBDrive,X              ; set drive from FCB
CB6D D7EB             (       ddos12.asm):02433                 STB     <DosDriveNo
                      (       ddos12.asm):02434                 
CB6F BDCE79           (       ddos12.asm):02435         LCB6F   JSR     >DOSGetFLen             ; get the file length in U:A
CB72 270E             (       ddos12.asm):02436                 BEQ     LCB82                   ; no error : skip
                      (       ddos12.asm):02437                 
CB74 C19C             (       ddos12.asm):02438                 CMPB    #ErrFF          ; File not found ?
CB76 2701             (       ddos12.asm):02439                 BEQ     LCB79                   ; yep : create the file
CB78 39               (       ddos12.asm):02440         LCB78   RTS
                      (       ddos12.asm):02441         
CB79 96F1             (       ddos12.asm):02442         LCB79   LDA     <DosCurrCtrlBlk         ; Get current FCB
CB7B BDCF14           (       ddos12.asm):02443                 JSR     >DOSCreateFile          ; Create the file
CB7E 26F8             (       ddos12.asm):02444                 BNE     LCB78                   ; error : exit
CB80 20ED             (       ddos12.asm):02445                 BRA     LCB6F                   ; success : check file length
                      (       ddos12.asm):02446         
                      (       ddos12.asm):02447         ; If we come here we have successfuly got the file len
                      (       ddos12.asm):02448         
CB82 11B30675         (       ddos12.asm):02449         LCB82   CMPU    DosFWFPoint             ; is file pointer beyond EOF ?  
CB86 220A             (       ddos12.asm):02450                 BHI     LCB92                   ; no : continue
CB88 2505             (       ddos12.asm):02451                 BCS     LCB8F                   ; yes : error
                      (       ddos12.asm):02452                 
CB8A B10677           (       ddos12.asm):02453                 CMPA    DosFWFPoint+2           ; check LSB, if MSW equal
CB8D 2403             (       ddos12.asm):02454                 BCC     LCB92                   ; not past end : continue
                      (       ddos12.asm):02455                 
CB8F C69A             (       ddos12.asm):02456         LCB8F   LDB     #ErrPE          ; error : past end
CB91 39               (       ddos12.asm):02457         LCB91   RTS
                      (       ddos12.asm):02458         
CB92 3402             (       ddos12.asm):02459         LCB92   PSHS    A                       ; save LSB of length    
CB94 FC0673           (       ddos12.asm):02460                 LDD     DosFWByteCount          ; get no of bytes to write      
CB97 FB0677           (       ddos12.asm):02461                 ADDB    DosFWFPoint+2           ; add current filepointer, 
CB9A B90676           (       ddos12.asm):02462                 ADCA    DosFWFPoint+1
CB9D 3404             (       ddos12.asm):02463                 PSHS    B                       ; save LSB of len+FP
CB9F 1F89             (       ddos12.asm):02464                 TFR     A,B                     
CBA1 B60675           (       ddos12.asm):02465                 LDA     DosFWFPoint             ; get MSB
CBA4 8900             (       ddos12.asm):02466                 ADCA    #$00                    ; deal with carry from LSW to MSB
                      (       ddos12.asm):02467                 
CBA6 3440             (       ddos12.asm):02468                 PSHS    U                       
CBA8 A3E1             (       ddos12.asm):02469                 SUBD    ,S++                    ; Subtract no of sectors in file from MSW of new filesize 
CBAA 1F98             (       ddos12.asm):02470                 TFR     B,A
CBAC 3504             (       ddos12.asm):02471                 PULS    B                       ; recover LSB of len+FP
CBAE 2208             (       ddos12.asm):02472                 BHI     LCBB8                   ; new filesize higher extend file
CBB0 250E             (       ddos12.asm):02473                 BCS     LCBC0                   ; new filesize lower do write
                      (       ddos12.asm):02474                 
CBB2 E0E4             (       ddos12.asm):02475                 SUBB    ,S                      ; MSW is equal check LSB
CBB4 2406             (       ddos12.asm):02476                 BCC     LCBBC                   ; new filesize higher extend file
CBB6 2008             (       ddos12.asm):02477                 BRA     LCBC0                   ; new filesize lower or equal do write
                      (       ddos12.asm):02478         
CBB8 E0E4             (       ddos12.asm):02479         LCBB8   SUBB    ,S
CBBA 8200             (       ddos12.asm):02480                 SBCA    #$00
CBBC 8D2E             (       ddos12.asm):02481         LCBBC   BSR     ExtendFile              ; extend the file ?
CBBE 2629             (       ddos12.asm):02482                 BNE     LCBE9                   ; error :  return
                      (       ddos12.asm):02483                 
CBC0 3261             (       ddos12.asm):02484         LCBC0   LEAS    1,S                     ; drop saved byte
CBC2 F60677           (       ddos12.asm):02485                 LDB     DosFWFPoint+2           ; recover file pointer LSB
CBC5 BE0671           (       ddos12.asm):02486                 LDX     DosFWBufPtr             ; and buffer
CBC8 10BE0673         (       ddos12.asm):02487                 LDY     DosFWByteCount          ; and count
CBCC FE0675           (       ddos12.asm):02488                 LDU     DosFWFPoint             ; and FP MSB
                      (       ddos12.asm):02489                 
CBCF BDC997           (       ddos12.asm):02490                 JSR     >RWrite                 ; entry point for write
CBD2 26BD             (       ddos12.asm):02491                 BNE     LCB91                   ; error : exit
                      (       ddos12.asm):02492                 
CBD4 7D0608           (       ddos12.asm):02493                 TST     DosVerifyFlag           ; verify written data ?
CBD7 27B8             (       ddos12.asm):02494                 BEQ     LCB91                   ; nope : return
                      (       ddos12.asm):02495                 
CBD9 F60677           (       ddos12.asm):02496                 LDB     DosFWFPoint+2           ; recover file pointer LSB
CBDC BE0671           (       ddos12.asm):02497                 LDX     DosFWBufPtr             ; and buffer
CBDF 10BE0673         (       ddos12.asm):02498                 LDY     DosFWByteCount          ; and count
CBE3 FE0675           (       ddos12.asm):02499                 LDU     DosFWFPoint             ; and FP MSB
CBE6 16FDB1           (       ddos12.asm):02500                 LBRA    Verify                  ; go verify  it 
                      (       ddos12.asm):02501         
CBE9 3261             (       ddos12.asm):02502         LCBE9   LEAS    1,S                     ; clean up stack
CBEB 39               (       ddos12.asm):02503                 RTS                             ; return 
                      (       ddos12.asm):02504         
                      (       ddos12.asm):02505         ; 
                      (       ddos12.asm):02506         ; Extend a file, called by DOSFWrite
                      (       ddos12.asm):02507         ;
                      (       ddos12.asm):02508         ; Entry :
                      (       ddos12.asm):02509         ;       DosCurrCtrlBlk  = Fileno
                      (       ddos12.asm):02510         ;       DosDriveNo      = drive number
                      (       ddos12.asm):02511         ;       D               = number of bytes to extend file
                      (       ddos12.asm):02512         ;
                      (       ddos12.asm):02513         ; Returns:
                      (       ddos12.asm):02514         ;       B               = error code
                      (       ddos12.asm):02515         ;
                      (       ddos12.asm):02516         ; The data on the disk is not preset / initialized.
                      (       ddos12.asm):02517         ;
                      (       ddos12.asm):02518         ; Procedure:
                      (       ddos12.asm):02519         ; The number of bytes that can be allocated to the last sector allready
                      (       ddos12.asm):02520         ; allocated to the file is detected.
                      (       ddos12.asm):02521         ; Get a free extent, if contiguous add it to the currently allocated 
                      (       ddos12.asm):02522         ; extent, otherwise make a new one.
                      (       ddos12.asm):02523         ; Decrease free extent by number of sectors needed (or all),
                      (       ddos12.asm):02524         ; If more sectors needed, loop.
                      (       ddos12.asm):02525         ; Figure number of bytes used in last sector and store in DIR.
                      (       ddos12.asm):02526         ;
                      (       ddos12.asm):02527         ; Update length of file and last sector.
                      (       ddos12.asm):02528         ;
                      (       ddos12.asm):02529         
                      (       ddos12.asm):02530         ; stack frame offsets
     0000             (       ddos12.asm):02531         ExtBytes        EQU     0               ; number of bytes to extend**
     0002             (       ddos12.asm):02532         ExtExtentPtr    EQU     2               ; Extent pointer
     0004             (       ddos12.asm):02533         ExtEntry        EQU     4               ; Entry pointer
     0006             (       ddos12.asm):02534         ExtWant         EQU     6               ; Best LSN block found
     0008             (       ddos12.asm):02535         ExtDiskPtr      EQU     8               ; pointer to drive table (DrvDet* consts)
     000A             (       ddos12.asm):02536         ExtSaveExd      EQU     10              ; ?
                      (       ddos12.asm):02537         
     000C             (       ddos12.asm):02538         ExtendFrameSize EQU     $0C             ; stack frame size
                      (       ddos12.asm):02539         
                      (       ddos12.asm):02540         ; ** Since disk sectors are 256 bytes, and the 6809 stores the MSB in the 16 bit 
                      (       ddos12.asm):02541         ; registers pushed onto the stack with MSB at the lowest address (smallest offset 
                      (       ddos12.asm):02542         ; from S), ExBytes,S will access the MSB of ExBytes, which will be the number of 
                      (       ddos12.asm):02543         ; whole sectors requested.
                      (       ddos12.asm):02544         
CBEC                  (       ddos12.asm):02545         ExtendFile   
CBEC 3274             (       ddos12.asm):02546                 LEAS    -ExtendFrameSize,S      ; make room on stack
CBEE EDE4             (       ddos12.asm):02547                 STD     ExtBytes,S              ; save number of bytes
CBF0 ED6A             (       ddos12.asm):02548                 STD     ExtSaveExd,S
                      (       ddos12.asm):02549                 
CBF2 8601             (       ddos12.asm):02550                 LDA     #$01                    ; Flag that we are working....
CBF4 97F6             (       ddos12.asm):02551                 STA     <DosIOInProgress
CBF6 BDD17D           (       ddos12.asm):02552                 JSR     >DosGetDiskGeometry     ; get disk geometry
CBF9 102600E5         (       ddos12.asm):02553                 LBNE    ExtendFileExit          ; error exit
                      (       ddos12.asm):02554                 
CBFD AF68             (       ddos12.asm):02555                 STX     ExtDiskPtr,S            ; save pointer to geometry buffer
CBFF BDCEAC           (       ddos12.asm):02556                 JSR     >DosFCBNoToAddr         ; get address of FCB
CC02 E6881E           (       ddos12.asm):02557                 LDB     FCBDirNoLast,X          ; get directory index of last file segment
CC05 BDD1D4           (       ddos12.asm):02558                 JSR     >DOSGetDirEntry         ; go get it
CC08 102600D6         (       ddos12.asm):02559                 LBNE    ExtendFileExit          ; error : exit
                      (       ddos12.asm):02560                 
CC0C AF64             (       ddos12.asm):02561                 STX     ExtEntry,S              ; save directory pointer                        
CC0E FE067F           (       ddos12.asm):02562                 LDU     DosCurDirBuff           ; get def block for dir sector
CC11 86FF             (       ddos12.asm):02563                 LDA     #-1                     ; flag it dirty
CC13 A742             (       ddos12.asm):02564                 STA     BuffFlag,U
                      (       ddos12.asm):02565         
                      (       ddos12.asm):02566         ; Work out the number of whole sectors we need to extend the file by.
                      (       ddos12.asm):02567         ; Round up if ammount to extend / sector size has a remainer.
                      (       ddos12.asm):02568         ; number of whole sectors will be in A and remainder in B
                      (       ddos12.asm):02569         
CC15 4F               (       ddos12.asm):02570                 CLRA                            
CC16 E68818           (       ddos12.asm):02571                 LDB     DirEntLastBytes,X       ; no bytes in last sector
CC19 2601             (       ddos12.asm):02572                 BNE     LCC1C                   ; zero, skip
                      (       ddos12.asm):02573                 
CC1B 4C               (       ddos12.asm):02574                 INCA                            ; inc MSB
CC1C E3E4             (       ddos12.asm):02575         LCC1C   ADDD    ,S                      ; add to number of bytes to extend      
CC1E 5D               (       ddos12.asm):02576                 TSTB                            ; remainder = 0
CC1F 2601             (       ddos12.asm):02577                 BNE     LCC22                   ; no.....
                      (       ddos12.asm):02578                 
CC21 4A               (       ddos12.asm):02579                 DECA                            ; decrement MSB
CC22 EDE4             (       ddos12.asm):02580         LCC22   STD     ,S                      ; resave amount to extend.      
CC24 4D               (       ddos12.asm):02581                 TSTA                            ; more than space in last sector?
CC25 102700A1         (       ddos12.asm):02582                 LBEQ    LCCCA                   ; nope, no allocation change needed
                      (       ddos12.asm):02583                 
CC29 C604             (       ddos12.asm):02584                 LDB     #DirEntExts             ; 4 allocation blocks in directory entry
CC2B 310C             (       ddos12.asm):02585                 LEAY    DirEntFnBlock1,X        ; point to first allocation block in dir
CC2D A684             (       ddos12.asm):02586                 LDA     DirEntAttr,X            ; get flags of directory entry
CC2F 8501             (       ddos12.asm):02587                 BITA    #AttrIsCont             ; Continuation block?
CC31 2704             (       ddos12.asm):02588                 BEQ     LCC37                   ; no, read filename block extents 
                      (       ddos12.asm):02589                 
CC33 3101             (       ddos12.asm):02590                 LEAY    DirEntCntBlock1,X       ; point at first continuation block extent
CC35 C607             (       ddos12.asm):02591                 LDB     #DirEntCntExts          ; get the extent count for continuation block (7)
                      (       ddos12.asm):02592         
CC37 6D22             (       ddos12.asm):02593         LCC37   TST     AllocCount,Y            ; any sectors allocated?
CC39 2614             (       ddos12.asm):02594                 BNE     LCC4F                   ; yes, skip, find last one
                      (       ddos12.asm):02595                 
CC3B CCFFFF           (       ddos12.asm):02596                 LDD     #-1                     ; max possible allocation....
CC3E ED66             (       ddos12.asm):02597                 STD     ExtWant,S               ; save it on stack
CC40 313D             (       ddos12.asm):02598                 LEAY    -AllocLen,Y
CC42 10AF62           (       ddos12.asm):02599                 STY     ExtExtentPtr,S          ; save extent pointer on stack
CC45 AE68             (       ddos12.asm):02600                 LDX     ExtDiskPtr,S            ; get drive table pointer
CC47 6D02             (       ddos12.asm):02601                 TST     DrvDetFreeLen,X         ; check to see if we have free space on disk
CC49 1026009B         (       ddos12.asm):02602                 LBNE    LCCE8
CC4D 203E             (       ddos12.asm):02603                 BRA     LCC8D
                      (       ddos12.asm):02604         
                      (       ddos12.asm):02605         ; find last used allocation block in current directory / continuation block
CC4F 6D22             (       ddos12.asm):02606         LCC4F   TST     AllocCount,Y            ; any sectors allocated?
CC51 2705             (       ddos12.asm):02607                 BEQ     LCC58                   ; no.....
                      (       ddos12.asm):02608                 
CC53 3123             (       ddos12.asm):02609                 LEAY    AllocLen,Y              ; move to next alloc block
CC55 5A               (       ddos12.asm):02610                 DECB                            ; decrement alloc block count
CC56 26F7             (       ddos12.asm):02611                 BNE     LCC4F                   ; loop if more to do
                      (       ddos12.asm):02612                 
CC58 313D             (       ddos12.asm):02613         LCC58   LEAY    -AllocLen,Y             ; point at previous alloc block
CC5A ECA4             (       ddos12.asm):02614                 LDD     AllocLSN,Y              ; Get LSN of block
CC5C EB22             (       ddos12.asm):02615                 ADDB    AllocCount,Y            ; add count to LSN
CC5E 8900             (       ddos12.asm):02616                 ADCA    #$00                    ; propagate carry
CC60 ED66             (       ddos12.asm):02617                 STD     ExtWant,S               ; Save LSN of 1 block past this allocation
CC62 10AF62           (       ddos12.asm):02618                 STY     ExtExtentPtr,S          ; save dir extent pointer
CC65 AE68             (       ddos12.asm):02619                 LDX     ExtDiskPtr,S            ; get disk pointer
CC67 6D02             (       ddos12.asm):02620                 TST     DrvDetFreeLen,X         ; Test disk free length
CC69 2722             (       ddos12.asm):02621                 BEQ     LCC8D                                   
                      (       ddos12.asm):02622                 
CC6B EC66             (       ddos12.asm):02623                 LDD     ExtWant,S               ; get starting LSN for search                           
CC6D A303             (       ddos12.asm):02624                 SUBD    DrvDetFreeEPtr,X        ; get free extent pointer
CC6F 272C             (       ddos12.asm):02625                 BEQ     LCC9D                   ; branch if same
                      (       ddos12.asm):02626                 
CC71 BDCD31           (       ddos12.asm):02627                 JSR     >GetFreeExtent          ; else get a free extent
CC74 2706             (       ddos12.asm):02628                 BEQ     LCC7C                   ; branch if OK
                      (       ddos12.asm):02629                 
CC76 C194             (       ddos12.asm):02630                 CMPB    #ErrDF          ; Disk full?
CC78 2668             (       ddos12.asm):02631                 BNE     ExtendFileExit          ; no extend the extent
CC7A 206C             (       ddos12.asm):02632                 BRA     LCCE8                   ; skip ahead
                      (       ddos12.asm):02633         
                      (       ddos12.asm):02634         ; replace old extent
CC7C AE68             (       ddos12.asm):02635         LCC7C   LDX     ExtDiskPtr,S            
CC7E 3442             (       ddos12.asm):02636                 PSHS    A,U                     ; save regs
CC80 E602             (       ddos12.asm):02637                 LDB     DrvDetFreeLen,X         ; get length of free block              
CC82 AE03             (       ddos12.asm):02638                 LDX     DrvDetFreeEPtr,X        ; get extent pointer for block
CC84 BDD012           (       ddos12.asm):02639                 JSR     >DeleteExtent           ; go and delete it
CC87 3542             (       ddos12.asm):02640                 PULS    A,U                     ; restore regs
CC89 2657             (       ddos12.asm):02641                 BNE     ExtendFileExit          ; error, exit
CC8B 2005             (       ddos12.asm):02642                 BRA     LCC92
                      (       ddos12.asm):02643         
CC8D BDCD31           (       ddos12.asm):02644         LCC8D   JSR     >GetFreeExtent          ; go get free extent
CC90 2650             (       ddos12.asm):02645                 BNE     ExtendFileExit          ; error exit
                      (       ddos12.asm):02646         
CC92 AE68             (       ddos12.asm):02647         LCC92   LDX     ExtDiskPtr,S            ; point to disk table
CC94 EF03             (       ddos12.asm):02648                 STU     DrvDetFreeEPtr,X        ; save LSN of free block
CC96 A702             (       ddos12.asm):02649                 STA     DrvDetFreeLen,X         ; save no of sectors free
CC98 11A366           (       ddos12.asm):02650                 CMPU    ExtWant,S               ; compare free pointer to want pointer
CC9B 264B             (       ddos12.asm):02651                 BNE     LCCE8                   ; skip if not same, new extent
                      (       ddos12.asm):02652         
                      (       ddos12.asm):02653         ; check if the available space, has enough sectors for the ammount requested.
                      (       ddos12.asm):02654         ; see note at begining of ExtendFile, about ExtBytes :) 
CC9D A6E4             (       ddos12.asm):02655         LCC9D   LDA     ExtBytes,S              ; MSB of wanted bytes (number of whole sectors)         
CC9F A102             (       ddos12.asm):02656                 CMPA    DrvDetFreeLen,X         ; free len
CCA1 2502             (       ddos12.asm):02657                 BCS     LCCA5                   ; branch if free len lower
                      (       ddos12.asm):02658         
CCA3 A602             (       ddos12.asm):02659                 LDA     DrvDetFreeLen,X         ; number of sectors free
CCA5 10AE62           (       ddos12.asm):02660         LCCA5   LDY     ExtExtentPtr,S          ; get pointer to extent
CCA8 3402             (       ddos12.asm):02661                 PSHS    A                       ; free sector count
CCAA AB22             (       ddos12.asm):02662                 ADDA    AllocCount,Y            ; add allocation count 
CCAC 2404             (       ddos12.asm):02663                 BCC     LCCB2                   ; branch if no overflow....             
                      (       ddos12.asm):02664         
CCAE 3502             (       ddos12.asm):02665                 PULS    A                       ; restore sector count
CCB0 2036             (       ddos12.asm):02666                 BRA     LCCE8                   ; branch....
                      (       ddos12.asm):02667         
                      (       ddos12.asm):02668         ; Sector count in A still stacked
CCB2 A722             (       ddos12.asm):02669         LCCB2   STA     AllocCount,Y            ; update count  
CCB4 A602             (       ddos12.asm):02670                 LDA     DrvDetFreeLen,X         ; get free len
CCB6 A0E4             (       ddos12.asm):02671                 SUBA    ,S                      ; subtract number of sectors allocated
CCB8 A702             (       ddos12.asm):02672                 STA     DrvDetFreeLen,X         ; resave it
CCBA EC03             (       ddos12.asm):02673                 LDD     DrvDetFreeEPtr,X        ; get LSN of beginning of free block
CCBC EBE4             (       ddos12.asm):02674                 ADDB    ,S                      ; and number of complete sectors
CCBE 8900             (       ddos12.asm):02675                 ADCA    #$00                    ; propagate carry
CCC0 ED03             (       ddos12.asm):02676                 STD     DrvDetFreeEPtr,X        ; resave it
                      (       ddos12.asm):02677                 
CCC2 A661             (       ddos12.asm):02678                 LDA     ExtBytes+1,S            ; get number of sectors wanted
CCC4 A0E0             (       ddos12.asm):02679                 SUBA    ,S+                     ; subtract no of sectors allocated
CCC6 A7E4             (       ddos12.asm):02680                 STA     ,S                      ; resave
CCC8 26C3             (       ddos12.asm):02681                 BNE     LCC8D                   ; if not zero loop again, to allocate more!
                      (       ddos12.asm):02682         
CCCA AE64             (       ddos12.asm):02683         LCCCA   LDX     ExtEntry,S              ; get entry pointer
CCCC 1F13             (       ddos12.asm):02684                 TFR     X,U                     ; save in U
CCCE BDCEAC           (       ddos12.asm):02685                 JSR     >DosFCBNoToAddr         ; get FCB address
CCD1 EC6A             (       ddos12.asm):02686                 LDD     ExtSaveExd,S            ; get original bytes requested
CCD3 E38811           (       ddos12.asm):02687                 ADDD    FCBFileLen+1,X          ; add LSW of current file len
CCD6 2403             (       ddos12.asm):02688                 BCC     LCCDB                   ; branch if no carry
                      (       ddos12.asm):02689         
CCD8 6C8810           (       ddos12.asm):02690                 INC     FCBFileLen,X            ; increment MSB if carry to poroagate it
CCDB ED8811           (       ddos12.asm):02691         LCCDB   STD     FCBFileLen+1,X          ; save new file length
CCDE E7C818           (       ddos12.asm):02692                 STB     DirEntLastBytes,U       ; update bytes in last sector
CCE1 5F               (       ddos12.asm):02693                 CLRB
                      (       ddos12.asm):02694         
CCE2                  (       ddos12.asm):02695         ExtendFileExit   
CCE2 326C             (       ddos12.asm):02696                 LEAS    ExtendFrameSize,S       ; drop stack frame
CCE4 0FF6             (       ddos12.asm):02697                 CLR     <DosIOInProgress        ; clear IO flag
CCE6 5D               (       ddos12.asm):02698                 TSTB                            ; set error
CCE7 39               (       ddos12.asm):02699                 RTS
                      (       ddos12.asm):02700         
CCE8 EC62             (       ddos12.asm):02701         LCCE8   LDD     ExtExtentPtr,S          ; get extent pointer
CCEA 1F02             (       ddos12.asm):02702                 TFR     D,Y                     ; save it in Y
CCEC A364             (       ddos12.asm):02703                 SUBD    ExtEntry,S              
CCEE C113             (       ddos12.asm):02704                 CMPB    #$13                    ; room for another entry in dir block
CCF0 240B             (       ddos12.asm):02705                 BHS     NewDir                  ; no....make a new continuation block
                      (       ddos12.asm):02706                 
CCF2 3123             (       ddos12.asm):02707                 LEAY    AllocEntrySize,Y        ; move to next allocation entry
CCF4 10AF62           (       ddos12.asm):02708                 STY     ExtExtentPtr,S          ; save allocation pointer
CCF7 EC03             (       ddos12.asm):02709         LCCF7   LDD     DrvDetFreeEPtr,X        ; get pointer to free block of sectors
CCF9 EDA4             (       ddos12.asm):02710                 STD     AllocLSN,Y              ; save it in entry
CCFB 20A0             (       ddos12.asm):02711                 BRA     LCC9D                   ; loop to check all extending done
                      (       ddos12.asm):02712         
                      (       ddos12.asm):02713         ; add a new continuation block to the directory                 
CCFD 8601             (       ddos12.asm):02714         NewDir  LDA     #$01                    ; flag continuation type entry
CCFF BDD0FC           (       ddos12.asm):02715                 JSR     >FindEmptyDir           ; find empty directory entry block
CD02 26DE             (       ddos12.asm):02716                 BNE     ExtendFileExit          ; error exit
                      (       ddos12.asm):02717                 
CD04 10AE64           (       ddos12.asm):02718                 LDY     ExtEntry,S              ; get extent pointer
CD07 A7A818           (       ddos12.asm):02719                 STA     DirEntFlag,Y            ; flag continuation entry
CD0A E6A4             (       ddos12.asm):02720                 LDB     DirEntAttr,Y            ; get entry attributes
CD0C CA20             (       ddos12.asm):02721                 ORB     #AttrContinued          ; flag it as a continuation block
CD0E E7A4             (       ddos12.asm):02722                 STB     DirEntAttr,Y            ; save it back
                      (       ddos12.asm):02723                 
CD10 C6FF             (       ddos12.asm):02724                 LDB     #BuffDirty              ; mark disk buffer dirty
CD12 E702             (       ddos12.asm):02725                 STB     BuffFlag,X
                      (       ddos12.asm):02726                 
CD14 C601             (       ddos12.asm):02727                 LDB     #AttrIsCont             ; mark as continuation
CD16 E7C4             (       ddos12.asm):02728                 STB     DirEntAttr,U
CD18 EF64             (       ddos12.asm):02729                 STU     ExtEntry,S
                      (       ddos12.asm):02730                 
CD1A BDCEAC           (       ddos12.asm):02731                 JSR     >DosFCBNoToAddr         ; get FCB address in X
CD1D A7881E           (       ddos12.asm):02732                 STA     FCBDirNoLast,X
                      (       ddos12.asm):02733                 
CD20 31C819           (       ddos12.asm):02734                 LEAY    DirEntryLen,U
CD23 C618             (       ddos12.asm):02735                 LDB     #DirEntryLen-1          ; zero continuation block to initialize
CD25 6FA2             (       ddos12.asm):02736         LCD25   CLR     ,-Y                     ; clear a byte poiubter back
CD27 5A               (       ddos12.asm):02737                 DECB                            ; decrement count
CD28 26FB             (       ddos12.asm):02738                 BNE     LCD25                   ; loop again if not all done
                      (       ddos12.asm):02739                 
CD2A 10AF62           (       ddos12.asm):02740                 STY     ExtExtentPtr,S          ; save pointer to first extent in block
CD2D AE68             (       ddos12.asm):02741                 LDX     ExtDiskPtr,S            ; get disk pointer
CD2F 20C6             (       ddos12.asm):02742                 BRA     LCCF7                   ; loop to allocate 
                      (       ddos12.asm):02743         
                      (       ddos12.asm):02744         ;
                      (       ddos12.asm):02745         ; Get free extent
                      (       ddos12.asm):02746         ;
                      (       ddos12.asm):02747         ; This must be called by ExtendFile and allocates one extent from the
                      (       ddos12.asm):02748         ; free list.
                      (       ddos12.asm):02749         ;
                      (       ddos12.asm):02750         ; In order of prefference it will find a sector:
                      (       ddos12.asm):02751         ;       At the LSN specified. 
                      (       ddos12.asm):02752         ;       At the start of a pair of tracks.
                      (       ddos12.asm):02753         ;       Outside of the directory track.
                      (       ddos12.asm):02754         ;       At the start of the track outside of the directory.
                      (       ddos12.asm):02755         ;       At the start of the track inside of the directory.
                      (       ddos12.asm):02756         ;       Any free sector at the start of a contiguous block.
                      (       ddos12.asm):02757         ;
                      (       ddos12.asm):02758         ; Entry:
                      (       ddos12.asm):02759         ;       ExtWant,S       = LSN preffered, of $FFFF.
                      (       ddos12.asm):02760         ;       DosDriveNo      = drive number
                      (       ddos12.asm):02761         ;
                      (       ddos12.asm):02762         ; Returns: 
                      (       ddos12.asm):02763         ;       U               = LSN
                      (       ddos12.asm):02764         ;       A               = length of extent.
                      (       ddos12.asm):02765         ;       B               = error code (if any).
                      (       ddos12.asm):02766         ;
                      (       ddos12.asm):02767         
     0000             (       ddos12.asm):02768         GFTry           EQU     0
     0002             (       ddos12.asm):02769         GFPointBuff     EQU     2       ; buffer pointer?
     0004             (       ddos12.asm):02770         GFlag           EQU     4       ; flags?
     0005             (       ddos12.asm):02771         TempLSN         EQU     5       ; Temporary LSN
     0007             (       ddos12.asm):02772         TempCount       EQU     7       ; Tempory count
     0008             (       ddos12.asm):02773         BTCount         EQU     8
                      (       ddos12.asm):02774         
     0009             (       ddos12.asm):02775         GFFrameSize     EQU     9       ; Stack frame size
                      (       ddos12.asm):02776         
CD31                  (       ddos12.asm):02777         GetFreeExtent   
CD31 10FF0601         (       ddos12.asm):02778                 STS     Temps1                  ; save old stack pointer
CD35 3277             (       ddos12.asm):02779                 LEAS    -GFFrameSize,S          ; make room for our stack frame
CD37 6F64             (       ddos12.asm):02780                 CLR     GFlag,S                 ; zero flags                    
CD39 BDD17D           (       ddos12.asm):02781                 JSR     >DosGetDiskGeometry     ; get disk geometry
CD3C 102600F4         (       ddos12.asm):02782                 LBNE    GetFreeExtentExit       ; error, exit
                      (       ddos12.asm):02783                 
CD40 10AE84           (       ddos12.asm):02784                 LDY     DrvDetDirLSN,X          ; get LSN of directory
CD43 EEE811           (       ddos12.asm):02785                 LDU     (ExtWant+GFFrameSize+2),S       ; get ammount we want (note +2 for PC)
CD46 EF65             (       ddos12.asm):02786                 STU     TempLSN,S               ; save it in temp
CD48 3041             (       ddos12.asm):02787                 LEAX    1,U                     ; is requested LSN = $FFFF 
CD4A 270F             (       ddos12.asm):02788                 BEQ     LCD5B                   ; yes, an use any block
                      (       ddos12.asm):02789         
                      (       ddos12.asm):02790         ; test to see if the supplied LSN is in use     
CD4C 8D3E             (       ddos12.asm):02791                 BSR     GoGetBit                ; go get bitmap for requested LSN (U)
CD4E 2639             (       ddos12.asm):02792                 BNE     GoFoundFree             ; branch if LSN not in use
                      (       ddos12.asm):02793                 
CD50 118305A0         (       ddos12.asm):02794                 CMPU    #BAMLSNPerSec           ; LSN < 1440
CD54 2505             (       ddos12.asm):02795                 BCS     LCD5B                   ; yes, try stepping in
                      (       ddos12.asm):02796                 
CD56 CE058E           (       ddos12.asm):02797                 LDU     #1422                   ; Try this LSN (+ 1 track) next
CD59 2021             (       ddos12.asm):02798                 BRA     LCD7C                   ; else try stepping out
                      (       ddos12.asm):02799         
CD5B 33A4             (       ddos12.asm):02800         LCD5B   LEAU    ,Y                      ; U=LSN of directory
CD5D 86FF             (       ddos12.asm):02801         LCD5D   LDA     #$FF                    ; flag GFTry invalid (-ve)
CD5F A7E4             (       ddos12.asm):02802                 STA     GFTry,S
                      (       ddos12.asm):02803         
                      (       ddos12.asm):02804         ; Try the start of each track until we find a free sector on two consecutive
                      (       ddos12.asm):02805         ; tracks, or reach the beginning of the disk.
                      (       ddos12.asm):02806                 
CD61 33C8EE           (       ddos12.asm):02807         LCD61   LEAU    -SecTrkSS,U             ; Decrement LSN by one complete track
CD64 EF7E             (       ddos12.asm):02808                 STU     -2,S                    ; TSTU :)
CD66 2B0C             (       ddos12.asm):02809                 BMI     LCD74                   ; branch if LSN < 0
                      (       ddos12.asm):02810                         
CD68 8D22             (       ddos12.asm):02811                 BSR     GoGetBit                ; get bitmask for LSN
CD6A 27F1             (       ddos12.asm):02812                 BEQ     LCD5D                   ; branch if LSN in use, try another
                      (       ddos12.asm):02813                 
CD6C 6DE4             (       ddos12.asm):02814                 TST     GFTry,S                 ; is GFtry valid?
CD6E 2A19             (       ddos12.asm):02815                 BPL     GoFoundFree             ; yep we found a valid block    
                      (       ddos12.asm):02816                 
CD70 EFE4             (       ddos12.asm):02817                 STU     GFTry,S                 ; save current sector, as current try
CD72 20ED             (       ddos12.asm):02818                 BRA     LCD61                   ; look on previous track
                      (       ddos12.asm):02819         
CD74 EEE4             (       ddos12.asm):02820         LCD74   LDU     GFTry,S
CD76 EF7E             (       ddos12.asm):02821                 STU     -2,S                    ; TSTU :)
CD78 2A0F             (       ddos12.asm):02822                 BPL     GoFoundFree             ; LSN for try is +ve, test it
                      (       ddos12.asm):02823                 
CD7A 33A4             (       ddos12.asm):02824                 LEAU    ,Y                      ; U=LSN of directory, try track after dir
                      (       ddos12.asm):02825                 
CD7C 33C812           (       ddos12.asm):02826         LCD7C   LEAU    SecTrkSS,U              ; Increment LSN by one complete track
CD7F 11830B40         (       ddos12.asm):02827                 CMPU    #MaxLSN                 ; beyond max LSN?
CD83 220A             (       ddos12.asm):02828                 BHI     LCD8F                   ; yes try next test
                      (       ddos12.asm):02829                 
CD85 8D05             (       ddos12.asm):02830                 BSR     GoGetBit                ; get bitmask for LSN
CD87 27F3             (       ddos12.asm):02831                 BEQ     LCD7C                   ; branch if LSN in use, try next track out
                      (       ddos12.asm):02832         
CD89                  (       ddos12.asm):02833         GoFoundFree
CD89 160082           (       ddos12.asm):02834                 LBRA    FoundFree               ; we've found a free block, go use it
                      (       ddos12.asm):02835         
CD8C                  (       ddos12.asm):02836         GoGetBit
CD8C 1600AB           (       ddos12.asm):02837                 LBRA    GetBit                  ; jump that alows us to short jump.....                 
                      (       ddos12.asm):02838         
CD8F 86FF             (       ddos12.asm):02839         LCD8F   LDA     #$FF                    ; Temp  count = -1
CD91 A767             (       ddos12.asm):02840                 STA     TempCount,S
                      (       ddos12.asm):02841                 
CD93 A664             (       ddos12.asm):02842                 LDA     GFlag,S                 ; get flag
CD95 DE8A             (       ddos12.asm):02843         LCD95   LDU     <DBZero                 ; U = zero
CD97 44               (       ddos12.asm):02844                 LSRA                            ; bottom buffer?
CD98 2503             (       ddos12.asm):02845                 BCS     LCD9D                   ; yes.....
                      (       ddos12.asm):02846                 
CD9A CE05A0           (       ddos12.asm):02847                 LDU     #BAMLSNPerSec           ; no go get other buffer
CD9D 8DED             (       ddos12.asm):02848         LCD9D   BSR     GoGetBit
                      (       ddos12.asm):02849         
CD9F C6B4             (       ddos12.asm):02850                 LDB     #BAMEntriesSec          ; 180 BAM entries per sector....
CDA1 A680             (       ddos12.asm):02851         LCDA1   LDA     ,X+                     ; get next byte from BAM 
CDA3 2607             (       ddos12.asm):02852                 BNE     LCDAC                   ; branch if next 8 sectors all free
                      (       ddos12.asm):02853                 
CDA5 3348             (       ddos12.asm):02854                 LEAU    8,U                     ; increment LSN by 8 (8 LSNs per BAM entry)
CDA7 5A               (       ddos12.asm):02855                 DECB                            ; decrement entry counter
CDA8 26F7             (       ddos12.asm):02856                 BNE     LCDA1                   ; look again if entry counter nonzero
CDAA 2041             (       ddos12.asm):02857                 BRA     LCDED                   ; counter zero skip ahead
                      (       ddos12.asm):02858         
                      (       ddos12.asm):02859         ; look for the bigest block of free LSNs....
                      (       ddos12.asm):02860         
CDAC 5F               (       ddos12.asm):02861         LCDAC   CLRB                            ; Zero BTCount
CDAD E768             (       ddos12.asm):02862                 STB     BTCount,S
                      (       ddos12.asm):02863                 
CDAF 3440             (       ddos12.asm):02864                 PSHS    U                       ; save LSN (stack offsets +2 because of push)
CDB1 5C               (       ddos12.asm):02865         LCDB1   INCB                            ; increment counter
CDB2 A680             (       ddos12.asm):02866                 LDA     ,X+                     ; get byte from BAM 
CDB4 4C               (       ddos12.asm):02867                 INCA                            ; is it $FF?
CDB5 27FA             (       ddos12.asm):02868                 BEQ     LCDB1                   ; yes occupied loop again
                      (       ddos12.asm):02869                 
CDB7 E16A             (       ddos12.asm):02870                 CMPB    BTCount+2,S             ; biggest block found ? 
CDB9 2304             (       ddos12.asm):02871                 BLS     LCDBF                   ; nope skip on
                      (       ddos12.asm):02872                 
CDBB E76A             (       ddos12.asm):02873                 STB     BTCount+2,S             ; Yes save it
CDBD EFE4             (       ddos12.asm):02874                 STU     ,S                      ; update stacked LSN
                      (       ddos12.asm):02875                 
CDBF 301F             (       ddos12.asm):02876         LCDBF   LEAX    -1,X                    ; back one byte in BAM
CDC1 8608             (       ddos12.asm):02877                 LDA     #SectorsPerBAM          ; multiply BAM byte counter by entries 
CDC3 3D               (       ddos12.asm):02878                 MUL                             ; per BAM byte
CDC4 33CB             (       ddos12.asm):02879                 LEAU    D,U                     ; point LSN at it
                      (       ddos12.asm):02880                 
CDC6 5F               (       ddos12.asm):02881         LCDC6   CLRB                            ; clear counter
CDC7 A680             (       ddos12.asm):02882                 LDA     ,X+                     ; get next BAM byte
CDC9 26E6             (       ddos12.asm):02883                 BNE     LCDB1                   ; if not zero loop again
                      (       ddos12.asm):02884                 
CDCB 3348             (       ddos12.asm):02885                 LEAU    SectorsPerBAM,U         ; add group of 8 to LSN
CDCD 1F10             (       ddos12.asm):02886                 TFR     X,D                     ; test for end of BAM 
CDCF C1B4             (       ddos12.asm):02887                 CMPB    #BAMEntriesSec
CDD1 25F3             (       ddos12.asm):02888                 BCS     LCDC6                   ; nope loop again
                      (       ddos12.asm):02889                 
CDD3 3540             (       ddos12.asm):02890                 PULS    U                       ; restore LSN of biggest block
                      (       ddos12.asm):02891                 
CDD5 8D63             (       ddos12.asm):02892                 BSR     GetBit                  ; get bitmap
CDD7 3348             (       ddos12.asm):02893                 LEAU    SectorsPerBAM,U         ; move up 8 LSNs
CDD9 A684             (       ddos12.asm):02894                 LDA     ,X                      ; get byte of LSN
                      (       ddos12.asm):02895                 
CDDB E668             (       ddos12.asm):02896                 LDB     BTCount,S               ; get count
CDDD C101             (       ddos12.asm):02897                 CMPB    #$01                    ; just 1 group of 8?
CDDF 2205             (       ddos12.asm):02898                 BHI     LCDE6                   ; branch if not....
                      (       ddos12.asm):02899                 
CDE1 335F             (       ddos12.asm):02900         LCDE1   LEAU    -1,U                    ; Back up LSN.....                      
CDE3 48               (       ddos12.asm):02901                 ASLA                            ; shift bitmap
CDE4 24FB             (       ddos12.asm):02902                 BCC     LCDE1                   ; till we get correct LSN for bit...
                      (       ddos12.asm):02903                 
CDE6 48               (       ddos12.asm):02904         LCDE6   ASLA                            ; shift bitmap
CDE7 2404             (       ddos12.asm):02905                 BCC     LCDED                   ; branch if beginning of bitmap byte?
CDE9 335F             (       ddos12.asm):02906                 LEAU    -1,U                    ; back up LSN
CDEB 20F9             (       ddos12.asm):02907                 BRA     LCDE6                   ; loop again
                      (       ddos12.asm):02908         
CDED C102             (       ddos12.asm):02909         LCDED   CMPB    #$02                    ; 2 blocks of 8?        
CDEF 241D             (       ddos12.asm):02910                 BCC     FoundFree               ; yep, found enough
                      (       ddos12.asm):02911                 
CDF1 E167             (       ddos12.asm):02912                 CMPB    TempCount,S             ; bigger than count
CDF3 2219             (       ddos12.asm):02913                 BHI     FoundFree               ; yep, found enough
                      (       ddos12.asm):02914                 
CDF5 A667             (       ddos12.asm):02915                 LDA     TempCount,S             ; temp count = $FF
CDF7 4C               (       ddos12.asm):02916                 INCA
CDF8 260A             (       ddos12.asm):02917                 BNE     LCE04                   ; no....
                      (       ddos12.asm):02918                 
CDFA E767             (       ddos12.asm):02919                 STB     TempCount,S             ; save temp count
CDFC EF65             (       ddos12.asm):02920                 STU     TempLSN,S               ; and temp LSN  
CDFE A664             (       ddos12.asm):02921                 LDA     GFlag,S                 ; get GFlag
CE00 8803             (       ddos12.asm):02922                 EORA    #$03                    ; flip bottom 2 bits
CE02 2091             (       ddos12.asm):02923                 BRA     LCD95                   ; go look again.....
                      (       ddos12.asm):02924         
CE04 EE65             (       ddos12.asm):02925         LCE04   LDU     TempLSN,S               ; get TempLSN
CE06 8D32             (       ddos12.asm):02926                 BSR     GetBit                  ; go get it's bitmap entries
CE08 2604             (       ddos12.asm):02927                 BNE     FoundFree               ; got some, allocate it 
                      (       ddos12.asm):02928                 
CE0A C694             (       ddos12.asm):02929                 LDB     #ErrDF                  ; disk full 
CE0C 2026             (       ddos12.asm):02930                 BRA     GetFreeExtentExit       ; exit, cleaning up
                      (       ddos12.asm):02931         
CE0E                  (       ddos12.asm):02932         FoundFree   
CE0E 8D2A             (       ddos12.asm):02933                 BSR     GetBit                  ; Get bitmap
CE10 5F               (       ddos12.asm):02934                 CLRB                            ; sector count?
                      (       ddos12.asm):02935                 
CE11 5C               (       ddos12.asm):02936         LCE11   INCB
CE12 2717             (       ddos12.asm):02937                 BEQ     LCE2B                   ; overflow?
                      (       ddos12.asm):02938                 
                      (       ddos12.asm):02939         ; this clears the bit in the BAM, reserving the block for the file        
CE14 3402             (       ddos12.asm):02940                 PSHS    A                       ; save bitmask
CE16 43               (       ddos12.asm):02941                 COMA                            ; compliment, to get turn off mask
CE17 A484             (       ddos12.asm):02942                 ANDA    ,X                      ; turn of bit
CE19 A784             (       ddos12.asm):02943                 STA     ,X                      ; resave it
CE1B 3502             (       ddos12.asm):02944                 PULS    A                       ; restore bitmask
                      (       ddos12.asm):02945                 
CE1D 48               (       ddos12.asm):02946                 ASLA                            ; shift bitmask left (try next block)
CE1E 2404             (       ddos12.asm):02947                 BCC     LCE24                   ; branch if all bits done
                      (       ddos12.asm):02948                 
CE20 8601             (       ddos12.asm):02949                 LDA     #$01                    ; re-initialize mask    
CE22 3001             (       ddos12.asm):02950                 LEAX    1,X                     ; get next group of blocks' bits from BAM
CE24 A584             (       ddos12.asm):02951         LCE24   BITA    ,X                      ; is sector in use ?
CE26 26E9             (       ddos12.asm):02952                 BNE     LCE11                   ; no reserve it
CE28 1F98             (       ddos12.asm):02953                 TFR     B,A                     ; yes, get sector count in A
                      (       ddos12.asm):02954                 
CE2A 8C               (       ddos12.asm):02955                 FCB     Skip2
CE2B 86FF             (       ddos12.asm):02956         LCE2B   LDA     #$FF                    ; 
CE2D AE62             (       ddos12.asm):02957                 LDX     GFPointBuff,S           ; get disk buffer entry pointer
CE2F C6FF             (       ddos12.asm):02958                 LDB     #BuffDirty              ; make buffer dirty so it will be re-written
CE31 E702             (       ddos12.asm):02959                 STB     BuffFlag,X
CE33 5F               (       ddos12.asm):02960                 CLRB                            ; flag no error
                      (       ddos12.asm):02961                 
CE34                  (       ddos12.asm):02962         GetFreeExtentExit   
CE34 10FE0601         (       ddos12.asm):02963                 LDS     Temps1                  ; restore saved stack pointer
CE38 5D               (       ddos12.asm):02964                 TSTB                            ; test B, set CC.C on error
CE39 39               (       ddos12.asm):02965                 RTS                             ; return to caller
                      (       ddos12.asm):02966         ;
                      (       ddos12.asm):02967         ; Get byte and bitmask for LSN
                      (       ddos12.asm):02968         ;
                      (       ddos12.asm):02969         ; The appropreate sector is read if not already in memory.
                      (       ddos12.asm):02970         ;
                      (       ddos12.asm):02971         ; On error returns to the calling program....
                      (       ddos12.asm):02972         ;
                      (       ddos12.asm):02973         ; Entry:
                      (       ddos12.asm):02974         ;       U       = LSN
                      (       ddos12.asm):02975         ;       Y       = Directory LSN
                      (       ddos12.asm):02976         ;
                      (       ddos12.asm):02977         ; Returns:
                      (       ddos12.asm):02978         ;       A       = bitmask
                      (       ddos12.asm):02979         ;       X       = byte within table
                      (       ddos12.asm):02980         ;       U,Y     = preserved.
                      (       ddos12.asm):02981         ;
                      (       ddos12.asm):02982         ; It is important to note that within the BAM a 1 bit represents a free
                      (       ddos12.asm):02983         ; sector and a 0 bit represents a used sector.
                      (       ddos12.asm):02984         ; The BAM is also split over the first two sectors of the directory track
                      (       ddos12.asm):02985         ; such that the first 1440 LSNs are in bytes 0..179 of sector 1
                      (       ddos12.asm):02986         ; and the second 1440 sectors are in bytes 0..179 of the second sector.
                      (       ddos12.asm):02987         ;
                      (       ddos12.asm):02988         
                      (       ddos12.asm):02989         
CE3A 3460             (       ddos12.asm):02990         GetBit  PSHS    Y,U                     ; save regs
CE3C 8601             (       ddos12.asm):02991                 LDA     #$01                    ; bit for 1st sector
CE3E 118305A0         (       ddos12.asm):02992                 CMPU    #BAMLSNPerSec           ; LSN in first table?
CE42 2507             (       ddos12.asm):02993                 BCS     LCE4B                   ; yes, skip ahead
                      (       ddos12.asm):02994                 
CE44 3121             (       ddos12.asm):02995                 LEAY    1,Y                     ; point to next table
CE46 33C9FA60         (       ddos12.asm):02996                 LEAU    -BAMLSNPerSec,U         ; decrement U to get offset in second table
CE4A 48               (       ddos12.asm):02997                 ASLA                            ; bit for second sector
                      (       ddos12.asm):02998                 
CE4B 3440             (       ddos12.asm):02999         LCE4B   PSHS    U                       ; save LSN required
CE4D A56C             (       ddos12.asm):03000                 BITA    GFlag+8,S               ; Already free?
CE4F 260D             (       ddos12.asm):03001                 BNE     LCE5E                   ; yes.....
                      (       ddos12.asm):03002                 
CE51 A76C             (       ddos12.asm):03003                 STA     GFlag+8,S               ; save it
CE53 BDD247           (       ddos12.asm):03004                 JSR     >DOSFindAndRead         ; read LSN (Y), buffer entry ptr returned in X
CE56 26DC             (       ddos12.asm):03005                 BNE     GetFreeExtentExit                       ; error exit
                      (       ddos12.asm):03006                 
CE58 AF6A             (       ddos12.asm):03007                 STX     GFPointBuff+8,S         ; store disk buffer entry pointer
CE5A 86FF             (       ddos12.asm):03008                 LDA     #BuffDirty              ; mark buffer dirty
CE5C A702             (       ddos12.asm):03009                 STA     BuffFlag,X              
                      (       ddos12.asm):03010         
CE5E AE6A             (       ddos12.asm):03011         LCE5E   LDX     GFPointBuff+8,S         ; get disk buffer entry pointer
CE60 AE05             (       ddos12.asm):03012                 LDX     BuffAddr,X              ; get address of data
CE62 3506             (       ddos12.asm):03013                 PULS    D                       ; recover required LSN
                      (       ddos12.asm):03014                 
CE64 44               (       ddos12.asm):03015                 LSRA                            ; D=D/8, get LSN bit and byte offset in BAM.
CE65 56               (       ddos12.asm):03016                 RORB
CE66 44               (       ddos12.asm):03017                 LSRA
CE67 56               (       ddos12.asm):03018                 RORB
CE68 44               (       ddos12.asm):03019                 LSRA
CE69 56               (       ddos12.asm):03020                 RORB
                      (       ddos12.asm):03021                 
CE6A A663             (       ddos12.asm):03022                 LDA     3,S                     ; get LSB of required LSN
CE6C 8407             (       ddos12.asm):03023                 ANDA    #$07                    ; mask off bottom 3 bits
CE6E CEA672           (       ddos12.asm):03024                 LDU     #DPixMaskTable4Col-1    ; convenient no->bitmask table....                              
CE71 40               (       ddos12.asm):03025                 NEGA                            ; negate A
CE72 A6C6             (       ddos12.asm):03026                 LDA     A,U                     ; get bit from table
CE74 3A               (       ddos12.asm):03027                 ABX                             ; lookup byte in BAM
CE75 A584             (       ddos12.asm):03028                 BITA    ,X                      ; extract it
CE77 35E0             (       ddos12.asm):03029                 PULS    Y,U,PC                  ; restore and return
                      (       ddos12.asm):03030         
                      (       ddos12.asm):03031         ;
                      (       ddos12.asm):03032         ; Get a file length.
                      (       ddos12.asm):03033         ;
                      (       ddos12.asm):03034         ; Entry :
                      (       ddos12.asm):03035         ;       A       = FCB no.
                      (       ddos12.asm):03036         ;
                      (       ddos12.asm):03037         ; Exit :
                      (       ddos12.asm):03038         ;       U:A     = length of file 
                      (       ddos12.asm):03039         ;       B       = Error code
                      (       ddos12.asm):03040         ;
                      (       ddos12.asm):03041         
CE79                  (       ddos12.asm):03042         DOSGetFLen   
CE79 97F1             (       ddos12.asm):03043                 STA     <DosCurrCtrlBlk         ; save FCB no
CE7B 8D2F             (       ddos12.asm):03044                 BSR     DosFCBNoToAddr          ; get address of FCB
CE7D 6D0F             (       ddos12.asm):03045                 TST     FCBDirFlags,X           ; get dir flags from FCB
CE7F 2A03             (       ddos12.asm):03046                 BPL     LCE84                   ; ok skip
                      (       ddos12.asm):03047                 
CE81 C69C             (       ddos12.asm):03048                 LDB     #ErrFF          ; error : file not found
CE83 39               (       ddos12.asm):03049         LCE83   RTS
                      (       ddos12.asm):03050         
CE84 A68812           (       ddos12.asm):03051         LCE84   LDA     FCBFileLen+2,X          ; number of extra bytes in last sector          
CE87 EE8810           (       ddos12.asm):03052                 LDU     FCBFileLen,X            ; number of sectors
CE8A 3141             (       ddos12.asm):03053                 LEAY    1,U                     
CE8C 261C             (       ddos12.asm):03054                 BNE     LCEAA
                      (       ddos12.asm):03055         
                      (       ddos12.asm):03056         ; Note U must still be $FFFF here so that FindFSNinU won't stop too soon.
                      (       ddos12.asm):03057                 
CE8E BDCAF9           (       ddos12.asm):03058                 JSR     >FindFSNinU             ; Go find File sector no in U
CE91 26F0             (       ddos12.asm):03059                 BNE     LCE83
                      (       ddos12.asm):03060                 
CE93 F60682           (       ddos12.asm):03061                 LDB     DosCurFileNo            ; get file number
CE96 E7881E           (       ddos12.asm):03062                 STB     FCBDirNoLast,X          ; save in FCB
                      (       ddos12.asm):03063                 
CE99 A6C818           (       ddos12.asm):03064         LCE99   LDA     DirEntLastBytes,U       ; get bytes in last sector
CE9C A78812           (       ddos12.asm):03065                 STA     FCBFileLen+2,X          ; add to file length
CE9F FE066B           (       ddos12.asm):03066                 LDU     DosTotalSFound
CEA2 4D               (       ddos12.asm):03067                 TSTA                            ; 0 bytes in last sector ?
CEA3 2702             (       ddos12.asm):03068                 BEQ     LCEA7                   ; yep skip ahead
                      (       ddos12.asm):03069                 
CEA5 335F             (       ddos12.asm):03070                 LEAU    -1,U                    ; decrement total sectors found
CEA7 EF8810           (       ddos12.asm):03071         LCEA7   STU     FCBFileLen,X            ; set file len
CEAA 5F               (       ddos12.asm):03072         LCEAA   CLRB                            ; no error
CEAB 39               (       ddos12.asm):03073         LCEAB   RTS
                      (       ddos12.asm):03074         
                      (       ddos12.asm):03075         ;
                      (       ddos12.asm):03076         ; Convert an FCB number to it's address.
                      (       ddos12.asm):03077         ;
                      (       ddos12.asm):03078         ; Entry :
                      (       ddos12.asm):03079         ;       A       = FCB number 0..9
                      (       ddos12.asm):03080         ;
                      (       ddos12.asm):03081         ; Exit :
                      (       ddos12.asm):03082         ;       X       = address of FCB
                      (       ddos12.asm):03083         ;       D,U,Y   = preserved
                      (       ddos12.asm):03084         ;
                      (       ddos12.asm):03085         
CEAC                  (       ddos12.asm):03086         DosFCBNoToAddr   
CEAC 3406             (       ddos12.asm):03087                 PSHS    D
CEAE 96F1             (       ddos12.asm):03088                 LDA     <DosCurrCtrlBlk         ; get current FCB
CEB0 C61F             (       ddos12.asm):03089                 LDB     #DosFCBLength           ; work out offset into table
CEB2 3D               (       ddos12.asm):03090                 MUL
CEB3 1F01             (       ddos12.asm):03091                 TFR     D,X                     ; get offset into X
CEB5 308906BD         (       ddos12.asm):03092                 LEAX    DosFCB0Addr,X           ; work out address of FCB
CEB9 3586             (       ddos12.asm):03093                 PULS    D,PC
                      (       ddos12.asm):03094         
                      (       ddos12.asm):03095         ;
                      (       ddos12.asm):03096         ; Close All open files and clean up buffers for one drive.
                      (       ddos12.asm):03097         ;
                      (       ddos12.asm):03098         ; This should be called four times when basic returns to the "OK" 
                      (       ddos12.asm):03099         ; prompt.
                      (       ddos12.asm):03100         ;
                      (       ddos12.asm):03101         ; Note: only closes files on the current disk (in DosDriveNo).
                      (       ddos12.asm):03102         ;
                      (       ddos12.asm):03103         ; Entry:
                      (       ddos12.asm):03104         ;
                      (       ddos12.asm):03105         ;       DosDriveNo      = drive no to close files on.
                      (       ddos12.asm):03106         ;
                      (       ddos12.asm):03107         ; Returns:
                      (       ddos12.asm):03108         ;       B               = Error code.
                      (       ddos12.asm):03109         ;
                      (       ddos12.asm):03110         
CEBB                  (       ddos12.asm):03111         DOSCloseAll   
CEBB 860A             (       ddos12.asm):03112                 LDA     #DosNumFCBs             ; do all FCBs
CEBD 97F1             (       ddos12.asm):03113                 STA     <DosCurrCtrlBlk         ; set current FCB no
                      (       ddos12.asm):03114                 
CEBF 8DEB             (       ddos12.asm):03115         LCEBF   BSR     DosFCBNoToAddr          ; Get FCB address
CEC1 A60B             (       ddos12.asm):03116                 LDA     FCBDrive,X              ; get drive from FCB 
CEC3 91EB             (       ddos12.asm):03117                 CMPA    <DosDriveNo             ; same as current drive ?
CEC5 2604             (       ddos12.asm):03118                 BNE     LCECB                   ; nope skip on
                      (       ddos12.asm):03119                 
CEC7 8D0A             (       ddos12.asm):03120                 BSR     DosCloseFile2           ; close the file
CEC9 26E0             (       ddos12.asm):03121                 BNE     LCEAB                   ; error : exit
                      (       ddos12.asm):03122         
CECB 0AF1             (       ddos12.asm):03123         LCECB   DEC     <DosCurrCtrlBlk         ; do next block
CECD 2AF0             (       ddos12.asm):03124                 BPL     LCEBF                   ; if more loop again
CECF 5F               (       ddos12.asm):03125         LCECF   CLRB
CED0 39               (       ddos12.asm):03126                 RTS
                      (       ddos12.asm):03127         
                      (       ddos12.asm):03128         ;
                      (       ddos12.asm):03129         ; Close a single file.
                      (       ddos12.asm):03130         ;
                      (       ddos12.asm):03131         ; Entry:
                      (       ddos12.asm):03132         ;       A       = FCB no to close.
                      (       ddos12.asm):03133         ;
                      (       ddos12.asm):03134         ; Exit:
                      (       ddos12.asm):03135         ;       B       = Error code.
                      (       ddos12.asm):03136         ;
                      (       ddos12.asm):03137         ; If this was the last file open for that drive, it will call cleanup for all
                      (       ddos12.asm):03138         ; pages associated with that drive, and then invalidate them. The directory
                      (       ddos12.asm):03139         ; track for that drive is then backed up.
                      (       ddos12.asm):03140         ;
                      (       ddos12.asm):03141         
CED1                  (       ddos12.asm):03142         DOSCloseFile   
CED1 97F1             (       ddos12.asm):03143                 STA     <DosCurrCtrlBlk         ; set current FCB no
                      (       ddos12.asm):03144         
CED3                  (       ddos12.asm):03145         DosCloseFile2   
CED3 8DD7             (       ddos12.asm):03146                 BSR     DosFCBNoToAddr          ; Get FCB address
CED5 6D84             (       ddos12.asm):03147                 TST     ,X                      ; is first character of filename zero ?
CED7 27F6             (       ddos12.asm):03148                 BEQ     LCECF                   ; yes : return
                      (       ddos12.asm):03149                 
CED9 96EB             (       ddos12.asm):03150                 LDA     <DosDriveNo             ; save current drive on stack
CEDB 3402             (       ddos12.asm):03151                 PSHS    A
CEDD A60B             (       ddos12.asm):03152                 LDA     FCBDrive,X              ; get drive from FCB 
CEDF 97EB             (       ddos12.asm):03153                 STA     <DosDriveNo             ; make it current
CEE1 6F84             (       ddos12.asm):03154                 CLR     ,X                      ; zero out first char of filename 
                      (       ddos12.asm):03155                 
CEE3 BDD17D           (       ddos12.asm):03156                 JSR     >DosGetDiskGeometry     ; get disk geometry
CEE6 2626             (       ddos12.asm):03157                 BNE     DOSCloseFileExit                        ; error : exit
                      (       ddos12.asm):03158                 
CEE8 6D05             (       ddos12.asm):03159                 TST     DrvDetUseCnt,X          ; Number of files in use on this drive
CEEA 2707             (       ddos12.asm):03160                 BEQ     LCEF3                   ; branch if zero
                      (       ddos12.asm):03161                 
CEEC 6A05             (       ddos12.asm):03162                 DEC     DrvDetUseCnt,X          ; else decrement file in use count
CEEE 2703             (       ddos12.asm):03163                 BEQ     LCEF3                   ; again test for zero
                      (       ddos12.asm):03164                 
CEF0 5F               (       ddos12.asm):03165                 CLRB                            ; flag no error
CEF1 201B             (       ddos12.asm):03166                 BRA     DOSCloseFileExit        ; and exit
                      (       ddos12.asm):03167         
                      (       ddos12.asm):03168         ; clean up the drive
CEF3 E602             (       ddos12.asm):03169         LCEF3   LDB     DrvDetFreeLen,X         ; get free length byte
CEF5 270D             (       ddos12.asm):03170                 BEQ     LCF04                   ; branch if zero
                      (       ddos12.asm):03171                 
CEF7 3410             (       ddos12.asm):03172                 PSHS    X                       ; save buffer ptr
CEF9 AE03             (       ddos12.asm):03173                 LDX     DrvDetFreeEPtr,X        ; get free extent pointer
CEFB BDD012           (       ddos12.asm):03174                 JSR     >DeleteExtent           ; and delete it
                      (       ddos12.asm):03175                 
CEFE 3510             (       ddos12.asm):03176                 PULS    X                       ; recover buffer ptr
CF00 260C             (       ddos12.asm):03177                 BNE     DOSCloseFileExit        ; branch if error
                      (       ddos12.asm):03178                 
CF02 6F02             (       ddos12.asm):03179                 CLR     DrvDetFreeLen,X         ; free length byte
CF04 BDC734           (       ddos12.asm):03180         LCF04   JSR     >DOSSyncDir             ; Syncronise directory tracks
                      (       ddos12.asm):03181                 
                      (       ddos12.asm):03182         ; Invalidate drive table so user can swap disks now.    
CF07 CE0696           (       ddos12.asm):03183                 LDU     #DosD0Online-1          ; point to drive online table
CF0A 96EB             (       ddos12.asm):03184                 LDA     <DosDriveNo             ; mark FCB's drive as inactive
CF0C 6FC6             (       ddos12.asm):03185                 CLR     A,U
                      (       ddos12.asm):03186                 
CF0E                  (       ddos12.asm):03187         DOSCloseFileExit   
CF0E 3502             (       ddos12.asm):03188                 PULS    A                       ; recover acive drive at call
CF10 97EB             (       ddos12.asm):03189                 STA     <DosDriveNo             ; restore it
CF12 5D               (       ddos12.asm):03190                 TSTB                            ; set flags for error
CF13 39               (       ddos12.asm):03191         LCF13   RTS
                      (       ddos12.asm):03192         
                      (       ddos12.asm):03193         ;
                      (       ddos12.asm):03194         ; Create a file.
                      (       ddos12.asm):03195         ;
                      (       ddos12.asm):03196         ; If a file exists with the supplied name, is is renamed with a ".BAK" extension.
                      (       ddos12.asm):03197         ; If there is already a ".BAK" file then it is first deleted.
                      (       ddos12.asm):03198         ; DOSRCreateFile is called for the real creation.
                      (       ddos12.asm):03199         ;
                      (       ddos12.asm):03200         ; Entry:        
                      (       ddos12.asm):03201         ;       A       = File number
                      (       ddos12.asm):03202         ;
                      (       ddos12.asm):03203         ; Exit:
                      (       ddos12.asm):03204         ;       B       = Error code
                      (       ddos12.asm):03205         ;
                      (       ddos12.asm):03206         
CF14                  (       ddos12.asm):03207         DOSCreateFile   
CF14 B7067D           (       ddos12.asm):03208                 STA     DosTempFCBNo            ; save file number
CF17 BDCEAC           (       ddos12.asm):03209                 JSR     >DosFCBNoToAddr         ; get file's address
CF1A BF0678           (       ddos12.asm):03210                 STX     DosSaveFCB              ; save it's FCB address
                      (       ddos12.asm):03211                 
CF1D C60C             (       ddos12.asm):03212                 LDB     #8+3+1                  ; Length of name,extension,drive
CF1F CE0650           (       ddos12.asm):03213                 LDU     #DosCurDriveInfo        ; point at current drive info
CF22 A680             (       ddos12.asm):03214         LCF22   LDA     ,X+                     ; get a byte from FCB
CF24 A7C0             (       ddos12.asm):03215                 STA     ,U+                     ; save in current drive info
CF26 5A               (       ddos12.asm):03216                 DECB                            ; decrement count
CF27 26F9             (       ddos12.asm):03217                 BNE     LCF22                   ; loop if more to do
                      (       ddos12.asm):03218                 
CF29 EC5C             (       ddos12.asm):03219                 LDD     -4,U                    ; get and save current extension
CF2B FD067A           (       ddos12.asm):03220                 STD     DosSaveExt
CF2E A65E             (       ddos12.asm):03221                 LDA     -2,U
CF30 B7067C           (       ddos12.asm):03222                 STA     DosSaveExt+2
                      (       ddos12.asm):03223                 
CF33 CC4241           (       ddos12.asm):03224                 LDD     #"BA"                   ; set current extension to "BAK"
CF36 ED5C             (       ddos12.asm):03225                 STD     -4,U
CF38 864B             (       ddos12.asm):03226                 LDA     #'K'
CF3A A75E             (       ddos12.asm):03227                 STA     -2,U
                      (       ddos12.asm):03228                 
                      (       ddos12.asm):03229                 ifdef   PGSFix
                      (       ddos12.asm):03230                 TST     3,X
                      (       ddos12.asm):03231                 else
CF3C 6D0F             (       ddos12.asm):03232                 TST     FCBDirFlags,X           ; test flags, this is incorrect as X no longer 
                      (       ddos12.asm):03233                                                 ; points at head of FCB!
                      (       ddos12.asm):03234                 endc
                      (       ddos12.asm):03235                 
CF3E 2B29             (       ddos12.asm):03236                 BMI     LCF69                   ; flags minus....brnach :)
                      (       ddos12.asm):03237                 
CF40 BDC87C           (       ddos12.asm):03238                 JSR     >DOSOpenFile            ; Try opening 'FILENAME.BAK'
CF43 C1A0             (       ddos12.asm):03239                 CMPB    #ErrNE                  ; test if we got file doesn't exist error? 
                      (       ddos12.asm):03240                 
                      (       ddos12.asm):03241                 ifdef   PGSFix
                      (       ddos12.asm):03242                 BEQ     LCF51                   ; correct place to go
                      (       ddos12.asm):03243                 else
CF45 2708             (       ddos12.asm):03244                 BEQ     LCF4F                   ; DDv1 goes here
                      (       ddos12.asm):03245                 endc
                      (       ddos12.asm):03246                 
CF47 5D               (       ddos12.asm):03247                 TSTB                            ; test for error
CF48 26C9             (       ddos12.asm):03248                 BNE     LCF13                   ; if error return
                      (       ddos12.asm):03249                 
CF4A BDCFB6           (       ddos12.asm):03250                 JSR     >DOSDeleteFile          ; else delete the current BAK file
CF4D 26C4             (       ddos12.asm):03251                 BNE     LCF13                   ; if error return
                      (       ddos12.asm):03252                 
                      (       ddos12.asm):03253                 ifdef   PGSFix
CF4F                  (       ddos12.asm):03254         LCF4F   leax    12,x                    ; Move FCB pointer forward
CF4F                  (       ddos12.asm):03255         LCF51   clr     -12,x                   ; clear first char of filename
                      (       ddos12.asm):03256                 JSR     LDFCA
                      (       ddos12.asm):03257                 BEQ     LCF69
                      (       ddos12.asm):03258                 else
CF4F 6D9F0678         (       ddos12.asm):03259         LCF4F   TST     [DosSaveFCB]            ; test first character of filename
CF53 2714             (       ddos12.asm):03260                 BEQ     LCF69                   ; zero skip on
CF55 B6067D           (       ddos12.asm):03261                 LDA     DosTempFCBNo            ; get original fileno
                      (       ddos12.asm):03262                 endc
                      (       ddos12.asm):03263                 
CF58 BDD0CF           (       ddos12.asm):03264                 JSR     >DOSRename              ; rename original file to bak.
CF5B 2704             (       ddos12.asm):03265                 BEQ     LCF61                   ; no error, branch on
                      (       ddos12.asm):03266                 
CF5D C19C             (       ddos12.asm):03267                 CMPB    #ErrFF                  ; is it ?? error !!!!
CF5F 26B2             (       ddos12.asm):03268                 BNE     LCF13                   ; no : exit
                      (       ddos12.asm):03269         
CF61 B6067D           (       ddos12.asm):03270         LCF61   LDA     DosTempFCBNo            ; get temp fileno
CF64 BDCED1           (       ddos12.asm):03271                 JSR     >DOSCloseFile           ; close the file
CF67 26AA             (       ddos12.asm):03272                 BNE     LCF13                   ; error, exit
                      (       ddos12.asm):03273                 
CF69 FC067A           (       ddos12.asm):03274         LCF69   LDD     DosSaveExt              ; restore original extension
CF6C FD0658           (       ddos12.asm):03275                 STD     DosCurExtension
CF6F B6067C           (       ddos12.asm):03276                 LDA     DosSaveExt+2
CF72 B7065A           (       ddos12.asm):03277                 STA     DosCurExtension+2
                      (       ddos12.asm):03278                 
CF75 BDC87C           (       ddos12.asm):03279                 JSR     >DOSOpenFile            ; try opening file
CF78 2704             (       ddos12.asm):03280                 BEQ     DOSRawCreate            ; no error, skip
                      (       ddos12.asm):03281                 
CF7A C1A0             (       ddos12.asm):03282                 CMPB    #ErrNE                  ; is it file does not exist error?
CF7C 2695             (       ddos12.asm):03283                 BNE     LCF13                   ; no, exit
                      (       ddos12.asm):03284                 
                      (       ddos12.asm):03285         ;
                      (       ddos12.asm):03286         ; Raw create
                      (       ddos12.asm):03287         ;
                      (       ddos12.asm):03288         ; Entry:
                      (       ddos12.asm):03289         ;       A       = file no
                      (       ddos12.asm):03290         ;
                      (       ddos12.asm):03291         ; Exit:
                      (       ddos12.asm):03292         ;       B       = Error code
                      (       ddos12.asm):03293         ;
                      (       ddos12.asm):03294         ;       
                      (       ddos12.asm):03295                 
CF7E                  (       ddos12.asm):03296         DOSRawCreate   
CF7E 97F1             (       ddos12.asm):03297                 STA     <DosCurrCtrlBlk         ; save fileno as current
CF80 BDCEAC           (       ddos12.asm):03298                 JSR     >DosFCBNoToAddr         ; get it's FCB address
                      (       ddos12.asm):03299                 
CF83 6D0F             (       ddos12.asm):03300                 TST     FCBDirFlags,X           ; test FCB's flags
CF85 2B03             (       ddos12.asm):03301                 BMI     LCF8A                   ; 
                      (       ddos12.asm):03302                  
CF87 C69E             (       ddos12.asm):03303                 LDB     #ErrFE                  ; flag file exists.....
CF89 39               (       ddos12.asm):03304         LCF89   RTS
                      (       ddos12.asm):03305         
CF8A 4F               (       ddos12.asm):03306         LCF8A   CLRA                            ; clear, flag normal filename block wanted
CF8B BDD0FC           (       ddos12.asm):03307                 JSR     >FindEmptyDir           ; find an empty filename block in directory 
CF8E 26F9             (       ddos12.asm):03308                 BNE     LCF89                   ; error, exit
                      (       ddos12.asm):03309                 
CF90 BDCEAC           (       ddos12.asm):03310                 JSR     >DosFCBNoToAddr         ; get address of FCB
CF93 A7881D           (       ddos12.asm):03311                 STA     FCBDiskFileNo,X         ; save filenumber in FCB
CF96 A7881E           (       ddos12.asm):03312                 STA     FCBDirNoLast,X
                      (       ddos12.asm):03313                 
                      (       ddos12.asm):03314         ;clear out FCB extents  
CF99 C61C             (       ddos12.asm):03315                 LDB     #FCBSecExtent2          ; point to end of second FCB extent
CF9B 6F85             (       ddos12.asm):03316         LCF9B   CLR     B,X                     ; clear a byte  
CF9D 5A               (       ddos12.asm):03317                 DECB                            ; decrement offset
CF9E C10C             (       ddos12.asm):03318                 CMPB    #FCBFilePointer         ; reached FCB file pointer
CFA0 24F9             (       ddos12.asm):03319                 BCC     LCF9B                   ; nope, loop again
                      (       ddos12.asm):03320                 
CFA2 C618             (       ddos12.asm):03321                 LDB     #DirEntryLen-1          ; clear bytes in DIR entry
CFA4 6FC5             (       ddos12.asm):03322         LCFA4   CLR     B,U                     ; clear a byte
                      (       ddos12.asm):03323         
CFA6                  (       ddos12.asm):03324         CmdRenameMC
CFA6 5A               (       ddos12.asm):03325                 DECB                            ; decrement count       
CFA7 2AFB             (       ddos12.asm):03326                 BPL     LCFA4                   ; keep going until all done
                      (       ddos12.asm):03327                 
CFA9 3341             (       ddos12.asm):03328                 LEAU    DirEntFilename,U        ; point at dir entry filename
CFAB C60B             (       ddos12.asm):03329                 LDB     #8+3                    ; length of filename + ext
CFAD A680             (       ddos12.asm):03330         LCFAD   LDA     ,X+                     ; get a byte from FCB
CFAF A7C0             (       ddos12.asm):03331                 STA     ,U+                     ; put in dir entry
CFB1 5A               (       ddos12.asm):03332                 DECB                            ; decrement count
CFB2 26F9             (       ddos12.asm):03333                 BNE     LCFAD                   ; loop if not all done
                      (       ddos12.asm):03334                 
CFB4 5F               (       ddos12.asm):03335                 CLRB                            ; flag no error
CFB5 39               (       ddos12.asm):03336         LCFB5   RTS                             ; return
                      (       ddos12.asm):03337         
                      (       ddos12.asm):03338         ;
                      (       ddos12.asm):03339         ; Delete a file from disk.
                      (       ddos12.asm):03340         ;
                      (       ddos12.asm):03341         ; Entry:
                      (       ddos12.asm):03342         ;       A       = filenumber
                      (       ddos12.asm):03343         ;
                      (       ddos12.asm):03344         ; Exit:
                      (       ddos12.asm):03345         ;       B       = Error code
                      (       ddos12.asm):03346         ;
                      (       ddos12.asm):03347         
CFB6                  (       ddos12.asm):03348         DOSDeleteFile   
CFB6 BDD0BC           (       ddos12.asm):03349                 JSR     >DosCheckProtect        ; check file protection
CFB9 26FA             (       ddos12.asm):03350                 BNE     LCFB5                   ; error, return
                      (       ddos12.asm):03351                 
CFBB 3410             (       ddos12.asm):03352                 PSHS    X                       ; save FCB pointer
CFBD E6881D           (       ddos12.asm):03353                 LDB     FCBDiskFileNo,X         ; get disk file  number
CFC0 BDD208           (       ddos12.asm):03354                 JSR     >DOSGetDirEntry2        ; Get dir entry 
CFC3 2647             (       ddos12.asm):03355                 BNE     LD00C                   ; error, cleanup and exit
                      (       ddos12.asm):03356                 
CFC5 1F13             (       ddos12.asm):03357                 TFR     X,U                     ; save dir entry pointer in U
CFC7 3510             (       ddos12.asm):03358                 PULS    X                       ; restore FCB pointer
                      (       ddos12.asm):03359                 
CFC9 314C             (       ddos12.asm):03360                 LEAY    DirEntFnBlock1,U        ; point Y to first allocation block     
CFCB C604             (       ddos12.asm):03361                 LDB     #$04
CFCD A6C4             (       ddos12.asm):03362         LCFCD   LDA     DirEntAttr,U            ; get attributes from directory entry
CFCF 8420             (       ddos12.asm):03363                 ANDA    #AttrContinued          ; is this a continuation block?
CFD1 2703             (       ddos12.asm):03364                 BEQ     LCFD6
                      (       ddos12.asm):03365                 
CFD3 A6C818           (       ddos12.asm):03366                 LDA     DirEntFlag,U            ; get block no of continuation entries
CFD6 3406             (       ddos12.asm):03367         LCFD6   PSHS    D                       ; save D
CFD8 C681             (       ddos12.asm):03368                 LDB     #AttrAfterDel           ; invalidate block
CFDA E7C4             (       ddos12.asm):03369                 STB     ,U
                      (       ddos12.asm):03370                 
CFDC 3410             (       ddos12.asm):03371                 PSHS    X                       ; save FCB pointer
                      (       ddos12.asm):03372                 
CFDE AEA1             (       ddos12.asm):03373         LCFDE   LDX     ,Y++                    ; get allocation LSN
CFE0 E6A0             (       ddos12.asm):03374                 LDB     ,Y+                     ; get allocation sector count
CFE2 270A             (       ddos12.asm):03375                 BEQ     LCFEE                   ; branch if zero sectors, end of allocations
                      (       ddos12.asm):03376                 
CFE4 3420             (       ddos12.asm):03377                 PSHS    Y                       ; save allocation entry pointer
CFE6 8D2A             (       ddos12.asm):03378                 BSR     DeleteExtent            ; delete the extent
CFE8 3520             (       ddos12.asm):03379                 PULS    Y                       ; restore allocation entry pointer
CFEA 1026FA01         (       ddos12.asm):03380                 LBNE    DosFReadErrorExit       ; cleanup and exit if error
                      (       ddos12.asm):03381                 
CFEE 6A63             (       ddos12.asm):03382         LCFEE   DEC     3,S                     ; decrement entry count
CFF0 26EC             (       ddos12.asm):03383                 BNE     LCFDE                   ; loop again if more entries in this dir block
                      (       ddos12.asm):03384                 
CFF2 3510             (       ddos12.asm):03385                 PULS    X                       ; restore FCB pointer
CFF4 E6E4             (       ddos12.asm):03386                 LDB     ,S                      ; get more extents flag
CFF6 2713             (       ddos12.asm):03387                 BEQ     LD00B                   ; exit if no more extents
                      (       ddos12.asm):03388                 
CFF8 3262             (       ddos12.asm):03389                 LEAS    2,S                     ; drop counter and flags
CFFA 3410             (       ddos12.asm):03390                 PSHS    X                       ; save FCB pointer
CFFC BDD208           (       ddos12.asm):03391                 JSR     >DOSGetDirEntry2        ; get next directory block      
CFFF 1F13             (       ddos12.asm):03392                 TFR     X,U                     ; put pointer to dir block in U
D001 3510             (       ddos12.asm):03393                 PULS    X                       ; restore FCB pointer
D003 26B0             (       ddos12.asm):03394                 BNE     LCFB5                   ; branch if errors in DOSGetDirEntry2
                      (       ddos12.asm):03395                 
D005 3141             (       ddos12.asm):03396                 LEAY    DirEntCntBlock1,U       ; point to first allocation in continuation block
D007 C607             (       ddos12.asm):03397                 LDB     #DirEntCntExts          ; initilize number of allocations count
D009 20C2             (       ddos12.asm):03398                 BRA     LCFCD                   ; go delete them
                      (       ddos12.asm):03399         
D00B 5F               (       ddos12.asm):03400         LD00B   CLRB                            ; flag no error
D00C 0FF6             (       ddos12.asm):03401         LD00C   CLR     <DosIOInProgress        ; flag no dos io in progress
D00E 3262             (       ddos12.asm):03402                 LEAS    2,S                     ; clen up stack
D010 5D               (       ddos12.asm):03403                 TSTB                            ; set CC.C on error
D011 39               (       ddos12.asm):03404                 RTS
                      (       ddos12.asm):03405         ;
                      (       ddos12.asm):03406         ; Delete one extent.
                      (       ddos12.asm):03407         ;
                      (       ddos12.asm):03408         ; Called by DOSDeleteFile (amongst others). Marks one extent's worth of sectors
                      (       ddos12.asm):03409         ; free.
                      (       ddos12.asm):03410         ;
                      (       ddos12.asm):03411         ; Entry:
                      (       ddos12.asm):03412         ;       B       = Number of sectors.
                      (       ddos12.asm):03413         ;       X       = starting LSN.
                      (       ddos12.asm):03414         ;
                      (       ddos12.asm):03415         ; Exit:
                      (       ddos12.asm):03416         ;       B       = Error code.
                      (       ddos12.asm):03417         ;
                      (       ddos12.asm):03418         ;
                      (       ddos12.asm):03419         ; stack frame
                      (       ddos12.asm):03420         ;       4,s     0
                      (       ddos12.asm):03421         ;       2,s     LSN to delete
                      (       ddos12.asm):03422         ;       0,s     Sector count
                      (       ddos12.asm):03423         ;
                      (       ddos12.asm):03424         
D012                  (       ddos12.asm):03425         DeleteExtent   
D012 4F               (       ddos12.asm):03426                 CLRA                            ; clear A, makes D=sector count
D013 3402             (       ddos12.asm):03427                 PSHS    A                       ; save A
D015 3416             (       ddos12.asm):03428                 PSHS    D,X                     ; save sector count and LSN
                      (       ddos12.asm):03429                 
D017 BDD17D           (       ddos12.asm):03430                 JSR     >DosGetDiskGeometry     ; get the geometry of the disk
D01A 267E             (       ddos12.asm):03431                 BNE     DeleteExtentExit        ; error, exit
                      (       ddos12.asm):03432                 
D01C 10AE84           (       ddos12.asm):03433                 LDY     DrvDetDirLSN,X          ; get LSN of directory  
D01F EC62             (       ddos12.asm):03434                 LDD     2,S                     ; get LSN of extent to delete
D021 8305A0           (       ddos12.asm):03435                 SUBD    #BAMLSNPerSec           ; subtract BAM entries in first BAM sector
D024 250B             (       ddos12.asm):03436                 BCS     LD031                   ; branch if in first sector (-ve result)
                      (       ddos12.asm):03437                 
                      (       ddos12.asm):03438                 ifdef   PGSFix
                      (       ddos12.asm):03439                 LEAY    1,Y                     ; move to next BAM sector
                      (       ddos12.asm):03440                 else
D026 313F             (       ddos12.asm):03441                 LEAY    -1,Y                    ; error......should be +1,Y
                      (       ddos12.asm):03442                 endc
                      (       ddos12.asm):03443                 
D028 ED62             (       ddos12.asm):03444                 STD     2,S                     ; save offset within BAM                        
D02A E3E4             (       ddos12.asm):03445                 ADDD    ,S                      ; add sector count
D02C 8305A0           (       ddos12.asm):03446                 SUBD    #BAMLSNPerSec           ; subtract BAM entries in first BAM sector
D02F 2467             (       ddos12.asm):03447                 BCC     LD098                   ; error allocation overflows BAMs 
                      (       ddos12.asm):03448                 
D031 EC62             (       ddos12.asm):03449         LD031   LDD     2,S                     ; get LSN of extent to delete
D033 E3E4             (       ddos12.asm):03450                 ADDD    ,S                      ; add number of sectors to delete
D035 8305A0           (       ddos12.asm):03451                 SUBD    #BAMLSNPerSec           ; subtract BAM entries in first BAM sector
D038 2507             (       ddos12.asm):03452                 BCS     LD041                   ; branch if in first BAM sector
                      (       ddos12.asm):03453                 
D03A E764             (       ddos12.asm):03454                 STB     4,S                     ; calc no of sectors in second BAM
D03C 50               (       ddos12.asm):03455                 NEGB
D03D EB61             (       ddos12.asm):03456                 ADDB    1,S
D03F E761             (       ddos12.asm):03457                 STB     1,S
                      (       ddos12.asm):03458                 
D041 BDD247           (       ddos12.asm):03459         LD041   JSR     >DOSFindAndRead         ; read required BAM sector
D044 2654             (       ddos12.asm):03460                 BNE     DeleteExtentExit        ; error, exit
                      (       ddos12.asm):03461                 
D046 86FF             (       ddos12.asm):03462                 LDA     #BuffDirty              ; mark BAM sector buffer dirty
D048 A702             (       ddos12.asm):03463                 STA     2,X
                      (       ddos12.asm):03464                 
D04A EC62             (       ddos12.asm):03465                 LDD     2,S                     ; get LSN to delete from
D04C 44               (       ddos12.asm):03466                 LSRA                            ; divide LSN by 8, to get the byte needed
D04D 56               (       ddos12.asm):03467                 RORB
D04E 66E4             (       ddos12.asm):03468                 ROR     ,S
D050 44               (       ddos12.asm):03469                 LSRA
D051 56               (       ddos12.asm):03470                 RORB
D052 66E4             (       ddos12.asm):03471                 ROR     ,S
D054 44               (       ddos12.asm):03472                 LSRA
D055 56               (       ddos12.asm):03473                 RORB
D056 66E4             (       ddos12.asm):03474                 ROR     ,S
                      (       ddos12.asm):03475                 
                      (       ddos12.asm):03476         ; this leaves the byte at 0,s with the bottom 3 bits of D in the *TOP* 3 bits
                      (       ddos12.asm):03477         ; so in the loop below we need to decrement by $20 each loop, rather than 1.
                      (       ddos12.asm):03478         ; e.g.
                      (       ddos12.asm):03479         ; D=bbbb bbbb bbbb bbbb  0,S=0000 0000  before shift
                      (       ddos12.asm):03480         ; D=000b bbbb bbbb bbbb  0,S=bbb0 0000  after shift
                      (       ddos12.asm):03481         ;
                      (       ddos12.asm):03482                 
D058 AE05             (       ddos12.asm):03483                 LDX     BuffAddr,X              ; get address of BAM buffer
D05A 3A               (       ddos12.asm):03484                 ABX                             ; add calculated offset
                      (       ddos12.asm):03485                 
D05B C601             (       ddos12.asm):03486                 LDB     #$01                    ; get bitmap 
D05D A6E4             (       ddos12.asm):03487                 LDA     ,S                      ; get bit number
D05F 2705             (       ddos12.asm):03488                 BEQ     LD066                   ; zero, exit loop
                      (       ddos12.asm):03489                 
D061 58               (       ddos12.asm):03490         LD061   ASLB                            ; shift bit number left
D062 8020             (       ddos12.asm):03491                 SUBA    #$20                    ; we take $20, because of shift above   
D064 26FB             (       ddos12.asm):03492                 BNE     LD061                   ; loop if not zero
                      (       ddos12.asm):03493         
D066 E7E4             (       ddos12.asm):03494         LD066   STB     ,S                      ; 0,S now contains starting bit
D068 E661             (       ddos12.asm):03495                 LDB     1,S                     ; get sector count
                      (       ddos12.asm):03496                 
D06A A6E4             (       ddos12.asm):03497         LD06A   LDA     ,S                      ; get bitmask 
D06C AA84             (       ddos12.asm):03498                 ORA     ,X                      ; or it with BAM, deallocate sector
D06E A784             (       ddos12.asm):03499                 STA     ,X                      ; put back in BAM
D070 5A               (       ddos12.asm):03500                 DECB                            ; decrement sector count
D071 2718             (       ddos12.asm):03501                 BEQ     LD08B                   ; branch if no more sectors
                      (       ddos12.asm):03502                 
D073 68E4             (       ddos12.asm):03503                 ASL     ,S                      ; shift mask left
D075 24F3             (       ddos12.asm):03504                 BCC     LD06A                   ; skip if mask not shifted into carry
                      (       ddos12.asm):03505                 
D077 8601             (       ddos12.asm):03506                 LDA     #$01                    ; re-initialize mask
D079 A7E4             (       ddos12.asm):03507                 STA     ,S                      
D07B 3001             (       ddos12.asm):03508                 LEAX    1,X                     ; move to next BAM byte
                      (       ddos12.asm):03509                 
                      (       ddos12.asm):03510         ; check to see if we have more than 16 LSNs left to delete, if so do them quickly
                      (       ddos12.asm):03511         ; by marking groups of 16 sectors free.....
                      (       ddos12.asm):03512                 
D07D C110             (       ddos12.asm):03513         LD07D   CMPB    #$10                    ; more than 16 sectors left to flag?    
D07F 25E9             (       ddos12.asm):03514                 BCS     LD06A                   ; no, continue doing a sector at a time
                      (       ddos12.asm):03515                 
D081 86FF             (       ddos12.asm):03516                 LDA     #$FF                    ; mark a group of 8 sectors at once
D083 A780             (       ddos12.asm):03517                 STA     ,X+                     ; mark next 8
D085 A780             (       ddos12.asm):03518                 STA     ,X+                     ; and next 8
D087 C010             (       ddos12.asm):03519                 SUBB    #$10                    ; decrement sector count by 16
D089 26F2             (       ddos12.asm):03520                 BNE     LD07D                   ; loop again
                      (       ddos12.asm):03521                 
D08B 8E05A0           (       ddos12.asm):03522         LD08B   LDX     #BAMLSNPerSec           ; get BAM entries / sec
D08E 3264             (       ddos12.asm):03523                 LEAS    4,S                     ; clean up stack        
D090 E6E0             (       ddos12.asm):03524                 LDB     ,S+                     ; get count
D092 2601             (       ddos12.asm):03525                 BNE     GoDeleteExtent          ; loop again if not zero
D094 39               (       ddos12.asm):03526                 RTS
                      (       ddos12.asm):03527         
D095                  (       ddos12.asm):03528         GoDeleteExtent   
D095 16FF7A           (       ddos12.asm):03529                 LBRA    DeleteExtent
                      (       ddos12.asm):03530         
D098 C690             (       ddos12.asm):03531         LD098   LDB     #ErrIV                  ; Error invalid volume
D09A                  (       ddos12.asm):03532         DeleteExtentExit   
D09A 3265             (       ddos12.asm):03533                 LEAS    5,S                     ; clean up stack
D09C 39               (       ddos12.asm):03534         LD09C   RTS                     
                      (       ddos12.asm):03535         
                      (       ddos12.asm):03536         ;
                      (       ddos12.asm):03537         ; Set protection status.
                      (       ddos12.asm):03538         ;
                      (       ddos12.asm):03539         ; Entry:
                      (       ddos12.asm):03540         ;       A       = file number
                      (       ddos12.asm):03541         ;       B       = 1 protect, 0 unprotect
                      (       ddos12.asm):03542         ;
                      (       ddos12.asm):03543         ; Exit:
                      (       ddos12.asm):03544         ;       B       = error code
                      (       ddos12.asm):03545         ; 
                      (       ddos12.asm):03546         
D09D                  (       ddos12.asm):03547         DOSProtectMC
D09D 97F1             (       ddos12.asm):03548         LD09D   STA     <DosCurrCtrlBlk         ; set current file number
D09F BDCEAC           (       ddos12.asm):03549                 JSR     >DosFCBNoToAddr         ; get it's FCB address
                      (       ddos12.asm):03550                 
D0A2 A60F             (       ddos12.asm):03551                 LDA     FCBDirFlags,X           ; get flags from dir entry
D0A4 2B26             (       ddos12.asm):03552                 BMI     LD0CC                   ; error.....
                      (       ddos12.asm):03553                 
D0A6 5D               (       ddos12.asm):03554                 TSTB                            ; shoud we protect / unprotect?
D0A7 2703             (       ddos12.asm):03555                 BEQ     LD0AC                   ; branch if unprotect
                      (       ddos12.asm):03556                 
D0A9 8A02             (       ddos12.asm):03557                 ORA     #AttrWriteProt          ; set protection bit
                      (       ddos12.asm):03558         
D0AB 8C               (       ddos12.asm):03559                 FCB     Skip2                   ; skip 2 bytes
D0AC 84FD             (       ddos12.asm):03560         LD0AC   ANDA    #~AttrWriteProt         ; reset protection bit
D0AE A70F             (       ddos12.asm):03561                 STA     FCBDirFlags,X           ; put back in dir entry
                      (       ddos12.asm):03562                 
D0B0 E6881D           (       ddos12.asm):03563                 LDB     FCBDiskFileNo,X         ; get file number on disk
D0B3 BDD208           (       ddos12.asm):03564                 JSR     >DOSGetDirEntry2        ; go get it's dir enetry
D0B6 26E4             (       ddos12.asm):03565                 BNE     LD09C                   ; error, return
                      (       ddos12.asm):03566                 
D0B8 A784             (       ddos12.asm):03567                 STA     DirEntAttr,X            ; put it in dir attributes.
D0BA 5F               (       ddos12.asm):03568                 CLRB                            ; flag no error
D0BB 39               (       ddos12.asm):03569         LD0BB   RTS
                      (       ddos12.asm):03570         
D0BC                  (       ddos12.asm):03571         DosCheckProtect   
D0BC 97F1             (       ddos12.asm):03572                 STA     <DosCurrCtrlBlk         ; set current file number
D0BE BDCEAC           (       ddos12.asm):03573                 JSR     >DosFCBNoToAddr         ; get it's FCB address
                      (       ddos12.asm):03574                 
D0C1 A60F             (       ddos12.asm):03575                 LDA     FCBDirFlags,X           ; get flags from dir entry
D0C3 2B07             (       ddos12.asm):03576                 BMI     LD0CC
                      (       ddos12.asm):03577                 
D0C5 8502             (       ddos12.asm):03578                 BITA    #AttrWriteProt          ; check write protect attribute
D0C7 27F2             (       ddos12.asm):03579                 BEQ     LD0BB                   ; not protected....
D0C9 C698             (       ddos12.asm):03580                 LDB     #ErrPT                  ; protection error
D0CB 39               (       ddos12.asm):03581                 RTS
                      (       ddos12.asm):03582         
D0CC C69C             (       ddos12.asm):03583         LD0CC   LDB     #ErrFF                  ; return file not found
D0CE 39               (       ddos12.asm):03584         LD0CE   RTS
                      (       ddos12.asm):03585         
                      (       ddos12.asm):03586         ;
                      (       ddos12.asm):03587         ; Rename a file.
                      (       ddos12.asm):03588         ;
                      (       ddos12.asm):03589         ; Entry:
                      (       ddos12.asm):03590         ;       DosCurFilename  = newname
                      (       ddos12.asm):03591         ;       A               = fileid
                      (       ddos12.asm):03592         ;
                      (       ddos12.asm):03593         ; Exit:
                      (       ddos12.asm):03594         ;       B               = Error code
                      (       ddos12.asm):03595         ;
                      (       ddos12.asm):03596         
     000B             (       ddos12.asm):03597         FNLength        EQU     8+3             ; filename length
                      (       ddos12.asm):03598         
D0CF                  (       ddos12.asm):03599         DOSRename
D0CF BDD0BC           (       ddos12.asm):03600                 JSR     >DosCheckProtect        ; is the file protected?
D0D2 26FA             (       ddos12.asm):03601                 BNE     LD0CE                   ; yep, (or error) exit
                      (       ddos12.asm):03602                 
                      (       ddos12.asm):03603         ; copy name into FCB    
D0D4 C60B             (       ddos12.asm):03604                 LDB     #FNLength               ; byte count to copy                    
D0D6 CE0650           (       ddos12.asm):03605                 LDU     #DosCurFilename         ; point at new filename
D0D9 A6C0             (       ddos12.asm):03606         LD0D9   LDA     ,U+                     ; get a byte from new name
D0DB A780             (       ddos12.asm):03607                 STA     ,X+                     ; copy into FCB
D0DD 5A               (       ddos12.asm):03608                 DECB                            ; dec count
D0DE 26F9             (       ddos12.asm):03609                 BNE     LD0D9                   ; loop if more to copy
                      (       ddos12.asm):03610                 
D0E0 3015             (       ddos12.asm):03611                 LEAX    -FNLength,X             ; point back at beginning of FCB
D0E2 E6881D           (       ddos12.asm):03612                 LDB     FCBDiskFileNo,X         ; get file number on disk
D0E5 BDD208           (       ddos12.asm):03613                 JSR     >DOSGetDirEntry2        ; go get it's entry
D0E8 26E4             (       ddos12.asm):03614                 BNE     LD0CE                   ; error, exit
                      (       ddos12.asm):03615                 
D0EA CE0650           (       ddos12.asm):03616                 LDU     #DosCurFilename         ; point at new name
D0ED C60B             (       ddos12.asm):03617                 LDB     #FNLength               ; byte count to copy
D0EF 3001             (       ddos12.asm):03618                 LEAX    1,X                     ; move past attribute byte
D0F1 A6C0             (       ddos12.asm):03619         LD0F1   LDA     ,U+                     ; get a byte from new name
D0F3 A780             (       ddos12.asm):03620                 STA     ,X+                     ; save in dir entry
D0F5 5A               (       ddos12.asm):03621                 DECB                            ; decrement count
D0F6 26F9             (       ddos12.asm):03622                 BNE     LD0F1                   ; loop if more
                      (       ddos12.asm):03623                 
D0F8 0FF6             (       ddos12.asm):03624                 CLR     <DosIOInProgress        ; clear IO in progress
D0FA 5F               (       ddos12.asm):03625                 CLRB                            ; flag no error
D0FB 39               (       ddos12.asm):03626         LD0FB   RTS
                      (       ddos12.asm):03627         
                      (       ddos12.asm):03628         ;
                      (       ddos12.asm):03629         ; Find empty directory slot.
                      (       ddos12.asm):03630         ;
                      (       ddos12.asm):03631         ; Entry:
                      (       ddos12.asm):03632         ;       A       = 0, normal
                      (       ddos12.asm):03633         ;               = 1, continuation blocks, can't start in slot 0.
                      (       ddos12.asm):03634         ;
                      (       ddos12.asm):03635         ; Return:
                      (       ddos12.asm):03636         ;       A       = New dir entry number found
                      (       ddos12.asm):03637         ;       X       = Page table for buffer
                      (       ddos12.asm):03638         ;       U       = Entry within buffer
                      (       ddos12.asm):03639         ;       B       = Error code.
                      (       ddos12.asm):03640         ;
                      (       ddos12.asm):03641         ; Note that the buffer is always marked dirty.
                      (       ddos12.asm):03642         ;
                      (       ddos12.asm):03643         
D0FC                  (       ddos12.asm):03644         FindEmptyDir   
D0FC 40               (       ddos12.asm):03645                 NEGA                            ; convert 0/1 to $00/$FF
D0FD B7067E           (       ddos12.asm):03646                 STA     DosTemp2                ; save in temp
D100 BDD17D           (       ddos12.asm):03647                 JSR     >DosGetDiskGeometry     ; get geometry of the disk
D103 26F6             (       ddos12.asm):03648                 BNE     LD0FB                   ; error return
                      (       ddos12.asm):03649                 
D105 AE84             (       ddos12.asm):03650                 LDX     BuffLSN,X               ; Get LSN from details
D107 3410             (       ddos12.asm):03651                 PSHS    X                       ; save on stack
                      (       ddos12.asm):03652                 
D109 3002             (       ddos12.asm):03653                 LEAX    2,X                     ; add 2 to LSN
D10B BF066F           (       ddos12.asm):03654         LD10B   STX     DosCurLSN               ; make current
D10E 1F12             (       ddos12.asm):03655                 TFR     X,Y                     ; save it in Y
D110 BDD247           (       ddos12.asm):03656                 JSR     >DOSFindAndRead         ; find LSN and read into buffer
D113 2635             (       ddos12.asm):03657                 BNE     FindEmptyDirExit        ; error, exit
                      (       ddos12.asm):03658                 
D115 EE05             (       ddos12.asm):03659                 LDU     BuffAddr,X              ; get buffer address
D117 C60A             (       ddos12.asm):03660                 LDB     #DirBlksPerSec          ; 10 dir blocks per sector
D119 7D067E           (       ddos12.asm):03661                 TST     DosTemp2                ; are we looking for filename, or continuation? 
D11C 2A05             (       ddos12.asm):03662                 BPL     LD123                   ; branch if filename
                      (       ddos12.asm):03663                 
D11E 70067E           (       ddos12.asm):03664                 NEG     DosTemp2                ; turn $FF->1
D121 2007             (       ddos12.asm):03665                 BRA     LD12A
                      (       ddos12.asm):03666         
                      (       ddos12.asm):03667         ; if we get here DosTemp = 0, so look at first directory block,
                      (       ddos12.asm):03668         ; however the above neg will turn $FF back to $1, so searches for 
                      (       ddos12.asm):03669         ; continuation blocks always beging at entry 1.
D123 A6C4             (       ddos12.asm):03670         LD123   LDA     DirEntAttr,U            ; get attributes from entry
D125 2B1B             (       ddos12.asm):03671                 BMI     LD142                   ; entry deleted, can be re-used
                      (       ddos12.asm):03672                 
D127 7C067E           (       ddos12.asm):03673                 INC     DosTemp2                ; increment entry counter
D12A 33C819           (       ddos12.asm):03674         LD12A   LEAU    DirEntryLen,U           ; move to next entry in sector
D12D 5A               (       ddos12.asm):03675                 DECB                            ; decrement counter
D12E 26F3             (       ddos12.asm):03676                 BNE     LD123                   ; loop again if more to search
                      (       ddos12.asm):03677                 
D130 BE066F           (       ddos12.asm):03678                 LDX     DosCurLSN               ; move to the next sector in the directory
D133 3001             (       ddos12.asm):03679                 LEAX    1,X
D135 1F10             (       ddos12.asm):03680                 TFR     X,D                     ; transfer LSN to D
D137 A3E4             (       ddos12.asm):03681                 SUBD    ,S                      ; subtract start LSN
D139 C112             (       ddos12.asm):03682                 CMPB    #SectorsPerTrack        ; got to end of dir track?
D13B 25CE             (       ddos12.asm):03683                 BCS     LD10B                   ; no search next sector
                      (       ddos12.asm):03684                 
D13D 3262             (       ddos12.asm):03685                 LEAS    2,S                     ; drop saved LSN
D13F C692             (       ddos12.asm):03686                 LDB     #ErrFD                  ; return full directory error
D141 39               (       ddos12.asm):03687                 RTS
                      (       ddos12.asm):03688         
D142 86FF             (       ddos12.asm):03689         LD142   LDA     #BuffDirty                      
D144 A702             (       ddos12.asm):03690                 STA     BuffFlag,X
D146 B6067E           (       ddos12.asm):03691                 LDA     DosTemp2                ; get dir entry number
D149 5F               (       ddos12.asm):03692                 CLRB                            ; flag no error
D14A                  (       ddos12.asm):03693         FindEmptyDirExit   
D14A 3262             (       ddos12.asm):03694                 LEAS    2,S                     ; clean up stack
D14C 39               (       ddos12.asm):03695                 RTS                             ; return
                      (       ddos12.asm):03696         
                      (       ddos12.asm):03697         ;
                      (       ddos12.asm):03698         ; Get free space on a disk.
                      (       ddos12.asm):03699         ;
                      (       ddos12.asm):03700         ; Entry:
                      (       ddos12.asm):03701         ;       DosDriveNo      = drive to get info for
                      (       ddos12.asm):03702         ;
                      (       ddos12.asm):03703         ; Exit: 
                      (       ddos12.asm):03704         ;       X               = Free sectors
                      (       ddos12.asm):03705         ;       B               = Error code
                      (       ddos12.asm):03706         ;
                      (       ddos12.asm):03707         
D14D                  (       ddos12.asm):03708         DOSGetFree   
D14D 8D2E             (       ddos12.asm):03709                 BSR     DosGetDiskGeometry      ; get the geometry for the disk
D14F 2610             (       ddos12.asm):03710                 BNE     LD161                   ; error, exit
                      (       ddos12.asm):03711                 
D151 10AE84           (       ddos12.asm):03712                 LDY     ,X                      ; get LSN in buffer...LSN of dir track                  
D154 9E8A             (       ddos12.asm):03713                 LDX     <DBZero                 ; X=0, initialize free block count
D156 8D0A             (       ddos12.asm):03714                 BSR     LD162                   ; get free sectors in first BAM sector
D158 2607             (       ddos12.asm):03715                 BNE     LD161                   ; error, exit
                      (       ddos12.asm):03716                 
D15A 3121             (       ddos12.asm):03717                 LEAY    1,Y                     ; move to next BAM sector
D15C 8D04             (       ddos12.asm):03718                 BSR     LD162                   ; get free sectors in second BAM sector
D15E 2601             (       ddos12.asm):03719                 BNE     LD161                   ; error, exit
D160 5F               (       ddos12.asm):03720                 CLRB                            ; flag no errors
D161 39               (       ddos12.asm):03721         LD161   RTS
                      (       ddos12.asm):03722         
                      (       ddos12.asm):03723         ; count bits in 1 BAM sector
D162 3410             (       ddos12.asm):03724         LD162   PSHS    X                       ; save X
D164 BDD247           (       ddos12.asm):03725                 JSR     >DOSFindAndRead         ; read LSN in Y
D167 26E1             (       ddos12.asm):03726                 BNE     FindEmptyDirExit        ; error, exit
                      (       ddos12.asm):03727                 
D169 EE05             (       ddos12.asm):03728                 LDU     BuffAddr,X              ; get pointer to loaded sector
D16B 3510             (       ddos12.asm):03729                 PULS    X                       ; restore X
                      (       ddos12.asm):03730                 
D16D C6B4             (       ddos12.asm):03731                 LDB     #BAMEntriesSec          ; count of bytes to process
D16F A6C0             (       ddos12.asm):03732         LD16F   LDA     ,U+                     ; get a byte from buffer
D171 44               (       ddos12.asm):03733         LD171   LSRA                            ; shift bit 0 into carry
D172 2402             (       ddos12.asm):03734                 BCC     LD176                   ; branch if bit clear, sector in use
                      (       ddos12.asm):03735                 
D174 3001             (       ddos12.asm):03736                 LEAX    1,X                     ; otherwise increment sector count
D176 4D               (       ddos12.asm):03737         LD176   TSTA                            ; all bits processed?
D177 26F8             (       ddos12.asm):03738                 BNE     LD171                   ; nope, shift and test again
                      (       ddos12.asm):03739                 
D179 5A               (       ddos12.asm):03740                 DECB                            ; decrement byte count
D17A 26F3             (       ddos12.asm):03741                 BNE     LD16F                   ; loop again if not all done
D17C 39               (       ddos12.asm):03742                 RTS
                      (       ddos12.asm):03743                 
                      (       ddos12.asm):03744         ;
                      (       ddos12.asm):03745         ; Get geometry for a disk and set the apropreate low memory vars.
                      (       ddos12.asm):03746         ; Read from disk if in memory copy not valid.
                      (       ddos12.asm):03747         ;
                      (       ddos12.asm):03748         ; Entry: 
                      (       ddos12.asm):03749         ;       DosDriveNo      = drive to get info for
                      (       ddos12.asm):03750         ;
                      (       ddos12.asm):03751         ; Exit: 
                      (       ddos12.asm):03752         ;       Drive vars setup in low ram, to be same as disk in drive.
                      (       ddos12.asm):03753         ;       X               = Address of buffer detail entry for buffer to use
                      (       ddos12.asm):03754         ;
                      (       ddos12.asm):03755         
D17D                  (       ddos12.asm):03756         DosGetDiskGeometry
D17D 8E061C           (       ddos12.asm):03757                 LDX     #Drv0Details            ; Point at drive details
D180 CE0696           (       ddos12.asm):03758                 LDU     #DosD0Online-1          ; Point at drive online table
D183 C606             (       ddos12.asm):03759                 LDB     #DrvDeatailLen          ; Get drive table entry len
D185 96EB             (       ddos12.asm):03760                 LDA     <DosDriveNo             ; Get last used drive
                      (       ddos12.asm):03761         
D187 33C6             (       ddos12.asm):03762                 LEAU    A,U                     ; Point U at drive online flag
D189 4A               (       ddos12.asm):03763                 DECA                            ; Make zero based
D18A 3D               (       ddos12.asm):03764                 MUL                             ; Calculate offset of drive we need
D18B 308B             (       ddos12.asm):03765                 LEAX    D,X
D18D 6DC4             (       ddos12.asm):03766                 TST     ,U                      ; Is drive online ?
                      (       ddos12.asm):03767         
D18F 263E             (       ddos12.asm):03768                 BNE     LD1CF                   ; Yes : exit
                      (       ddos12.asm):03769                 
D191 108E0168         (       ddos12.asm):03770                 LDY     #SectorsPerTrack*DirPrimary     ; First sector of DIR track ($0168)
D195 8612             (       ddos12.asm):03771                 LDA     #SectorsPerTrack        ; Set sectors per track for this drive
D197 A7C810           (       ddos12.asm):03772                 STA     DosSecTrkTblOfs,U       ; Set it
                      (       ddos12.asm):03773         
D19A 3410             (       ddos12.asm):03774                 PSHS    X                       ; Save drive detail pointer
D19C BDD247           (       ddos12.asm):03775                 JSR     >DOSFindAndRead         ; Find free buffer and read sector
D19F 1026F9B3         (       ddos12.asm):03776                 LBNE    LCB56                   ; Error : exit
                      (       ddos12.asm):03777         
                      (       ddos12.asm):03778         ; At this point X points to buffer details ???
                      (       ddos12.asm):03779                 
D1A3 AE05             (       ddos12.asm):03780                 LDX     BuffAddr,X              ; Get address of buffer data
D1A5 EC8900FE         (       ddos12.asm):03781                 LDD     DirTracks1s,X           ; Get complements of tracks/secs per track
D1A9 43               (       ddos12.asm):03782                 COMA                            ; Complemetn them for compare
D1AA 53               (       ddos12.asm):03783                 COMB
D1AB 10A38900FC       (       ddos12.asm):03784                 CMPD    DirTracks,X             ; compare them to validate the disk
D1B0 3510             (       ddos12.asm):03785                 PULS    X                       ; restore drive detail pointer
D1B2 261D             (       ddos12.asm):03786                 BNE     LD1D1                   ; Not the same, not valid disk.
                      (       ddos12.asm):03787                 
D1B4 E7C810           (       ddos12.asm):03788                 STB     DosSecTrkTblOfs,U       ; Set Sectors/Track for this disk
D1B7 A74C             (       ddos12.asm):03789                 STA     DosTracksTblOfs,U       ; Set tracks for this disk
D1B9 6AC4             (       ddos12.asm):03790                 DEC     ,U                      ; Mark drive online
D1BB C112             (       ddos12.asm):03791                 CMPB    #SectorsPerTrack        ; Disk single sided ?
D1BD 2701             (       ddos12.asm):03792                 BEQ     LD1C0                   ; yes : skip on
                      (       ddos12.asm):03793         
D1BF 5F               (       ddos12.asm):03794                 CLRB                            ; zero it
D1C0 3404             (       ddos12.asm):03795         LD1C0   PSHS    B                       ; save it
D1C2 6F02             (       ddos12.asm):03796                 CLR     BuffFlag,X              ; Clear buffer flag
D1C4 CC0168           (       ddos12.asm):03797                 LDD     #SectorsPerTrack*DirPrimary     ; First sector of DIR track ($0168)
D1C7 6DE0             (       ddos12.asm):03798                 TST     ,S+                     ; Do we need to double ? 
D1C9 2602             (       ddos12.asm):03799                 BNE     LD1CD                   ; no : skip
                      (       ddos12.asm):03800                 
D1CB 58               (       ddos12.asm):03801                 ASLB                            ; Multiply D by 2, as we have 2 sides
D1CC 49               (       ddos12.asm):03802                 ROLA
D1CD ED84             (       ddos12.asm):03803         LD1CD   STD     ,X                      ; save it
D1CF 5F               (       ddos12.asm):03804         LD1CF   CLRB                            ; No error
D1D0 39               (       ddos12.asm):03805                 RTS                             ; Return
                      (       ddos12.asm):03806         
D1D1 C690             (       ddos12.asm):03807         LD1D1   LDB     #ErrIV          ; Flag error, invalid Volume
D1D3 39               (       ddos12.asm):03808         LD1D3   RTS
                      (       ddos12.asm):03809         
                      (       ddos12.asm):03810         ;
                      (       ddos12.asm):03811         ; Get directory entry.
                      (       ddos12.asm):03812         ;
                      (       ddos12.asm):03813         ; Entry: 
                      (       ddos12.asm):03814         ;       DosDriveNo      = drive to process
                      (       ddos12.asm):03815         ;       B               = File number(on disk) to get entry for
                      (       ddos12.asm):03816         ;
                      (       ddos12.asm):03817         ; Exit: 
                      (       ddos12.asm):03818         ;       X               = Pointer to required Dir entry.
                      (       ddos12.asm):03819         ;       DosCurLSN       = LSN of directory entry.
                      (       ddos12.asm):03820         ;       DosCurDirBuff   = buffer pointer to LSN buffer
                      (       ddos12.asm):03821         ;       B               = error code
                      (       ddos12.asm):03822         ;
                      (       ddos12.asm):03823         
D1D4                  (       ddos12.asm):03824         DOSGetDirEntry   
D1D4 86FF             (       ddos12.asm):03825                 LDA     #$FF                    ; Init sector counter
D1D6 4C               (       ddos12.asm):03826         LD1D6   INCA                            ; increment sector counter
D1D7 C00A             (       ddos12.asm):03827                 SUBB    #DirEntPerSec           ; Decrement file no, by a sectors worth of files
D1D9 2CFB             (       ddos12.asm):03828                 BGE     LD1D6                   ; Done all ? no : continue looping
                      (       ddos12.asm):03829                 
D1DB CB0A             (       ddos12.asm):03830                 ADDB    #DirEntPerSec           ; Compensate for over loop
                      (       ddos12.asm):03831                 
                      (       ddos12.asm):03832         ; At this point A contains the sector number within the directory that we are intereted in.
                      (       ddos12.asm):03833         ; and B contains the entry within that sector of the file's details.
                      (       ddos12.asm):03834         
D1DD 3406             (       ddos12.asm):03835                 PSHS    D                       ; Save them
D1DF 8D9C             (       ddos12.asm):03836                 BSR     DosGetDiskGeometry      ; Setup disk geometry from disk in drive
D1E1 1026F971         (       ddos12.asm):03837                 LBNE    LCB56                   ; Error : exit
                      (       ddos12.asm):03838                 
D1E5 EC84             (       ddos12.asm):03839                 LDD     ,X                      ; Get LSN number from buffer
D1E7 C30002           (       ddos12.asm):03840                 ADDD    #$0002                  ; Advance past bitmap sectors
D1EA EBE0             (       ddos12.asm):03841                 ADDB    ,S+                     ; Add sector offset calculated above
D1EC 8900             (       ddos12.asm):03842                 ADCA    #$00                    ; Deal with carry
D1EE FD066F           (       ddos12.asm):03843                 STD     DosCurLSN               ; Save LSN
D1F1 1F02             (       ddos12.asm):03844                 TFR     D,Y                     ; Get LSN into Y
D1F3 BDD247           (       ddos12.asm):03845                 JSR     DOSFindAndRead          ; Find free buffer and read sector
                      (       ddos12.asm):03846         ;***    BSR     DOSFindAndRead          ; Find free buffer and read sector
D1F6 3502             (       ddos12.asm):03847                 PULS    A                       ; Retrieve entry number witin sector
                      (       ddos12.asm):03848         
D1F8 26D9             (       ddos12.asm):03849                 BNE     LD1D3                   ; Error: exit
D1FA 1F13             (       ddos12.asm):03850                 TFR     X,U
D1FC C619             (       ddos12.asm):03851                 LDB     #DirEntryLen            ; Length of dir entry
D1FE 3D               (       ddos12.asm):03852                 MUL                             ; Calculate offset
D1FF BF067F           (       ddos12.asm):03853                 STX     DosCurDirBuff           ; Saave block def pointer
D202 AE05             (       ddos12.asm):03854                 LDX     BuffAddr,X              ; Get pointer to block data
D204 308B             (       ddos12.asm):03855                 LEAX    D,X                     ; Get offset of DIR entry into X
D206 5F               (       ddos12.asm):03856                 CLRB                            ; Flag no error
D207 39               (       ddos12.asm):03857                 RTS
                      (       ddos12.asm):03858         
                      (       ddos12.asm):03859         ;
                      (       ddos12.asm):03860         ; Get directory entry
                      (       ddos12.asm):03861         ;
                      (       ddos12.asm):03862         ; Entry:
                      (       ddos12.asm):03863         ;       B       = directory entry number
                      (       ddos12.asm):03864         ;
                      (       ddos12.asm):03865         ; Exit:
                      (       ddos12.asm):03866         ;       X       = directory entry pointer
                      (       ddos12.asm):03867         ;       Y       = buffer table pointer
                      (       ddos12.asm):03868         ;       D       = preserved
                      (       ddos12.asm):03869         ;
                      (       ddos12.asm):03870         
D208                  (       ddos12.asm):03871         DOSGetDirEntry2   
D208 3406             (       ddos12.asm):03872                 PSHS    D
D20A 8DC8             (       ddos12.asm):03873                 BSR     DOSGetDirEntry          ; Get directory entry we are interested in
D20C 1026F946         (       ddos12.asm):03874                 LBNE    LCB56                   ; Error :
D210 10BE067F         (       ddos12.asm):03875                 LDY     DosCurDirBuff           ; Get Buffer def block for this entry
D214 86FE             (       ddos12.asm):03876                 LDA     #BuffDirtyExpire        ; Set flag
D216 A722             (       ddos12.asm):03877                 STA     BuffFlag,Y
D218 5F               (       ddos12.asm):03878                 CLRB                            ; Flag no error
D219 3586             (       ddos12.asm):03879                 PULS    D,PC                    ; Restore and return
                      (       ddos12.asm):03880         
                      (       ddos12.asm):03881         ;
                      (       ddos12.asm):03882         ; Find a free disk buffer.
                      (       ddos12.asm):03883         ; Find buffer with same sector
                      (       ddos12.asm):03884         ;
                      (       ddos12.asm):03885         ; Entry: 
                      (       ddos12.asm):03886         ;       Y               = LSN to find
                      (       ddos12.asm):03887         ;       DosDriveNo      = drive to process
                      (       ddos12.asm):03888         ;
                      (       ddos12.asm):03889         ; Exits:
                      (       ddos12.asm):03890         ;       X               = buffer table
                      (       ddos12.asm):03891         ;       U               = pointer to detail entry for free buffer (or 0).
                      (       ddos12.asm):03892         ;       B               = 0 if found $FF if not found
                      (       ddos12.asm):03893         ;
                      (       ddos12.asm):03894         
D21B                  (       ddos12.asm):03895         FindFreeBuffer   
D21B 8E0634           (       ddos12.asm):03896                 LDX     #Buff1Details           ; Point at disk buffer detail table
D21E DE8A             (       ddos12.asm):03897                 LDU     <DBZero                 ; U=0 
D220 C604             (       ddos12.asm):03898                 LDB     #BuffCount              ; 4 Disk buffers
                      (       ddos12.asm):03899         
D222 A602             (       ddos12.asm):03900         LD222   LDA     BuffFlag,X              ; Get buffer flag in A
D224 2717             (       ddos12.asm):03901                 BEQ     LD23D                   ; Zero ?
                      (       ddos12.asm):03902                 
D226 8155             (       ddos12.asm):03903                 CMPA    #BuffInUse              ; Is buffer in use ?
D228 2715             (       ddos12.asm):03904                 BEQ     LD23F                   ; no, skip
                      (       ddos12.asm):03905                 
D22A 10AC84           (       ddos12.asm):03906                 CMPY    BuffLSN,X               ; is LSN the same?
D22D 260A             (       ddos12.asm):03907                 BNE     LD239                   ; no, skip
                      (       ddos12.asm):03908                 
D22F 96EB             (       ddos12.asm):03909                 LDA     <DosDriveNo             ; Get last drive
D231 A103             (       ddos12.asm):03910                 CMPA    BuffDrive,X             ; Is this buffer using the same drive ?
D233 2604             (       ddos12.asm):03911                 BNE     LD239                   ; nope, skip on
D235 8D66             (       ddos12.asm):03912                 BSR     MakeBuffYoungest        ; Make this the youngest buffer
D237 5F               (       ddos12.asm):03913                 CLRB                            ; Flag no error
D238 39               (       ddos12.asm):03914                 RTS
                      (       ddos12.asm):03915         
D239 6D02             (       ddos12.asm):03916         LD239   TST     BuffFlag,X              ; Is buffer free ?
D23B 2602             (       ddos12.asm):03917                 BNE     LD23F                   ; nope, look at next
                      (       ddos12.asm):03918                 
D23D 1F13             (       ddos12.asm):03919         LD23D   TFR     X,U                     ; Select this buffer
D23F 3007             (       ddos12.asm):03920         LD23F   LEAX    BuffDetailSize,X        ; move on to next buffer detail entry
D241 5A               (       ddos12.asm):03921                 DECB                            ; Decrement counter
D242 26DE             (       ddos12.asm):03922                 BNE     LD222                   ; Any more to check ? : yes loop again
                      (       ddos12.asm):03923         
D244 C6FF             (       ddos12.asm):03924                 LDB     #$FF                    ; Flag error
D246 39               (       ddos12.asm):03925         LD246   RTS
                      (       ddos12.asm):03926         
                      (       ddos12.asm):03927         ;
                      (       ddos12.asm):03928         ; Find a free buffer and read sector.
                      (       ddos12.asm):03929         ;
                      (       ddos12.asm):03930         ; Entry: 
                      (       ddos12.asm):03931         ;       Y               = LSN to read
                      (       ddos12.asm):03932         ;       DosDriveNo      = drive to process
                      (       ddos12.asm):03933         ; Exit:
                      (       ddos12.asm):03934         ;       X               = pointer to buffer entry 
                      (       ddos12.asm):03935         ;       U               = preserved
                      (       ddos12.asm):03936         ;       B               = error code 
                      (       ddos12.asm):03937         ;
                      (       ddos12.asm):03938         ; A buffer is allocated from the 4 buffer pool in the following order of
                      (       ddos12.asm):03939         ; preference:
                      (       ddos12.asm):03940         ;       1, Sector already in buffer
                      (       ddos12.asm):03941         ;       2, An empty buffer
                      (       ddos12.asm):03942         ;       3, Least recently used buffer, flushed first.
                      (       ddos12.asm):03943         ;
                      (       ddos12.asm):03944         
D247                  (       ddos12.asm):03945         DOSFindAndRead   
D247 3440             (       ddos12.asm):03946                 PSHS    U                       ; save U
D249 BDD21B           (       ddos12.asm):03947                 JSR     >FindFreeBuffer         ; Find free buffer, pointer to details returned in U
D24C 1027F906         (       ddos12.asm):03948                 LBEQ    LCB56                   ; error, exit
                      (       ddos12.asm):03949                 
D250 30C4             (       ddos12.asm):03950                 LEAX    ,U                      ; Make X point to details
D252 3540             (       ddos12.asm):03951                 PULS    U
D254 2604             (       ddos12.asm):03952                 BNE     LD25A
                      (       ddos12.asm):03953                 
D256 8D1C             (       ddos12.asm):03954                 BSR     FindFreeDiskBuffer      ; Find buffer to read data into
D258 26EC             (       ddos12.asm):03955                 BNE     LD246
                      (       ddos12.asm):03956                 
D25A 6F02             (       ddos12.asm):03957         LD25A   CLR     BuffFlag,X              ; Make buffer free
D25C 10AF84           (       ddos12.asm):03958                 STY     ,X
D25F 96EB             (       ddos12.asm):03959                 LDA     <DosDriveNo             ; Get last drive
D261 A703             (       ddos12.asm):03960                 STA     BuffDrive,X             ; Set this drive's buffer
D263 3410             (       ddos12.asm):03961                 PSHS    X                       ; Save buffer detail pointer
D265 AE05             (       ddos12.asm):03962                 LDX     BuffAddr,X              ; Get address of buffer
D267 BDD30A           (       ddos12.asm):03963                 JSR     >DOSReadAbsSector       ; Read the sector
D26A 3510             (       ddos12.asm):03964                 PULS    X                       ; Restore buff detail pointer
D26C 26D8             (       ddos12.asm):03965                 BNE     LD246                   ; Error : exit
                      (       ddos12.asm):03966                 
D26E 8601             (       ddos12.asm):03967                 LDA     #$01                    ; Set flag to 1
D270 A702             (       ddos12.asm):03968                 STA     BuffFlag,X
D272 5F               (       ddos12.asm):03969                 CLRB                            ; No error
D273 39               (       ddos12.asm):03970                 RTS
                      (       ddos12.asm):03971         
                      (       ddos12.asm):03972         ;
                      (       ddos12.asm):03973         ; Find least recently used disk buffer, if none, and there is 
                      (       ddos12.asm):03974         ; a dirty buffer, then flush it and use that one.
                      (       ddos12.asm):03975         ;
                      (       ddos12.asm):03976         ; Exit : X=pointer to buffer info block.
                      (       ddos12.asm):03977         ;
                      (       ddos12.asm):03978         
D274                  (       ddos12.asm):03979         FindFreeDiskBuffer   
D274 3466             (       ddos12.asm):03980                 PSHS    D,Y,U
D276 8E0634           (       ddos12.asm):03981         LD276   LDX     #Buff1Details           ; Point to disk buffer table
D279 C604             (       ddos12.asm):03982                 LDB     #$04                    ; Check 4 buffers
D27B A604             (       ddos12.asm):03983         LD27B   LDA     BuffAge,X               ; Get buffer age
D27D 8101             (       ddos12.asm):03984                 CMPA    #$01                    ; Oldest ?
D27F 2705             (       ddos12.asm):03985                 BEQ     LD286                   ; Yes go process it
                      (       ddos12.asm):03986                 
D281 3007             (       ddos12.asm):03987                 LEAX    7,X                     ; Do next bufffer
D283 5A               (       ddos12.asm):03988                 DECB                            ; Decrement buffer count
D284 26F5             (       ddos12.asm):03989                 BNE     LD27B                   ; More : do next
                      (       ddos12.asm):03990         
D286 8D15             (       ddos12.asm):03991         LD286   BSR     MakeBuffYoungest        ; Adjust ages of all other buffers
D288 A602             (       ddos12.asm):03992                 LDA     BuffFlag,X              ; Get buffer flag byte 
D28A 8155             (       ddos12.asm):03993                 CMPA    #$55                    ; In use ???
D28C 27E8             (       ddos12.asm):03994                 BEQ     LD276                   ; yes, select another buffer
                      (       ddos12.asm):03995                 
D28E 4C               (       ddos12.asm):03996                 INCA                            ; Check for Flag=$FF
D28F 2604             (       ddos12.asm):03997                 BNE     LD295                   ; no : skip on
                      (       ddos12.asm):03998                 
D291 6A02             (       ddos12.asm):03999                 DEC     BuffFlag,X              ; yes, select another buffer
D293 20E1             (       ddos12.asm):04000                 BRA     LD276
                      (       ddos12.asm):04001         
D295 8D1D             (       ddos12.asm):04002         LD295   BSR     TestAndFlushBuffer      ; Check for buffer flush needed ?
                      (       ddos12.asm):04003                 
                      (       ddos12.asm):04004                 ifdef   PGSFix
                      (       ddos12.asm):04005                 BEQ     LD29C                   ; no error, skip
                      (       ddos12.asm):04006                 STB     1,s                     ; save error code on stack for return
                      (       ddos12.asm):04007                 else
D297 1026F754         (       ddos12.asm):04008                 LBNE    DosFReadErrorExit               ; No error: skip
                      (       ddos12.asm):04009                 endc
                      (       ddos12.asm):04010                 
D29B 35E6             (       ddos12.asm):04011                 PULS    D,Y,U,PC                ; restore and return
                      (       ddos12.asm):04012         
                      (       ddos12.asm):04013         ;
                      (       ddos12.asm):04014         ; Update the LRU counts of buffers.
                      (       ddos12.asm):04015         ;
                      (       ddos12.asm):04016         ; Entry:
                      (       ddos12.asm):04017         ;       X       = page table entry
                      (       ddos12.asm):04018         ;
                      (       ddos12.asm):04019         ; Exits:
                      (       ddos12.asm):04020         ;       Entry becomes most recently used.
                      (       ddos12.asm):04021         ;
                      (       ddos12.asm):04022         
D29D                  (       ddos12.asm):04023         MakeBuffYoungest   
D29D C604             (       ddos12.asm):04024                 LDB     #BuffCount              ; Process 4 buffers
D29F                  (       ddos12.asm):04025         LD29C   
D29F A604             (       ddos12.asm):04026                 LDA     BuffAge,X               ; Get current buffer Age
D2A1 CE0634           (       ddos12.asm):04027                 LDU     #Buff1Details           ; Point to disk buffer table
D2A4 A144             (       ddos12.asm):04028         LD2A4   CMPA    BuffAge,U               ; Compare to current buffer age
D2A6 2202             (       ddos12.asm):04029                 BHI     LD2AA                   ; higher ? skip
D2A8 6A44             (       ddos12.asm):04030                 DEC     BuffAge,U               ; Decrement Age byte (make older)
                      (       ddos12.asm):04031                 
D2AA 3347             (       ddos12.asm):04032         LD2AA   LEAU    BuffDetailSize,U        ; Do next buffer
D2AC 5A               (       ddos12.asm):04033                 DECB                            ; Decrement count
D2AD 26F5             (       ddos12.asm):04034                 BNE     LD2A4                   ; More : do next
D2AF 8604             (       ddos12.asm):04035                 LDA     #$04                    ; Mark this as youngest buffer
D2B1 A704             (       ddos12.asm):04036                 STA     BuffAge,X
D2B3 39               (       ddos12.asm):04037                 RTS
                      (       ddos12.asm):04038         
                      (       ddos12.asm):04039         ;
                      (       ddos12.asm):04040         ; Clean up a buffer.
                      (       ddos12.asm):04041         ;
                      (       ddos12.asm):04042         ; If buffer is dirty, flush it to disk, and if verify is on, or 
                      (       ddos12.asm):04043         ; write is to directory tracks, then verify it.
                      (       ddos12.asm):04044         ;
                      (       ddos12.asm):04045         ; Maintain a list of directory sectors which need updating.
                      (       ddos12.asm):04046         ;
                      (       ddos12.asm):04047         ; Entry:
                      (       ddos12.asm):04048         ;       X       = buffer table
                      (       ddos12.asm):04049         ;
                      (       ddos12.asm):04050         ; Exit:
                      (       ddos12.asm):04051         ;       X       = preserved
                      (       ddos12.asm):04052         ;       B       = error code
                      (       ddos12.asm):04053         ;
                      (       ddos12.asm):04054         
D2B4                  (       ddos12.asm):04055         TestAndFlushBuffer   
D2B4 6D02             (       ddos12.asm):04056                 TST     BuffFlag,X              ; Buffer dirty ?
D2B6 2B02             (       ddos12.asm):04057                 BMI     FlushBuffer             ; Yes, flush it !
D2B8 5F               (       ddos12.asm):04058                 CLRB                            ; No error ?
D2B9 39               (       ddos12.asm):04059                 RTS
                      (       ddos12.asm):04060         
D2BA                  (       ddos12.asm):04061         FlushBuffer
D2BA 96EB             (       ddos12.asm):04062                 LDA     <DosDriveNo             ; Get last drive accessed
D2BC 3402             (       ddos12.asm):04063                 PSHS    A                       ; save it on stack
D2BE 3410             (       ddos12.asm):04064                 PSHS    X                       ; Save buffer pointer
D2C0 86FF             (       ddos12.asm):04065                 LDA     #$FF                    ; Flag Dos IO in progress
D2C2 97F6             (       ddos12.asm):04066                 STA     <DosIOInProgress
D2C4 6F02             (       ddos12.asm):04067                 CLR     BuffFlag,X              ; Flag buffer no longer dirty
D2C6 A603             (       ddos12.asm):04068                 LDA     BuffDrive,X             ; Get drive this buffer refers to
D2C8 97EB             (       ddos12.asm):04069                 STA     <DosDriveNo             ; Save in last accessed drive
D2CA 10AE84           (       ddos12.asm):04070                 LDY     ,X                      ; get LSN ?
D2CD AE05             (       ddos12.asm):04071                 LDX     BuffAddr,X              ; Get buffer pointer
D2CF BDD2FA           (       ddos12.asm):04072                 JSR     >DOSWriteAbsSector      ; Write it
                      (       ddos12.asm):04073         
D2D2 3510             (       ddos12.asm):04074                 PULS    X                       ; Retrieve buffer pointer
D2D4 261C             (       ddos12.asm):04075                 BNE     LD2F2                   ; no error : skip ahead
                      (       ddos12.asm):04076         
D2D6 96EC             (       ddos12.asm):04077                 LDA     <DskTrackNo             ; Get current track no
D2D8 8114             (       ddos12.asm):04078                 CMPA    #DirPrimary             ; track 20 (directory) ?
D2DA 2611             (       ddos12.asm):04079                 BNE     LD2ED                   ; no : skip ahead
                      (       ddos12.asm):04080         
                      (       ddos12.asm):04081         ;
                      (       ddos12.asm):04082         ; I do not have a clue why this code does this, it seems to take a byte from
                      (       ddos12.asm):04083         ; the basic rom do some stuff to it and update the Directory sector status table 
                      (       ddos12.asm):04084         ; with it !
                      (       ddos12.asm):04085         ; 
                      (       ddos12.asm):04086         ; Looking at $A673, the 8 bytes before it are $80,$40,$20,$10,$08,$04,$02,$01
                      (       ddos12.asm):04087         ; This is the 2 colour pixel mask table, but is a convenient table for mapping a bit
                      (       ddos12.asm):04088         ; number to the bit it represents.
                      (       ddos12.asm):04089         ;
                      (       ddos12.asm):04090                 
D2DC CEA673           (       ddos12.asm):04091                 LDU     #PixMaskTable4Col       ; This for some strange reason points U at basic rom !!!        
D2DF 96EB             (       ddos12.asm):04092                 LDA     <DosDriveNo             ; get last drive
D2E1 40               (       ddos12.asm):04093                 NEGA
D2E2 A6C6             (       ddos12.asm):04094                 LDA     A,U
                      (       ddos12.asm):04095         
D2E4 CE06AA           (       ddos12.asm):04096                 LDU     #DosDirSecStatus-1      ; Point to directory status table
D2E7 D6ED             (       ddos12.asm):04097                 LDB     <DskSectorNo            ; get sector number
D2E9 AAC5             (       ddos12.asm):04098                 ORA     B,U                     ; Put a byte in table
D2EB A7C5             (       ddos12.asm):04099                 STA     B,U
                      (       ddos12.asm):04100         
D2ED 8601             (       ddos12.asm):04101         LD2ED   LDA     #$01                    ; Mark bufer as youngest
D2EF A702             (       ddos12.asm):04102                 STA     BuffFlag,X
D2F1 5F               (       ddos12.asm):04103                 CLRB
                      (       ddos12.asm):04104                 
D2F2 3502             (       ddos12.asm):04105         LD2F2   PULS    A
D2F4 97EB             (       ddos12.asm):04106                 STA     <DosDriveNo             ; Restore last drive
D2F6 0FF6             (       ddos12.asm):04107                 CLR     <DosIOInProgress        ; Mark no io in progress
D2F8 5D               (       ddos12.asm):04108                 TSTB
D2F9 39               (       ddos12.asm):04109                 RTS
                      (       ddos12.asm):04110         
                      (       ddos12.asm):04111         ;
                      (       ddos12.asm):04112         ; Write absolute sector.
                      (       ddos12.asm):04113         ;
                      (       ddos12.asm):04114         ; Entry :    
                      (       ddos12.asm):04115         ;       X               = Address to store data
                      (       ddos12.asm):04116         ;       Y               = LSN to read
                      (       ddos12.asm):04117         ;       DosDriveNo      = drive to process
                      (       ddos12.asm):04118         ;
                      (       ddos12.asm):04119         ; Exit:
                      (       ddos12.asm):04120         ;       X               = preserved
                      (       ddos12.asm):04121         ;       B               = error code
                      (       ddos12.asm):04122         ;
                      (       ddos12.asm):04123         
D2FA                  (       ddos12.asm):04124         DOSWriteAbsSector   
D2FA 8D15             (       ddos12.asm):04125                 BSR     CalcTrackFromLSN        ; Setup disk vars in low ram with trackno
D2FC BDC0FE           (       ddos12.asm):04126                 JSR     >DosDoWriteSecN         ; go write the sector
D2FF 9EEE             (       ddos12.asm):04127         LD2FF   LDX     <DiskBuffPtr            ; Restore buffer pointer 
D301 5D               (       ddos12.asm):04128                 TSTB                            ; Test for Error
D302 39               (       ddos12.asm):04129                 RTS                             ; return to caller
                      (       ddos12.asm):04130         
                      (       ddos12.asm):04131         ;
                      (       ddos12.asm):04132         ; Verify absolute sector.
                      (       ddos12.asm):04133         ;
                      (       ddos12.asm):04134         ; Entry and Exit as for Write absolute sector.
                      (       ddos12.asm):04135         ;
                      (       ddos12.asm):04136         
D303                  (       ddos12.asm):04137         DosVerifyAbsSector      
D303 8D0C             (       ddos12.asm):04138                 BSR     CalcTrackFromLSN        ; Setup disk vars in low ram with trackno
D305 BDC15F           (       ddos12.asm):04139                 JSR     >DosDoReadSec2
D308 20F5             (       ddos12.asm):04140                 BRA     LD2FF
                      (       ddos12.asm):04141         ;
                      (       ddos12.asm):04142         ; Read absolute sector.
                      (       ddos12.asm):04143         ;
                      (       ddos12.asm):04144         ; Entry and Exit as for Write absolute sector.
                      (       ddos12.asm):04145         ;
                      (       ddos12.asm):04146         
D30A                  (       ddos12.asm):04147         DOSReadAbsSector   
D30A 8D05             (       ddos12.asm):04148                 BSR     CalcTrackFromLSN        ; Setup disk vars in low ram with trackno
D30C BDC104           (       ddos12.asm):04149                 JSR     >DosDoReadSec           ; Go read data
D30F 20EE             (       ddos12.asm):04150                 BRA     LD2FF                   ; Return to caller
                      (       ddos12.asm):04151         
                      (       ddos12.asm):04152         ;
                      (       ddos12.asm):04153         ; Calculate track from Logical sector number.
                      (       ddos12.asm):04154         ; 
                      (       ddos12.asm):04155         ; Entry: 
                      (       ddos12.asm):04156         ;       X       = Buffer pointer
                      (       ddos12.asm):04157         ;       Y       = LSN to read/write
                      (       ddos12.asm):04158         ;
                      (       ddos12.asm):04159         ; Exit: 
                      (       ddos12.asm):04160         ;       A       = Track
                      (       ddos12.asm):04161         ;       B       = Sector        
                      (       ddos12.asm):04162         ;       Low ram vars DskTrackNo and DskSectorNo also set.
                      (       ddos12.asm):04163         ;
                      (       ddos12.asm):04164         
D311                  (       ddos12.asm):04165         CalcTrackFromLSN   
D311 9FEE             (       ddos12.asm):04166                 STX     <DiskBuffPtr            ; Save in buffer pointer
D313 8E06A6           (       ddos12.asm):04167                 LDX     #DosD0SecTrack-1        ; Point to Sec/Track table
D316 D6EB             (       ddos12.asm):04168                 LDB     <DosDriveNo             ; Get last drive
D318 E685             (       ddos12.asm):04169                 LDB     B,X                     ; Get Sec/Track for that drive
D31A 4F               (       ddos12.asm):04170                 CLRA
D31B 3406             (       ddos12.asm):04171                 PSHS    D                       ; Save it
D31D 6FE2             (       ddos12.asm):04172                 CLR     ,-S                     ; Make room on stack
D31F 1F20             (       ddos12.asm):04173                 TFR     Y,D                     ; Get LSN into D
                      (       ddos12.asm):04174                 
                      (       ddos12.asm):04175         ; Calculate which track we need
                      (       ddos12.asm):04176                 
D321 6CE4             (       ddos12.asm):04177         LD321   INC     ,S                      ; Inc track counter
D323 A361             (       ddos12.asm):04178                 SUBD    1,S                     ; Decrement sec/track from LSN
D325 2AFA             (       ddos12.asm):04179                 BPL     LD321                   ; keep looping till it goes -ve
                      (       ddos12.asm):04180                 
D327 EB62             (       ddos12.asm):04181                 ADDB    2,S                     ; Compensate for over-loop
D329 A6E4             (       ddos12.asm):04182                 LDA     ,S                      ; Get track needed
D32B 4A               (       ddos12.asm):04183                 DECA                            ; Compensate track for over loop
D32C 5C               (       ddos12.asm):04184                 INCB
D32D 3263             (       ddos12.asm):04185                 LEAS    3,S                     ; Drop stack temps
D32F DDEC             (       ddos12.asm):04186                 STD     <DskTrackNo             ; Save track no
D331 39               (       ddos12.asm):04187                 RTS
                      (       ddos12.asm):04188         
                      (       ddos12.asm):04189         ;
                      (       ddos12.asm):04190         ; Copy command dispatch routine
                      (       ddos12.asm):04191         ;
                      (       ddos12.asm):04192         ; Syntax :
                      (       ddos12.asm):04193         ;       COPY filespec TO filespec       
                      (       ddos12.asm):04194         ;
                      (       ddos12.asm):04195         ; Stack setup as follows 
                      (       ddos12.asm):04196         ;
                      (       ddos12.asm):04197         ; offset        size    purpose
                      (       ddos12.asm):04198         ; 0             1       Source FCB number
                      (       ddos12.asm):04199         ; 1             1       Destination FCB number
                      (       ddos12.asm):04200         ; 2             2       Buffer pointer ?
                      (       ddos12.asm):04201         ; 4             3       File pointer pos
                      (       ddos12.asm):04202         ;
                      (       ddos12.asm):04203         
     0000             (       ddos12.asm):04204         CopySrcFCBNo    equ     0               ; Source file FCB no
     0001             (       ddos12.asm):04205         CopyDstFCBNo    equ     1               ; Destination FCB no
     0002             (       ddos12.asm):04206         CopyIOBufPtr    equ     2               ; IO buffer pointer
     0004             (       ddos12.asm):04207         CopySrcFP       equ     4               ; Source filepointer
                      (       ddos12.asm):04208         
D332                  (       ddos12.asm):04209         CmdCopy 
D332 BDCEBB           (       ddos12.asm):04210                 JSR     >DOSCloseAll            ; Close all files & devices
D335 2634             (       ddos12.asm):04211                 BNE     LD36B                   ; Error : exit
D337 3279             (       ddos12.asm):04212                 LEAS    -7,S                    ; Make room on stack
                      (       ddos12.asm):04213                 
                      (       ddos12.asm):04214         ;
                      (       ddos12.asm):04215         ; Make a buffer for copying the file.
                      (       ddos12.asm):04216         ;
                      (       ddos12.asm):04217         
D339 1F40             (       ddos12.asm):04218                 TFR     S,D                     ; move to D
D33B 830100           (       ddos12.asm):04219                 SUBD    #$0100                  ; Make room for 1 sector
D33E 931F             (       ddos12.asm):04220                 SUBD    <BasVarEnd              ; Will we overwrite basic ?             
D340 102BAFFE         (       ddos12.asm):04221                 LBMI    BasOMError              ; yes : error, exit
                      (       ddos12.asm):04222                 
D344 5F               (       ddos12.asm):04223                 CLRB
D345 4D               (       ddos12.asm):04224                 TSTA                            ; At least 1 page of ram available
D346 1027AFF8         (       ddos12.asm):04225                 LBEQ    BasOMError              ; no : error, exit
                      (       ddos12.asm):04226                 
D34A ED62             (       ddos12.asm):04227                 STD     CopyIOBufPtr,S          ; IO buffer pointer
D34C BDD6D4           (       ddos12.asm):04228                 JSR     >DosGetFilenameAndOpen
D34F 261A             (       ddos12.asm):04229                 BNE     LD36B                   ; Error : exit
D351 A7E4             (       ddos12.asm):04230                 STA     CopySrcFCBNo,S          ; save FCB no of source
                      (       ddos12.asm):04231                 
D353 BDCE79           (       ddos12.asm):04232                 JSR     >DOSGetFLen             ; Get file length
D356 2613             (       ddos12.asm):04233                 BNE     LD36B
D358 9DA5             (       ddos12.asm):04234                 JSR     <BasChrGetCurr          ; scan current char from params
                      (       ddos12.asm):04235                 
                      (       ddos12.asm):04236                 ifndef  Tandy
D35A 81BC             (       ddos12.asm):04237                 CMPA    #DTokTO                 ; "TO" token (Dragon)
                      (       ddos12.asm):04238                 else
                      (       ddos12.asm):04239                 CMPA    #CTokTO                 ; "TO" token (CoCo)
                      (       ddos12.asm):04240                 endc
D35C 1026B654         (       ddos12.asm):04241                 LBNE    BasSNError              ; no : Error
                      (       ddos12.asm):04242                 
D360 9D9F             (       ddos12.asm):04243                 JSR     <BasChrGet              ; Get next character
D362 BDD6D4           (       ddos12.asm):04244                 JSR     >DosGetFilenameAndOpen  ; Get dest filename FCB number in A             
D365 2707             (       ddos12.asm):04245                 BEQ     LD36E                   ; No error : continue
                      (       ddos12.asm):04246                 
D367 C1A0             (       ddos12.asm):04247                 CMPB    #ErrNE          ; File not exist ?
D369 2703             (       ddos12.asm):04248                 BEQ     LD36E                   ; does not exit, create it
                      (       ddos12.asm):04249                 
D36B 7EC69E           (       ddos12.asm):04250         LD36B   JMP     >DosHookSysError        ; Error : exit
                      (       ddos12.asm):04251         
D36E A761             (       ddos12.asm):04252         LD36E   STA     CopyDstFCBNo,S          ; Save destination FCB number
D370 BDCF14           (       ddos12.asm):04253                 JSR     >DOSCreateFile          ; re-write destination file
D373 26F6             (       ddos12.asm):04254                 BNE     LD36B                   ; error : exit
                      (       ddos12.asm):04255                 
D375 A6E4             (       ddos12.asm):04256         LD375   LDA     CopySrcFCBNo,S          ; Get source FCB no
D377 97F1             (       ddos12.asm):04257                 STA     <DosCurrCtrlBlk         ; Save current FCB
D379 BDCEAC           (       ddos12.asm):04258                 JSR     >DosFCBNoToAddr         ; Get FCB address
                      (       ddos12.asm):04259                 
                      (       ddos12.asm):04260         ; Compare file pointer position with file length for source file
                      (       ddos12.asm):04261         
D37C EC0C             (       ddos12.asm):04262                 LDD     FCBFilePointer,X        ; MSW
D37E 10A38810         (       ddos12.asm):04263                 CMPD    FCBFileLen,X
D382 2507             (       ddos12.asm):04264                 BCS     LD38B                   ; not there yet, continue copying
                      (       ddos12.asm):04265         
                      (       ddos12.asm):04266         ;***    LDD     FCBFilePointer+2,X      ; LSB
                      (       ddos12.asm):04267         ;***    CMPD    FCBFileLen+2,X
D384 A60E             (       ddos12.asm):04268                 LDA     FCBFilePointer+2,X      ; LSB
D386 A18812           (       ddos12.asm):04269                 CMPA    FCBFileLen+2,X
D389 2750             (       ddos12.asm):04270                 BEQ     LD3DB                   ; reached EOF, copy done
                      (       ddos12.asm):04271         
D38B EE0C             (       ddos12.asm):04272         LD38B   LDU     FCBFilePointer,X        ; get source fileptr in U:A
D38D A60E             (       ddos12.asm):04273                 LDA     FCBFilePointer+2,X
                      (       ddos12.asm):04274                 
D38F A766             (       ddos12.asm):04275                 STA     CopySrcFP+2,S           ; save source filepointer
D391 EF64             (       ddos12.asm):04276                 STU     CopySrcFP,S
                      (       ddos12.asm):04277                 
D393 EC62             (       ddos12.asm):04278                 LDD     CopyIOBufPtr,S          ; point to IO buff
D395 E365             (       ddos12.asm):04279                 ADDD    CopySrcFP+1,S           ; 
D397 ED65             (       ddos12.asm):04280                 STD     CopySrcFP+1,S
D399 2402             (       ddos12.asm):04281                 BCC     LD39D
                      (       ddos12.asm):04282                 
D39B 6C64             (       ddos12.asm):04283                 INC     CopySrcFP,S
D39D A664             (       ddos12.asm):04284         LD39D   LDA     CopySrcFP,S
D39F A08810           (       ddos12.asm):04285                 SUBA    FCBFileLen,X
D3A2 250E             (       ddos12.asm):04286                 BCS     LD3B2
                      (       ddos12.asm):04287                 
D3A4 EC65             (       ddos12.asm):04288                 LDD     CopySrcFP+1,S
D3A6 A38811           (       ddos12.asm):04289                 SUBD    FCBFileLen+1,X
D3A9 2307             (       ddos12.asm):04290                 BLS     LD3B2
                      (       ddos12.asm):04291                 
D3AB EC8811           (       ddos12.asm):04292                 LDD     FCBFileLen+1,X
D3AE A30D             (       ddos12.asm):04293                 SUBD    FCBFilePointer+1,X
D3B0 ED62             (       ddos12.asm):04294                 STD     CopyIOBufPtr,S
                      (       ddos12.asm):04295                 
D3B2 A6E4             (       ddos12.asm):04296         LD3B2   LDA     CopySrcFCBNo,S          ; retrieve source FCB no
D3B4 EE0C             (       ddos12.asm):04297                 LDU     FCBFilePointer,X
D3B6 E60E             (       ddos12.asm):04298                 LDB     FCBFilePointer+2,X
D3B8 10AE62           (       ddos12.asm):04299                 LDY     CopyIOBufPtr,S
D3BB 9E1F             (       ddos12.asm):04300                 LDX     BasVarEnd
D3BD BDC991           (       ddos12.asm):04301                 JSR     >DOSFRead               ; go read source file
D3C0 26A9             (       ddos12.asm):04302                 BNE     LD36B                   ; error : exit
                      (       ddos12.asm):04303                 
D3C2 A661             (       ddos12.asm):04304                 LDA     CopyDstFCBNo,S          ; get destination FCB
D3C4 97F1             (       ddos12.asm):04305                 STA     <DosCurrCtrlBlk         ; make current
D3C6 BDCEAC           (       ddos12.asm):04306                 JSR     >DosFCBNoToAddr         ; get FCB address
                      (       ddos12.asm):04307                 
D3C9 10AE8810         (       ddos12.asm):04308                 LDY     FCBFileLen,X
D3CD E68812           (       ddos12.asm):04309                 LDB     FCBFileLen+2,X
D3D0 EE62             (       ddos12.asm):04310                 LDU     CopyIOBufPtr,S
D3D2 9E1F             (       ddos12.asm):04311                 LDX     BasVarEnd
D3D4 BDCB59           (       ddos12.asm):04312                 JSR     >DOSFWrite              ; go write to destination
                      (       ddos12.asm):04313                 
D3D7 2692             (       ddos12.asm):04314                 BNE     LD36B                   ; error exit
D3D9 209A             (       ddos12.asm):04315                 BRA     LD375
                      (       ddos12.asm):04316         
D3DB BDCEBB           (       ddos12.asm):04317         LD3DB   JSR     >DOSCloseAll            ; close all files
D3DE 1026FF89         (       ddos12.asm):04318                 LBNE    LD36B                   ; error exit
D3E2 3267             (       ddos12.asm):04319                 LEAS    7,S                     ; cleanup stack
D3E4 39               (       ddos12.asm):04320                 RTS
                      (       ddos12.asm):04321         
                      (       ddos12.asm):04322         ;
                      (       ddos12.asm):04323         ; basic MERGE command
                      (       ddos12.asm):04324         ;
                      (       ddos12.asm):04325         ; Merges basic program in memory with a program from disk.
                      (       ddos12.asm):04326         ;
                      (       ddos12.asm):04327         ; MERGE "filename"
                      (       ddos12.asm):04328         ;
                      (       ddos12.asm):04329         
D3E5                  (       ddos12.asm):04330         CmdMerge   
D3E5 BDD6CE           (       ddos12.asm):04331                 JSR     >DosValidateAndOpenBAS  ; open basic program file
D3E8 2649             (       ddos12.asm):04332                 BNE     LD433                   ; error, exit
                      (       ddos12.asm):04333                 
D3EA BDD46C           (       ddos12.asm):04334                 JSR     >ReadHeadGetTypeA       ; read header, get filetype             
D3ED 2644             (       ddos12.asm):04335                 BNE     LD433                   ; error, exit
                      (       ddos12.asm):04336                 
D3EF 8101             (       ddos12.asm):04337                 CMPA    #FTypeBas               ; is the file basic?                            
D3F1 263E             (       ddos12.asm):04338                 BNE     GenFMError              ; nope, FM error, exit
                      (       ddos12.asm):04339                 
D3F3 DE1B             (       ddos12.asm):04340                 LDU     <BasVarSimpleAddr       ; point at end of basic program
D3F5 109E19           (       ddos12.asm):04341                 LDY     <BasStartProg           ; point at beginning of basic program
                      (       ddos12.asm):04342                 
D3F8 3460             (       ddos12.asm):04343                 PSHS    Y,U                     ; save regs
D3FA 3341             (       ddos12.asm):04344                 LEAU    1,U                     ; point 1 byte into vars 
D3FC DF19             (       ddos12.asm):04345                 STU     <BasStartProg           ; make this the new start of basic
D3FE BDD4E0           (       ddos12.asm):04346                 JSR     >DoBasLoad              ; glo load program
                      (       ddos12.asm):04347                 
D401 3550             (       ddos12.asm):04348                 PULS    X,U                     ; recover old start and end prog addressses
D403 DF1B             (       ddos12.asm):04349                 STU     <BasVarSimpleAddr       ; and reset them
D405 9F19             (       ddos12.asm):04350                 STX     <BasStartProg
D407 3341             (       ddos12.asm):04351                 LEAU    1,U                     ; point to loaded basic program
                      (       ddos12.asm):04352                 
D409 ECC1             (       ddos12.asm):04353         LD409   LDD     ,U++                    ; get pointer to next line
D40B 271E             (       ddos12.asm):04354                 BEQ     LD42B                   ; exit if zero, we have reached the end of loaded program
                      (       ddos12.asm):04355                 
D40D ECC1             (       ddos12.asm):04356                 LDD     ,U++                    ; get line number 
D40F FD02DA           (       ddos12.asm):04357                 STD     BasLinInpHead           ; save it in line input buffer
D412 DD2B             (       ddos12.asm):04358                 STD     <BasTempLine            ; save it in tem line
D414 5F               (       ddos12.asm):04359                 CLRB                            ; clear B
D415 8E02DC           (       ddos12.asm):04360                 LDX     #BasLinInpBuff          ; point at line input buffer
D418 5C               (       ddos12.asm):04361         LD418   INCB                            ; increment line char count
D419 A6C0             (       ddos12.asm):04362                 LDA     ,U+                     ; get a loaded byte
D41B A780             (       ddos12.asm):04363                 STA     ,X+                     ; put it in line input buffer
D41D 26F9             (       ddos12.asm):04364                 BNE     LD418                   ; loop for next, if byte not zero (EOL)
                      (       ddos12.asm):04365         
D41F CB04             (       ddos12.asm):04366                 ADDB    #$04                    ;
D421 D703             (       ddos12.asm):04367                 STB     <BasGenCount
                      (       ddos12.asm):04368         
D423 3440             (       ddos12.asm):04369                 PSHS    U                       ; save loaded program pointer
D425 8D0F             (       ddos12.asm):04370                 BSR     LD436                   ; put line in basic
D427 3540             (       ddos12.asm):04371                 PULS    U                       ; recover loaded program pointer
D429 20DE             (       ddos12.asm):04372                 BRA     LD409                   ; loop again
                      (       ddos12.asm):04373         
D42B 7F0611           (       ddos12.asm):04374         LD42B   CLR     DosRunLoadFlag          ; clear load run flag
D42E 16008C           (       ddos12.asm):04375                 LBRA    LD4BD                   ; finish off load
                      (       ddos12.asm):04376         
D431                  (       ddos12.asm):04377         GenFMError   
D431 C62C             (       ddos12.asm):04378                 LDB     #BErrFM                 ; FM error
D433 7EC69E           (       ddos12.asm):04379         LD433   JMP     >DosHookSysError        ; call error hook
                      (       ddos12.asm):04380         
D436 BD83FF           (       ddos12.asm):04381         LD436   JSR     >BasFindLineNo          ; find the line 
D439 2512             (       ddos12.asm):04382                 BCS     LD44D                   ; branch if new line number
                      (       ddos12.asm):04383                 
                      (       ddos12.asm):04384         ; line found with the same number, delete the current line and inser the new one.
D43B DC47             (       ddos12.asm):04385                 LDD     <BasFoundLineNo         ; get address of found line 
D43D A384             (       ddos12.asm):04386                 SUBD    ,X                      ; calculate length of founc line (-ve)
D43F D31B             (       ddos12.asm):04387                 ADDD    <BasVarSimpleAddr       ; add base of loaded prog to line length 
D441 DD1B             (       ddos12.asm):04388                 STD     <BasVarSimpleAddr       ; set end address for copy
D443 EE84             (       ddos12.asm):04389                 LDU     ,X                      ; get address of next line
D445 A6C0             (       ddos12.asm):04390         LD445   LDA     ,U+                     ; get a byte from next line
D447 A780             (       ddos12.asm):04391                 STA     ,X+                     ; overwrite this line
D449 9C1B             (       ddos12.asm):04392                 CMPX    <BasVarSimpleAddr       ; done all?     
D44B 26F8             (       ddos12.asm):04393                 BNE     LD445                   ; no,keep going
                      (       ddos12.asm):04394         
D44D DC1B             (       ddos12.asm):04395         LD44D   LDD     <BasVarSimpleAddr       ; get new base of variables
D44F DD43             (       ddos12.asm):04396                 STD     <Eval43                 ; save it
D451 DB03             (       ddos12.asm):04397                 ADDB    <BasGenCount            ; add gencount to number of bytes moved
D453 8900             (       ddos12.asm):04398                 ADCA    #$00                    ; process any carry B->A
D455 DD41             (       ddos12.asm):04399                 STD     <Eval41                 ; save it
D457 BD831C           (       ddos12.asm):04400                 JSR     >BasChkArrSpaceMv       ; check array space and move
                      (       ddos12.asm):04401                 
D45A CE02D8           (       ddos12.asm):04402                 LDU     #$02D8                  ; point to input buffer
D45D A6C0             (       ddos12.asm):04403         LD45D   LDA     ,U+                     ; get a byte from buffer        
D45F A780             (       ddos12.asm):04404                 STA     ,X+                     ; put it in program
D461 9C45             (       ddos12.asm):04405                 CMPX    <Eval45                 ; end of line?
D463 26F8             (       ddos12.asm):04406                 BNE     LD45D                   ; no keep going
D465 9E41             (       ddos12.asm):04407                 LDX     <Eval41                 ; update end of basic program
D467 9F1B             (       ddos12.asm):04408                 STX     <BasVarSimpleAddr
D469 7E83ED           (       ddos12.asm):04409                 JMP     >BasVect2               ; re-link lines.        
                      (       ddos12.asm):04410         
                      (       ddos12.asm):04411         ;
                      (       ddos12.asm):04412         ; Read a header from the open file, into the DosCurDriveInfo
                      (       ddos12.asm):04413         ; Check that the header contacins the correct marker bytes at beginning and end.
                      (       ddos12.asm):04414         ; If valid return file type byte in A else generate and FM error.
                      (       ddos12.asm):04415         ;
                      (       ddos12.asm):04416         ; Entry:
                      (       ddos12.asm):04417         ;       DosCurrCtrlBlk  = file no to read
                      (       ddos12.asm):04418         ;
                      (       ddos12.asm):04419         ; Exit:
                      (       ddos12.asm):04420         ;       A               = filetype byte from header
                      (       ddos12.asm):04421         ;       X               = points to header block
                      (       ddos12.asm):04422         ;       B               = Error code (despit comments in DDv2c source).
                      (       ddos12.asm):04423         ;
                      (       ddos12.asm):04424         
D46C                  (       ddos12.asm):04425         ReadHeadGetTypeA   
D46C 8E0650           (       ddos12.asm):04426                 LDX     #DosCurDriveInfo        ; point at current drive info
D46F 108E0009         (       ddos12.asm):04427                 LDY     #FileHeadLen            ; 9 bytes, header size
D473 DE8A             (       ddos12.asm):04428                 LDU     <DBZero                 ; U=0 filebointer at BOF
D475 5F               (       ddos12.asm):04429                 CLRB                            ; B=0
D476 96F1             (       ddos12.asm):04430                 LDA     <DosCurrCtrlBlk         ; get current control block
D478 BDC991           (       ddos12.asm):04431                 JSR     >DOSFRead               ; read file header      
D47B 2701             (       ddos12.asm):04432                 BEQ     LD47E                   ; no error
D47D 39               (       ddos12.asm):04433                 RTS
                      (       ddos12.asm):04434         
D47E 8655             (       ddos12.asm):04435         LD47E   LDA     #MarkerHeadStart        ; check for header marker bytes
D480 8E0650           (       ddos12.asm):04436                 LDX     #DosCurDriveInfo        ; point at file header in buffer
D483 A184             (       ddos12.asm):04437                 CMPA    ,X                      ; first marker present?
D485 26AA             (       ddos12.asm):04438                 BNE     GenFMError              ; generate FM error if not
                      (       ddos12.asm):04439                 
D487 43               (       ddos12.asm):04440                 COMA                            ; check for second marker at end of header
D488 A108             (       ddos12.asm):04441                 CMPA    HdrIDAA,X               ; second marker present?
D48A 26A5             (       ddos12.asm):04442                 BNE     GenFMError              ; generate FM error if not
D48C A601             (       ddos12.asm):04443                 LDA     HdrType,X               ; get filetype in A             
D48E 5F               (       ddos12.asm):04444                 CLRB
D48F 39               (       ddos12.asm):04445                 RTS
                      (       ddos12.asm):04446         
                      (       ddos12.asm):04447         ;
                      (       ddos12.asm):04448         ; Load a basic or binary file into memory.
                      (       ddos12.asm):04449         ;
                      (       ddos12.asm):04450         ; If basic, any basic program already in memory will be overwritten 
                      (       ddos12.asm):04451         ; and variables cleared.
                      (       ddos12.asm):04452         ;
                      (       ddos12.asm):04453         ; If binary, the program will be read into any location that is not ROM.
                      (       ddos12.asm):04454         ;
                      (       ddos12.asm):04455         ; RUN "filename"        : load and run 
                      (       ddos12.asm):04456         ; LOAD "filename"       : load but don't run 
                      (       ddos12.asm):04457         ;
                      (       ddos12.asm):04458         
                      (       ddos12.asm):04459         ; Clear various flags
D490                  (       ddos12.asm):04460         DosHookRun   
D490 7F0614           (       ddos12.asm):04461                 CLR     DosErrGotoFlag          ; Clear on error goto flag
D493 7F0619           (       ddos12.asm):04462                 CLR     DosErrLast              ; clear last error code
D496 7F0617           (       ddos12.asm):04463                 CLR     DosErrLineNo            ; clear last error line
D499 7F0618           (       ddos12.asm):04464                 CLR     DosErrLineNo+1
D49C 8122             (       ddos12.asm):04465                 CMPA    #$22                    ; quote
D49E 2702             (       ddos12.asm):04466                 BEQ     LD4A2
D4A0 4D               (       ddos12.asm):04467                 TSTA
D4A1 39               (       ddos12.asm):04468                 RTS
                      (       ddos12.asm):04469         
D4A2 3262             (       ddos12.asm):04470         LD4A2   LEAS    2,S                     ; drop return address
D4A4 C601             (       ddos12.asm):04471                 LDB     #$01                    ; flag run
                      (       ddos12.asm):04472         
D4A6 21               (       ddos12.asm):04473                 FCB     Skip1
                      (       ddos12.asm):04474                 
D4A7 5F               (       ddos12.asm):04475         CmdLoad CLRB                            ; flag load
D4A8 F70611           (       ddos12.asm):04476                 STB     DosRunLoadFlag          
D4AB BDD6CE           (       ddos12.asm):04477                 JSR     >DosValidateAndOpenBAS  ; check and open the basic program file
D4AE 2683             (       ddos12.asm):04478                 BNE     LD433                   ; error, exit
                      (       ddos12.asm):04479                 
D4B0 BDD46C           (       ddos12.asm):04480                 JSR     >ReadHeadGetTypeA       ; read header of basic program
D4B3 1026FF7C         (       ddos12.asm):04481                 LBNE    LD433                   ; error, exit
                      (       ddos12.asm):04482                 
D4B7 8101             (       ddos12.asm):04483                 CMPA    #FTypeBas               ; is the file of type basic?
D4B9 2649             (       ddos12.asm):04484                 BNE     LD504                   ; nope, go check for machine code
                      (       ddos12.asm):04485                 
D4BB 8D23             (       ddos12.asm):04486                 BSR     DoBasLoad               ; load the file into the program memory
                      (       ddos12.asm):04487         
D4BD 0FF6             (       ddos12.asm):04488         LD4BD   CLR     <DosIOInProgress        ; mark IO not in progress
                      (       ddos12.asm):04489                 
D4BF 9E19             (       ddos12.asm):04490                 LDX     <BasStartProg           ; point at start of program
D4C1 BD85EE           (       ddos12.asm):04491                 JSR     >BasSetProgPtrX         ; asjust pointer
                      (       ddos12.asm):04492                 
D4C4 9E27             (       ddos12.asm):04493                 LDX     <AddrFWareRamTop        ; get the end of RAM
D4C6 9F23             (       ddos12.asm):04494                 STX     <BasVarStrTop           ; setup string variables
                      (       ddos12.asm):04495                 
D4C8 9E1B             (       ddos12.asm):04496                 LDX     <BasVarSimpleAddr       ; arrays top = simple vars top, 
D4CA 9F1D             (       ddos12.asm):04497                 STX     <BasVarArrayAddr        ; no arrays defined
                      (       ddos12.asm):04498                 
D4CC 9F1F             (       ddos12.asm):04499                 STX     BasVarEnd               ; and no simple vars defined
                      (       ddos12.asm):04500                 
D4CE BD8514           (       ddos12.asm):04501         LD4CE   JSR     >CmdRestore             ; perform a basic 'RESTORE' reset data pointers
D4D1 BD8434           (       ddos12.asm):04502                 JSR     >BasResetStack          ; reset basic stack
                      (       ddos12.asm):04503                 
D4D4 7D0611           (       ddos12.asm):04504                 TST     DosRunLoadFlag          ; should we run the loaded code?
D4D7 2703             (       ddos12.asm):04505                 BEQ     LD4DC                   ; nope, just return
                      (       ddos12.asm):04506                 
D4D9 7E849F           (       ddos12.asm):04507                 JMP     >BasRun                 ; go run it
                      (       ddos12.asm):04508         
D4DC 4F               (       ddos12.asm):04509         LD4DC   CLRA                            ; flag no error
D4DD 7E8371           (       ddos12.asm):04510                 JMP     >BasCmdMode             ; return to command mode
                      (       ddos12.asm):04511         
                      (       ddos12.asm):04512         ;
                      (       ddos12.asm):04513         ; Load code of basic program
                      (       ddos12.asm):04514         ; On entry X points to file header
                      (       ddos12.asm):04515         ; 
                      (       ddos12.asm):04516         
D4E0                  (       ddos12.asm):04517         DoBasLoad   
D4E0 EC04             (       ddos12.asm):04518                 LDD     HdrLen,X                ; get file length
D4E2 1F02             (       ddos12.asm):04519                 TFR     D,Y                     ; get it into Y for FRead below
D4E4 D319             (       ddos12.asm):04520                 ADDD    <BasStartProg           ; add the start of basic, to get the new end
                      (       ddos12.asm):04521                 
D4E6 DD1F             (       ddos12.asm):04522                 STD     BasVarEnd               ; save it 
D4E8 C640             (       ddos12.asm):04523                 LDB     #$40                    ; Check we have 128 bytes free RAM
D4EA BD8331           (       ddos12.asm):04524                 JSR     >BasChkB2Free           ; go check, OM error if insufficient
                      (       ddos12.asm):04525                 
D4ED 96F1             (       ddos12.asm):04526         LD4ED   LDA     <DosCurrCtrlBlk         ; get current control block
D4EF DE8A             (       ddos12.asm):04527                 LDU     <DBZero ; U=0
D4F1 C609             (       ddos12.asm):04528                 LDB     #FileHeadLen            ; start reading at byte 9
D4F3 9E19             (       ddos12.asm):04529                 LDX     <BasStartProg           ; into BasStartProg
D4F5 BDC991           (       ddos12.asm):04530                 JSR     >DOSFRead               ; go read it
                      (       ddos12.asm):04531                 
D4F8 1026F1A2         (       ddos12.asm):04532                 LBNE    DosHookSysError         ; error, try catching it
                      (       ddos12.asm):04533                 
D4FC BD83ED           (       ddos12.asm):04534                 JSR     >BasVect2               ; tidy up after load
D4FF 3002             (       ddos12.asm):04535                 LEAX    2,X                     ; point past end of program
D501 9F1B             (       ddos12.asm):04536                 STX     <BasVarSimpleAddr       ; save in basic vars
D503 39               (       ddos12.asm):04537         LD503   RTS                             ; return
                      (       ddos12.asm):04538         
D504 8102             (       ddos12.asm):04539         LD504   CMPA    #FTypeBin               ; is this file a machine code program?
D506 1026FF27         (       ddos12.asm):04540                 LBNE    GenFMError              ; nope, errror not basic or machine code
                      (       ddos12.asm):04541                 
D50A EE06             (       ddos12.asm):04542                 LDU     HdrExec,X               ; get Exec address from header
D50C DF9D             (       ddos12.asm):04543                 STU     <BasExecAddr            ; save it in basic exec vector
                      (       ddos12.asm):04544                 
D50E 9DA5             (       ddos12.asm):04545                 JSR     <BasChrGetCurr          ; get current character from basic
D510 2712             (       ddos12.asm):04546                 BEQ     LD524                   ; no more, skip on
                      (       ddos12.asm):04547                 
D512 3410             (       ddos12.asm):04548                 PSHS    X                       ; save X
D514 8D6B             (       ddos12.asm):04549                 BSR     VarGetComma16           ; get load offset in X
D516 1F13             (       ddos12.asm):04550                 TFR     X,U                     ; save offset in U
                      (       ddos12.asm):04551                 
D518 3510             (       ddos12.asm):04552                 PULS    X                       ; restore header pointer
D51A EC06             (       ddos12.asm):04553                 LDD     HdrExec,X               ; get exec address
D51C A302             (       ddos12.asm):04554                 SUBD    HdrLoad,X               ; subtract load address giving exec address offset
D51E EF02             (       ddos12.asm):04555                 STU     HdrLoad,X               ; save new load address
D520 E302             (       ddos12.asm):04556                 ADDD    HdrLoad,X               ; add exec offset to new load address
D522 DD9D             (       ddos12.asm):04557                 STD     <BasExecAddr            ; save it in basic exec address
                      (       ddos12.asm):04558                 
D524 10AE04           (       ddos12.asm):04559         LD524   LDY     HdrLen,X                ; get file length into Y
D527 96F1             (       ddos12.asm):04560                 LDA     <DosCurrCtrlBlk         ; get current control block
D529 C609             (       ddos12.asm):04561                 LDB     #FileHeadLen            ; set file position in U:B
D52B DE8A             (       ddos12.asm):04562                 LDU     <DBZero ; U=0
D52D AE02             (       ddos12.asm):04563                 LDX     HdrLoad,X               ; get load address
D52F BDC991           (       ddos12.asm):04564                 JSR     >DOSFRead               ; go read the file into memory
                      (       ddos12.asm):04565                 
D532 1026F168         (       ddos12.asm):04566                 LBNE    DosHookSysError         ; try catching error if any
                      (       ddos12.asm):04567                 
D536 7D0611           (       ddos12.asm):04568                 TST     DosRunLoadFlag          ; test if we should run loaded code?
D539 27C8             (       ddos12.asm):04569                 BEQ     LD503                   ; nope return to caller
D53B 6E9F009D         (       ddos12.asm):04570                 JMP     [>BasExecAddr]          ; exec loaded program
                      (       ddos12.asm):04571         
                      (       ddos12.asm):04572         ;
                      (       ddos12.asm):04573         ; basic SAVE comamnd
                      (       ddos12.asm):04574         ;
                      (       ddos12.asm):04575         ; Save a basic or binary program to disk.
                      (       ddos12.asm):04576         ;
                      (       ddos12.asm):04577         ; If basic:
                      (       ddos12.asm):04578         ;   SAVE "filename"
                      (       ddos12.asm):04579         ;
                      (       ddos12.asm):04580         ; If binary:
                      (       ddos12.asm):04581         ;   SAVE "filename",start,end,entry
                      (       ddos12.asm):04582         ;
                      (       ddos12.asm):04583         ; DosCurFilename is used as a buffer to buld the file header :-
                      (       ddos12.asm):04584         ;
                      (       ddos12.asm):04585         ; DosCurFilename        $55
                      (       ddos12.asm):04586         ; DosCurFilename        FileType
                      (       ddos12.asm):04587         ; DosCurFilename+2      Start address
                      (       ddos12.asm):04588         ; DosCurFilename+4      Length
                      (       ddos12.asm):04589         ; DosCurFilename+6      Entry address   
                      (       ddos12.asm):04590         ; DosCurFilename+8      $AA
                      (       ddos12.asm):04591         ;
                      (       ddos12.asm):04592         
D53F                  (       ddos12.asm):04593         CmdSave   
D53F BD8887           (       ddos12.asm):04594                 JSR     >VarGetStr              ; get string into temp variable
D542 BD8877           (       ddos12.asm):04595                 JSR     >VarGetExpr             ; Get address of string in FAC
D545 9DA5             (       ddos12.asm):04596                 JSR     <BasChrGetCurr          ; get current basic character
D547 273E             (       ddos12.asm):04597                 BEQ     LD587                   ; none, skip, it's a basic program being saved
                      (       ddos12.asm):04598                 
D549 108EDF8D         (       ddos12.asm):04599                 LDY     #DosExtBin              ; otherwise it's machine code, point to BIN extension
D54D 8D23             (       ddos12.asm):04600                 BSR     LD572                   ; try to open or create the file
                      (       ddos12.asm):04601                 
D54F 8D30             (       ddos12.asm):04602                 BSR     VarGetComma16           ; get start address
D551 BF0652           (       ddos12.asm):04603                 STX     DosCurFilename+2        ; save it away
                      (       ddos12.asm):04604                 
D554 8D2B             (       ddos12.asm):04605                 BSR     VarGetComma16           ; get end address
D556 1F10             (       ddos12.asm):04606                 TFR     X,D                     ; save it in D
D558 BC0652           (       ddos12.asm):04607                 CMPX    DosCurFilename+2        ; compare to start address      
D55B 1025F13D         (       ddos12.asm):04608                 LBCS    DosPRError              ; PR error if it's lower
                      (       ddos12.asm):04609                 
D55F B30652           (       ddos12.asm):04610                 SUBD    DosCurFilename+2        ; subtract start address from end address giving length in D
D562 102BB627         (       ddos12.asm):04611                 LBMI    BasFCError              ; FC error if it's -ve
                      (       ddos12.asm):04612                 
D566 FD0654           (       ddos12.asm):04613                 STD     DosCurFilename+4        ; save length
                      (       ddos12.asm):04614                 
D569 8D16             (       ddos12.asm):04615                 BSR     VarGetComma16           ; get entry address
D56B BF0656           (       ddos12.asm):04616                 STX     DosCurFilename+6        ; save it
                      (       ddos12.asm):04617         
D56E C602             (       ddos12.asm):04618                 LDB     #FTypeBin               ; set filetype to binary
D570 202F             (       ddos12.asm):04619                 BRA     LD5A1
                      (       ddos12.asm):04620         
D572 BDD6E2           (       ddos12.asm):04621         LD572   JSR     >DosOpenFileExtY        ; get the supplied filename & try opening
D575 2704             (       ddos12.asm):04622                 BEQ     LD57B                   ; all ok, skip on and create
                      (       ddos12.asm):04623                 
D577 C1A0             (       ddos12.asm):04624                 CMPB    #ErrNE          ; File does not exist error?
D579 2640             (       ddos12.asm):04625                 BNE     LD5BB                   ; no, skip to error handler
                      (       ddos12.asm):04626                 
D57B BDCF14           (       ddos12.asm):04627         LD57B   JSR     >DOSCreateFile          ; (re)create file
D57E 263B             (       ddos12.asm):04628                 BNE     LD5BB                   ; error skip to handler
D580 39               (       ddos12.asm):04629                 RTS
                      (       ddos12.asm):04630         ;
                      (       ddos12.asm):04631         ; syntax check for a comma then get 16 bit integer.
                      (       ddos12.asm):04632         ;
D581                  (       ddos12.asm):04633         VarGetComma16   
D581 BD89AA           (       ddos12.asm):04634                 JSR     >VarCKComma             ; syntax check for comma
D584 7E8E83           (       ddos12.asm):04635                 JMP     >VarGet16Bit            ; get 16 bit integer (in X)
                      (       ddos12.asm):04636         
                      (       ddos12.asm):04637         ; continuation of save code
D587 108EDF87         (       ddos12.asm):04638         LD587   LDY     #DosExtBas              ; point at BAS extension
D58B 8DE5             (       ddos12.asm):04639                 BSR     LD572                   ; try to create or open file
                      (       ddos12.asm):04640                 
D58D 9E19             (       ddos12.asm):04641                 LDX     <BasStartProg           ; get the address of the start of the basic program
D58F BF0652           (       ddos12.asm):04642                 STX     DosCurFilename+2        ; set this as start address
                      (       ddos12.asm):04643                 
D592 DC1B             (       ddos12.asm):04644                 LDD     <BasVarSimpleAddr       ; address of simple vars = address of end of program
D594 9319             (       ddos12.asm):04645                 SUBD    <BasStartProg           ; subtract address of start of program
D596 FD0654           (       ddos12.asm):04646                 STD     DosCurFilename+4        ; save it in length
                      (       ddos12.asm):04647                 
D599 8E8B8D           (       ddos12.asm):04648                 LDX     #BasFCError             ; set exec address to the FC error routine
D59C BF0656           (       ddos12.asm):04649                 STX     DosCurFilename+6        ; set it
                      (       ddos12.asm):04650                 
D59F C601             (       ddos12.asm):04651                 LDB     #FTypeBas               ; filetype basic
                      (       ddos12.asm):04652         
D5A1 8E0650           (       ddos12.asm):04653         LD5A1   LDX     #DosCurFilename         ; point to DosCurFilename, used as header buffer
D5A4 8655             (       ddos12.asm):04654                 LDA     #MarkerHeadStart        ; mark start of header                  
D5A6 A784             (       ddos12.asm):04655                 STA     ,X                      ; save in header
D5A8 43               (       ddos12.asm):04656                 COMA                            ; complement it to give end marker
D5A9 A708             (       ddos12.asm):04657                 STA     HdrIDAA,X               ; save it in header
                      (       ddos12.asm):04658                 
D5AB E701             (       ddos12.asm):04659                 STB     HdrType,X               ; set filetype
                      (       ddos12.asm):04660                 
D5AD 96F1             (       ddos12.asm):04661                 LDA     <DosCurrCtrlBlk         ; get current control block
D5AF 5F               (       ddos12.asm):04662                 CLRB                            ; Y:B, filepointer offset = 0:0
D5B0 109E8A           (       ddos12.asm):04663                 LDY     <DBZero
D5B3 CE0009           (       ddos12.asm):04664                 LDU     #FileHeadLen            ; length of header
D5B6 BDCB59           (       ddos12.asm):04665                 JSR     >DOSFWrite              ; go write it   
D5B9 2703             (       ddos12.asm):04666                 BEQ     LD5BE                   ; if it wrote ok, go write rest of file
                      (       ddos12.asm):04667         
D5BB 7EC69E           (       ddos12.asm):04668         LD5BB   JMP     >DosHookSysError        ; call error handler
                      (       ddos12.asm):04669         
D5BE 96F1             (       ddos12.asm):04670         LD5BE   LDA     <DosCurrCtrlBlk         ; get current control block
D5C0 C609             (       ddos12.asm):04671                 LDB     #FileHeadLen            ; file offset, just after header
D5C2 BE0652           (       ddos12.asm):04672                 LDX     DosCurFilename+2        ; get start address     
D5C5 FE0654           (       ddos12.asm):04673                 LDU     DosCurFilename+4        ; get number of bytes (file len)
D5C8 109E8A           (       ddos12.asm):04674                 LDY     <DBZero ; Y=0
D5CB BDCB59           (       ddos12.asm):04675                 JSR     >DOSFWrite              ; write the rest of the file
D5CE 26EB             (       ddos12.asm):04676                 BNE     LD5BB                   ; branch on error
                      (       ddos12.asm):04677                 
D5D0 0FF6             (       ddos12.asm):04678                 CLR     <DosIOInProgress        ; clear file io
D5D2 39               (       ddos12.asm):04679                 RTS
                      (       ddos12.asm):04680         ;
                      (       ddos12.asm):04681         ; Basic CHAIN command 
                      (       ddos12.asm):04682         ;
                      (       ddos12.asm):04683         ; The command will save all of the users simple variables, arrays and strings.
                      (       ddos12.asm):04684         ; It will re-initialize the stack so as to flush and FOR-NEXT loops or pending
                      (       ddos12.asm):04685         ; RETURNS.
                      (       ddos12.asm):04686         ; It will also reset the READ-DATA pointer back to the beginning of the program. 
                      (       ddos12.asm):04687         ;
                      (       ddos12.asm):04688         ; CHAIN "progname"
                      (       ddos12.asm):04689         ; CHAIN "progname",runline
                      (       ddos12.asm):04690         ;
                      (       ddos12.asm):04691         
D5D3                  (       ddos12.asm):04692         CmdChain   
D5D3 BDD6CE           (       ddos12.asm):04693                 JSR     >DosValidateAndOpenBAS  ; check and open the basic program file
D5D6 1026011E         (       ddos12.asm):04694                 LBNE    LD6F8                   ; error : exit
                      (       ddos12.asm):04695                 
D5DA BDD46C           (       ddos12.asm):04696                 JSR     >ReadHeadGetTypeA       ; go read the file's header, type in A
D5DD 1026F0BD         (       ddos12.asm):04697                 LBNE    DosHookSysError         ; error : exit
                      (       ddos12.asm):04698                 
D5E1 8101             (       ddos12.asm):04699                 CMPA    #FTypeBas               ; make sure it's a basic program type
D5E3 1026FE4A         (       ddos12.asm):04700                 LBNE    GenFMError              ; nope : generate FM error
                      (       ddos12.asm):04701                 
D5E7 BDD669           (       ddos12.asm):04702                 JSR     >LD669                  ; check and move strings to string area if needed
                      (       ddos12.asm):04703                 
D5EA EC04             (       ddos12.asm):04704                 LDD     HdrLen,X                ; get length of file to chain
D5EC FD0656           (       ddos12.asm):04705                 STD     DosCurFilename+6        ; save it 
                      (       ddos12.asm):04706                 
D5EF D319             (       ddos12.asm):04707                 ADDD    <BasStartProg           ; work out where chained program will end
D5F1 931B             (       ddos12.asm):04708                 SUBD    <BasVarSimpleAddr       ; work out offset to current start of vars
D5F3 3406             (       ddos12.asm):04709                 PSHS    D                       ; save it
                      (       ddos12.asm):04710                 
D5F5 D31F             (       ddos12.asm):04711                 ADDD    BasVarEnd               ; add offset to end of simple vars
D5F7 DD1F             (       ddos12.asm):04712                 STD     BasVarEnd               ; and update end of simple vars
D5F9 C640             (       ddos12.asm):04713                 LDB     #$40                    ; reserve 128 bytes of storage
D5FB BD8331           (       ddos12.asm):04714                 JSR     >BasChkB2Free           ; check to see if free, error if not
                      (       ddos12.asm):04715                 
D5FE ECE4             (       ddos12.asm):04716                 LDD     ,S                      ; get offset between new end of prog and beginning 
                      (       ddos12.asm):04717                                                 ; of vars
D600 2A0F             (       ddos12.asm):04718                 BPL     LD611                   ; branch if positive
                      (       ddos12.asm):04719         
                      (       ddos12.asm):04720         ; -ve offset move vars down, staring at beginning so as not to overwrite ourselves
D602 9E1B             (       ddos12.asm):04721                 LDX     <BasVarSimpleAddr       ; point at beginning of vars
D604 338B             (       ddos12.asm):04722                 LEAU    D,X                     ; add offset
                      (       ddos12.asm):04723         
D606 A680             (       ddos12.asm):04724         LD606   LDA     ,X+                     ; get a byte from current vars area
D608 A7C0             (       ddos12.asm):04725                 STA     ,U+                     ; save it in new vars area
D60A 11931F           (       ddos12.asm):04726                 CMPU    BasVarEnd               ; reached end of vars yet
D60D 23F7             (       ddos12.asm):04727                 BLS     LD606                   ; nope, loop again
                      (       ddos12.asm):04728                 
D60F 200E             (       ddos12.asm):04729                 BRA     LD61F                   ; branch on over other copy loop
                      (       ddos12.asm):04730         
                      (       ddos12.asm):04731         ; +ve offset move vars down, staring at end so as not to overwrite ourselves
D611 9E1F             (       ddos12.asm):04732         LD611   LDX     BasVarEnd               ; point to end of vars
D613 3001             (       ddos12.asm):04733                 LEAX    1,X                     ; add 1
D615 338B             (       ddos12.asm):04734                 LEAU    D,X                     ; add offset
                      (       ddos12.asm):04735                 
D617 A682             (       ddos12.asm):04736         LD617   LDA     ,-X                     ; get a byte from current vars area
D619 A7C2             (       ddos12.asm):04737                 STA     ,-U                     ; save it in new vars area
D61B 9C1B             (       ddos12.asm):04738                 CMPX    <BasVarSimpleAddr       ; reached beginning of vars?
D61D 24F8             (       ddos12.asm):04739                 BCC     LD617                   ; nope, loop again
                      (       ddos12.asm):04740                 
D61F ECE4             (       ddos12.asm):04741         LD61F   LDD     ,S                      ; get offset 
D621 D31B             (       ddos12.asm):04742                 ADDD    <BasVarSimpleAddr       ; add simple vars address
D623 DD1B             (       ddos12.asm):04743                 STD     <BasVarSimpleAddr       ; save updated address
                      (       ddos12.asm):04744                 
D625 3506             (       ddos12.asm):04745                 PULS    D                       ; pull offset
D627 D31D             (       ddos12.asm):04746                 ADDD    <BasVarArrayAddr        ; add beginning of arrays address
D629 DD1D             (       ddos12.asm):04747                 STD     <BasVarArrayAddr        ; save updated address
                      (       ddos12.asm):04748                 
D62B DE1F             (       ddos12.asm):04749                 LDU     BasVarEnd               ; get address of end of vars
D62D 109E1D           (       ddos12.asm):04750                 LDY     <BasVarArrayAddr        ; get address of arrays
D630 9DA5             (       ddos12.asm):04751                 JSR     <BasChrGetCurr          ; get next character from basic
D632 271E             (       ddos12.asm):04752                 BEQ     LD652                   ; no character, skip on
                      (       ddos12.asm):04753                 
D634 C62C             (       ddos12.asm):04754                 LDB     #','                    ; check for a comma
D636 BD89AC           (       ddos12.asm):04755                 JSR     >VarCKChar              ; error if not
                      (       ddos12.asm):04756                 
D639 BD869A           (       ddos12.asm):04757                 JSR     >BasGetLineNo           ; get supplied line number, convert to binary 
D63C BD8424           (       ddos12.asm):04758                 JSR     >BasVect1a              ; "erase" basic vars
D63F DF1F             (       ddos12.asm):04759                 STU     BasVarEnd               ; restore end of variables
                      (       ddos12.asm):04760                 
D641 109F1D           (       ddos12.asm):04761                 STY     <BasVarArrayAddr        ; restore array address
D644 10BE0656         (       ddos12.asm):04762                 LDY     DosCurFilename+6        ; get length of program to chain
D648 BDD4ED           (       ddos12.asm):04763                 JSR     >LD4ED                  ; go load it
                      (       ddos12.asm):04764                 
D64B DC2B             (       ddos12.asm):04765                 LDD     <BasTempLine            ; get line to start running at
D64D BD85E7           (       ddos12.asm):04766                 JSR     >BasSkipLineNo          ; go skip to it
D650 200F             (       ddos12.asm):04767                 BRA     LD661
                      (       ddos12.asm):04768         
D652 BD841F           (       ddos12.asm):04769         LD652   JSR     >BasVect1               ; "erase" basic vars
D655 DF1F             (       ddos12.asm):04770                 STU     BasVarEnd               ; restore end of variables
                      (       ddos12.asm):04771                 
D657 109F1D           (       ddos12.asm):04772                 STY     <BasVarArrayAddr        ; restore array address
D65A 10BE0656         (       ddos12.asm):04773                 LDY     DosCurFilename+6        ; get length of program to chain
D65E BDD4ED           (       ddos12.asm):04774                 JSR     >LD4ED                  ; go load it
                      (       ddos12.asm):04775         
D661 C601             (       ddos12.asm):04776         LD661   LDB     #$01                    ; flag run
D663 F70611           (       ddos12.asm):04777                 STB     DosRunLoadFlag  
D666 7ED4CE           (       ddos12.asm):04778                 JMP     >LD4CE                  ; go run it
                      (       ddos12.asm):04779         
                      (       ddos12.asm):04780         ; scan simple variable and array areas, for any string variables, check if they 
                      (       ddos12.asm):04781         ; already reside in the cleared string area at the top of RAM. If not move them
                      (       ddos12.asm):04782         ; there. This is done as strings may be defined as literals within the program text
                      (       ddos12.asm):04783         ; these will be erased when chaining a program so we need to move them so they 
                      (       ddos12.asm):04784         ; persist.
                      (       ddos12.asm):04785         
D669 DEA6             (       ddos12.asm):04786         LD669   LDU     <BasAddrSigByte         ; get address of current basic program pointer
D66B 3450             (       ddos12.asm):04787                 PSHS    X,U                     ; save regs
                      (       ddos12.asm):04788                 
D66D 9E1B             (       ddos12.asm):04789                 LDX     <BasVarSimpleAddr       ; point at simple variables
D66F 3002             (       ddos12.asm):04790                 LEAX    2,X                     ; add 2
D671 9C1D             (       ddos12.asm):04791         LD671   CMPX    <BasVarArrayAddr        ; compare to address of array variables
D673 240A             (       ddos12.asm):04792                 BCC     LD67F                   ; Found end, branch and do arrays
                      (       ddos12.asm):04793                 
D675 6D1F             (       ddos12.asm):04794                 TST     -1,X                    ; test second character of var name
D677 2A02             (       ddos12.asm):04795                 BPL     LD67B                   ; branch if numeric
D679 8D32             (       ddos12.asm):04796                 BSR     LD6AD                   ; check and move string to string area if needed
                      (       ddos12.asm):04797                 
D67B 3007             (       ddos12.asm):04798         LD67B   LEAX    7,X                     ; move to next simple var
D67D 20F2             (       ddos12.asm):04799                 BRA     LD671                   ; loop again
                      (       ddos12.asm):04800         
D67F DE1D             (       ddos12.asm):04801         LD67F   LDU     <BasVarArrayAddr        ; point at array area
D681 11931F           (       ddos12.asm):04802         LD681   CMPU    BasVarEnd               ; at end of arrays ?
D684 241F             (       ddos12.asm):04803                 BCC     LD6A5                   ; yep, exit
                      (       ddos12.asm):04804                 
D686 EC42             (       ddos12.asm):04805                 LDD     2,U                     ; get length of array
D688 30CB             (       ddos12.asm):04806                 LEAX    D,U                     ; point X at array base + len
D68A 3410             (       ddos12.asm):04807                 PSHS    X                       ; save X
                      (       ddos12.asm):04808                 
D68C 6D41             (       ddos12.asm):04809                 TST     1,U                     ; test array name for string array
D68E 2A11             (       ddos12.asm):04810                 BPL     LD6A1                   ; it's numeric, skip on
                      (       ddos12.asm):04811                 
D690 E644             (       ddos12.asm):04812                 LDB     4,U                     ; get number of dimensions
D692 4F               (       ddos12.asm):04813                 CLRA                            ; zero MSB
D693 58               (       ddos12.asm):04814                 ASLB                            ; multiply no of dimensions, by 2 
                      (       ddos12.asm):04815                                                 ; as dimension lengths are each 2 bytes
D694 30CB             (       ddos12.asm):04816                 LEAX    D,U                     ; point X at beginning of array data
D696 3005             (       ddos12.asm):04817                 LEAX    5,X                     ; add on header size
                      (       ddos12.asm):04818                 
D698 BDD6AD           (       ddos12.asm):04819         LD698   JSR     >LD6AD                  ; check string descriptot and move to string space if needed
D69B 3005             (       ddos12.asm):04820                 LEAX    5,X                     ; move to next descriptor in array
D69D ACE4             (       ddos12.asm):04821                 CMPX    ,S                      ; reached the end of this array yet?
D69F 25F7             (       ddos12.asm):04822                 BCS     LD698                   ; nope, keep checking
                      (       ddos12.asm):04823                 
D6A1 3540             (       ddos12.asm):04824         LD6A1   PULS    U                       ; restore pointer to next array
D6A3 20DC             (       ddos12.asm):04825                 BRA     LD681                   ; and loop again
                      (       ddos12.asm):04826         
D6A5 BD8CD7           (       ddos12.asm):04827         LD6A5   JSR     >VarGarbageCollect      ; garbage collect
D6A8 3550             (       ddos12.asm):04828                 PULS    X,U                     ; restore regs
D6AA DFA6             (       ddos12.asm):04829                 STU     <BasAddrSigByte         ; restore basic pointer
D6AC 39               (       ddos12.asm):04830                 RTS
                      (       ddos12.asm):04831         
                      (       ddos12.asm):04832         ; move a string into the string area if not null and not already there.
                      (       ddos12.asm):04833         ; enter with X pointing to the descriptor of the string to move, typically from
                      (       ddos12.asm):04834         ; the simple variables area
                      (       ddos12.asm):04835         
D6AD 3450             (       ddos12.asm):04836         LD6AD   PSHS    X,U                     ; save regs
D6AF 9C21             (       ddos12.asm):04837                 CMPX    <BasVarStringBase       ; is string in string area in high memory?
D6B1 2413             (       ddos12.asm):04838                 BCC     LD6C6                   ; yes, no need to move it
                      (       ddos12.asm):04839                 
D6B3 E684             (       ddos12.asm):04840                 LDB     ,X                      ; get string length
D6B5 270F             (       ddos12.asm):04841                 BEQ     LD6C6                   ; no need to move null string
                      (       ddos12.asm):04842                 
D6B7 BD8CB3           (       ddos12.asm):04843                 JSR     >BasResStr2             ; reserve bytes in string area for B bytes
D6BA 1F13             (       ddos12.asm):04844                 TFR     X,U                     ; point U at new string         
D6BC 10AEE4           (       ddos12.asm):04845                 LDY     ,S                      ; point y at old string
D6BF AE22             (       ddos12.asm):04846                 LDX     2,Y                     ; get address of old string data
D6C1 EF22             (       ddos12.asm):04847                 STU     2,Y                     ; update sescriptor's string pointer with new string
D6C3 BDB7CC           (       ddos12.asm):04848                 JSR     >UtilCopyBXtoU          ; copy the string data
D6C6 35D0             (       ddos12.asm):04849         LD6C6   PULS    X,U,PC                  ; restore and return
                      (       ddos12.asm):04850         
                      (       ddos12.asm):04851         
                      (       ddos12.asm):04852         ;
                      (       ddos12.asm):04853         ; Validate and open DAT file supplied on command
                      (       ddos12.asm):04854         ;
                      (       ddos12.asm):04855         
D6C8                  (       ddos12.asm):04856         DosValidateAndOpenDAT   
D6C8 108EDF8A         (       ddos12.asm):04857                 LDY     #DosExtDat              ; get pointer to extension 'DAT'
D6CC 200A             (       ddos12.asm):04858                 BRA     DosGetFilenameAndOpenExt
                      (       ddos12.asm):04859         
                      (       ddos12.asm):04860         ;
                      (       ddos12.asm):04861         ; Validate and open Basic program file supplied on command
                      (       ddos12.asm):04862         ;
                      (       ddos12.asm):04863         
D6CE                  (       ddos12.asm):04864         DosValidateAndOpenBAS   
D6CE 108EDF87         (       ddos12.asm):04865                 LDY     #DosExtBas              ; get pointer to extension 'BAS'
D6D2 2004             (       ddos12.asm):04866                 BRA     DosGetFilenameAndOpenExt
                      (       ddos12.asm):04867         
                      (       ddos12.asm):04868         ;
                      (       ddos12.asm):04869         ; Get a filename from Dos and open it
                      (       ddos12.asm):04870         ;       Takes a string supplied on command name, fetches it and
                      (       ddos12.asm):04871         ;       tries to open the file of that name.
                      (       ddos12.asm):04872         ; 
                      (       ddos12.asm):04873         ; If entered at DosGetFilenameAndOpenExt then extension must be pointed to by Y
                      (       ddos12.asm):04874         ;
                      (       ddos12.asm):04875         ; Exits with :-
                      (       ddos12.asm):04876         ;       A       = FCB number for opened file
                      (       ddos12.asm):04877         ;       B       = Error code 
                      (       ddos12.asm):04878         ;       Y       = ptr to extension
                      (       ddos12.asm):04879         ;
                      (       ddos12.asm):04880         
D6D4                  (       ddos12.asm):04881         DosGetFilenameAndOpen   
D6D4 108EDF90         (       ddos12.asm):04882                 LDY     #DosExtNone             ; Point to Blank extension
                      (       ddos12.asm):04883         
D6D8                  (       ddos12.asm):04884         DosGetFilenameAndOpenExt   
D6D8 3420             (       ddos12.asm):04885                 PSHS    Y                       ; save extension pointer
D6DA BD8887           (       ddos12.asm):04886                 JSR     >VarGetStr              ; get string into temp variable
D6DD BD8877           (       ddos12.asm):04887                 JSR     >VarGetExpr             ; Get address of string in FAC
D6E0 3520             (       ddos12.asm):04888                 PULS    Y
                      (       ddos12.asm):04889                 
D6E2                  (       ddos12.asm):04890         DosOpenFileExtY   
D6E2 9E52             (       ddos12.asm):04891                 LDX     <FPA0+2                 ; get address of filename string
D6E4 3410             (       ddos12.asm):04892                 PSHS    X
D6E6 E684             (       ddos12.asm):04893                 LDB     ,X                      ; Get string length
D6E8 AE02             (       ddos12.asm):04894                 LDX     2,X                     ; Get pointer to actual string data
D6EA BDC7B7           (       ddos12.asm):04895                 JSR     >DosValidateAndOpen     ; Validate & open file (if valid)
D6ED 3510             (       ddos12.asm):04896                 PULS    X
D6EF 3406             (       ddos12.asm):04897                 PSHS    D
D6F1 BD8D9F           (       ddos12.asm):04898                 JSR     >VarDelVar              ; delete var
D6F4 3506             (       ddos12.asm):04899                 PULS    D
D6F6 5D               (       ddos12.asm):04900                 TSTB                            ; Test error and set flags
D6F7 39               (       ddos12.asm):04901                 RTS
                      (       ddos12.asm):04902         
D6F8 7EC69E           (       ddos12.asm):04903         LD6F8   JMP     >DosHookSysError
                      (       ddos12.asm):04904         
                      (       ddos12.asm):04905         ; 
                      (       ddos12.asm):04906         ; Close 1 or all files.
                      (       ddos12.asm):04907         ;
                      (       ddos12.asm):04908         
D6FB                  (       ddos12.asm):04909         DosCloseAllFiles  
                      (       ddos12.asm):04910                 ifdef   PGSFix
                      (       ddos12.asm):04911                 LDA     #$09                    ; set current control block to 9
                      (       ddos12.asm):04912                 else
D6FB 860A             (       ddos12.asm):04913                 LDA     #$0A                    ; set current control block to 10
                      (       ddos12.asm):04914                 endc
D6FD 97F1             (       ddos12.asm):04915                 STA     <DosCurrCtrlBlk
                      (       ddos12.asm):04916                 
D6FF BDCED3           (       ddos12.asm):04917         LD6FF   JSR     >DosCloseFile2          ; Try to close the file for this block
D702 2619             (       ddos12.asm):04918                 BNE     LD71D                   ; error : call error handler
                      (       ddos12.asm):04919                 
D704 0AF1             (       ddos12.asm):04920                 DEC     <DosCurrCtrlBlk         ; do next
D706 2AF7             (       ddos12.asm):04921                 BPL     LD6FF
                      (       ddos12.asm):04922                 
D708 0FF6             (       ddos12.asm):04923         LD708   CLR     <DosIOInProgress        ; flag no dos io 
D70A 39               (       ddos12.asm):04924         LD70A   RTS
                      (       ddos12.asm):04925         
                      (       ddos12.asm):04926         ; The code between LD70B to the instruction before LD71D seems unused.....
D70B 2FFD             (       ddos12.asm):04927         LD70B   BLE     LD70A
D70D AEE4             (       ddos12.asm):04928                 LDX     ,S
D70F 8CB7EE           (       ddos12.asm):04929                 CMPX    #$B7EE
D712 26F6             (       ddos12.asm):04930                 BNE     LD70A
D714 3262             (       ddos12.asm):04931                 LEAS    2,S
D716 D7EB             (       ddos12.asm):04932                 STB     <DosDriveNo
D718 BDCEBB           (       ddos12.asm):04933                 JSR     >DOSCloseAll
D71B 27EB             (       ddos12.asm):04934                 BEQ     LD708
                      (       ddos12.asm):04935         
D71D 7EC69E           (       ddos12.asm):04936         LD71D   JMP     >DosHookSysError
                      (       ddos12.asm):04937         
D720                  (       ddos12.asm):04938         DosHookReadInput   
D720 8DD9             (       ddos12.asm):04939                 BSR     DosCloseAllFiles        ; close all files
D722 7EDB27           (       ddos12.asm):04940                 JMP     >CheckAndDoAuto         ; check see if auto active, if so do it
                      (       ddos12.asm):04941         
                      (       ddos12.asm):04942         ;
                      (       ddos12.asm):04943         ; CREATE command dispatch routine
                      (       ddos12.asm):04944         ;
                      (       ddos12.asm):04945         ; Syntax :
                      (       ddos12.asm):04946         ;
                      (       ddos12.asm):04947         ;       CREATE "filename",size_in_bytes
                      (       ddos12.asm):04948         ;
                      (       ddos12.asm):04949         
D725                  (       ddos12.asm):04950         CmdCreate   
D725 BDD6C8           (       ddos12.asm):04951                 JSR     >DosValidateAndOpenDAT  ; validate and open the supplied filename
D728 2708             (       ddos12.asm):04952                 BEQ     LD732                   ; branch if no error
                      (       ddos12.asm):04953                 
D72A C19E             (       ddos12.asm):04954                 CMPB    #ErrFE          ; check for file exists
D72C 2704             (       ddos12.asm):04955                 BEQ     LD732                   ; if it exists just set length
                      (       ddos12.asm):04956                 
D72E C1A0             (       ddos12.asm):04957                 CMPB    #ErrNE          ; File does not exist error
D730 26EB             (       ddos12.asm):04958                 BNE     LD71D                   ; call error handler
                      (       ddos12.asm):04959                 
D732 96F1             (       ddos12.asm):04960         LD732   LDA     <DosCurrCtrlBlk         ; get current control block
D734 BDCF14           (       ddos12.asm):04961                 JSR     >DOSCreateFile          ; go create the file
D737 26E4             (       ddos12.asm):04962                 BNE     LD71D                   ; if error, call the error handler
                      (       ddos12.asm):04963                 
D739 9DA5             (       ddos12.asm):04964                 JSR     <BasChrGetCurr          ; get current character from basic
D73B 2736             (       ddos12.asm):04965                 BEQ     LD773                   ; nothing, return, crate zero length file
                      (       ddos12.asm):04966                 
D73D BD89AA           (       ddos12.asm):04967                 JSR     >VarCKComma             ; syntax check for comma 
D740 BD8887           (       ddos12.asm):04968                 JSR     >VarGetStr
                      (       ddos12.asm):04969                 
D743 BDD884           (       ddos12.asm):04970                 JSR     >Get24bitUA             ; get filesize?
D746 0D51             (       ddos12.asm):04971         LD746   TST     <FPA0+1
D748 2712             (       ddos12.asm):04972                 BEQ     LD75C
                      (       ddos12.asm):04973                 
D74A CCFF00           (       ddos12.asm):04974                 LDD     #$FF00                  ; claculate ammount to extend file by
D74D 8D1F             (       ddos12.asm):04975                 BSR     LD76E
                      (       ddos12.asm):04976                 
D74F DC52             (       ddos12.asm):04977                 LDD     <FPA0+2
D751 83FF00           (       ddos12.asm):04978                 SUBD    #$FF00
D754 DD52             (       ddos12.asm):04979                 STD     <FPA0+2
D756 24EE             (       ddos12.asm):04980                 BCC     LD746
                      (       ddos12.asm):04981                 
D758 0A51             (       ddos12.asm):04982                 DEC     <FPA0+1
D75A 26EA             (       ddos12.asm):04983                 BNE     LD746
                      (       ddos12.asm):04984                 
D75C DC52             (       ddos12.asm):04985         LD75C   LDD     <FPA0+2
D75E 27AA             (       ddos12.asm):04986                 BEQ     LD70A
                      (       ddos12.asm):04987                 
D760 1083FF00         (       ddos12.asm):04988                 CMPD    #$FF00
D764 2308             (       ddos12.asm):04989                 BLS     LD76E
                      (       ddos12.asm):04990                 
D766 83FF00           (       ddos12.asm):04991                 SUBD    #$FF00
D769 8D03             (       ddos12.asm):04992                 BSR     LD76E
                      (       ddos12.asm):04993                 
D76B CCFF00           (       ddos12.asm):04994                 LDD     #$FF00
                      (       ddos12.asm):04995         
D76E BDCBEC           (       ddos12.asm):04996         LD76E   JSR     >ExtendFile             ; extend file
D771 26AA             (       ddos12.asm):04997                 BNE     LD71D                   ; call error handler if error
D773 39               (       ddos12.asm):04998         LD773   RTS
                      (       ddos12.asm):04999         
                      (       ddos12.asm):05000         ;
                      (       ddos12.asm):05001         ; Remove a file from disk directory, deallocate any space on the disk
                      (       ddos12.asm):05002         ; for this file.
                      (       ddos12.asm):05003         ;
                      (       ddos12.asm):05004         ;   KILL "filename"
                      (       ddos12.asm):05005         ;
                      (       ddos12.asm):05006         
D774                  (       ddos12.asm):05007         CmdKill   
D774 BDD6D4           (       ddos12.asm):05008                 JSR     >DosGetFilenameAndOpen  ; find the filename and open it
D777 2605             (       ddos12.asm):05009                 BNE     LD77E                   ; error, exit
                      (       ddos12.asm):05010                 
D779 BDCFB6           (       ddos12.asm):05011                 JSR     >DOSDeleteFile          ; delete the file
D77C 278A             (       ddos12.asm):05012                 BEQ     LD708                   ; no error, return to basic
                      (       ddos12.asm):05013                 
D77E 7EC69E           (       ddos12.asm):05014         LD77E   JMP     >DosHookSysError        ; call error handler
                      (       ddos12.asm):05015         
                      (       ddos12.asm):05016         ;
                      (       ddos12.asm):05017         ; Protect/unprotect a file.
                      (       ddos12.asm):05018         ;
                      (       ddos12.asm):05019         ;   PROTECT "filename"          turns ON protection
                      (       ddos12.asm):05020         ;   PROTECT ON "filename"       turns ON protection
                      (       ddos12.asm):05021         ;   PROTECT OFF "filename"      turns OFF protection
                      (       ddos12.asm):05022         ;
                      (       ddos12.asm):05023         
D781                  (       ddos12.asm):05024         CmdProtect   
D781 4D               (       ddos12.asm):05025                 TSTA                            ; test current character
D782 2A0A             (       ddos12.asm):05026                 BPL     BasProtectOn            ; go get filename, protect on
                      (       ddos12.asm):05027                 
D784 81C2             (       ddos12.asm):05028                 CMPA    #DTokOFF                ; 'OFF' token?
D786 2718             (       ddos12.asm):05029                 BEQ     BasProtectOff           ; yep go deal with it
                      (       ddos12.asm):05030                 
D788 8188             (       ddos12.asm):05031                 CMPA    #DTokON                 ; 'ON' token
D78A 1026B226         (       ddos12.asm):05032                 LBNE    BasSNError              ; nope, SN error
                      (       ddos12.asm):05033         
D78E                  (       ddos12.asm):05034         BasProtectOn
D78E 8D08             (       ddos12.asm):05035                 BSR     LD798                   ; get filename
D790 C601             (       ddos12.asm):05036                 LDB     #$01                    ; flag protect on
D792 BDD09D           (       ddos12.asm):05037         LD792   JSR     DOSProtectMC            ; go turn it off/on
D795 26E7             (       ddos12.asm):05038                 BNE     LD77E                   ; Go handle errors
D797 39               (       ddos12.asm):05039                 RTS
                      (       ddos12.asm):05040         
D798 9D9F             (       ddos12.asm):05041         LD798   JSR     <BasChrGet              ; get a character from basic
D79A BDD6D4           (       ddos12.asm):05042                 JSR     DosGetFilenameAndOpen   ; get the filename and open file
D79D 2625             (       ddos12.asm):05043                 BNE     LD7C4                   ; Go handle errors
D79F 39               (       ddos12.asm):05044                 RTS
                      (       ddos12.asm):05045         
D7A0                  (       ddos12.asm):05046         BasProtectOff   
D7A0 8DF6             (       ddos12.asm):05047                 BSR     LD798                   ; go get filename
D7A2 5F               (       ddos12.asm):05048                 CLRB                            ; flag protect off
D7A3 20ED             (       ddos12.asm):05049                 BRA     LD792                   ; go do it
                      (       ddos12.asm):05050         
                      (       ddos12.asm):05051         ;
                      (       ddos12.asm):05052         ; Rename a file.
                      (       ddos12.asm):05053         ;
                      (       ddos12.asm):05054         ;   RENAME "oldname" TO "newname"
                      (       ddos12.asm):05055         ;
                      (       ddos12.asm):05056         
D7A5                  (       ddos12.asm):05057         CmdRename   
D7A5 BDD6D4           (       ddos12.asm):05058                 JSR     >DosGetFilenameAndOpen  ; get first filename and open it
D7A8 261A             (       ddos12.asm):05059                 BNE     LD7C4                   ; error, exit
                      (       ddos12.asm):05060                 
D7AA 3402             (       ddos12.asm):05061                 PSHS    A                       ; save FCB no
D7AC C6BC             (       ddos12.asm):05062                 LDB     #DTokTO                 ; check for 'TO' token
D7AE BD89AC           (       ddos12.asm):05063                 JSR     >VarCKChar              ; syntax check for it
                      (       ddos12.asm):05064                 
D7B1 BDD6D4           (       ddos12.asm):05065                 JSR     >DosGetFilenameAndOpen  ; get second filename and open
D7B4 270C             (       ddos12.asm):05066                 BEQ     LD7C2                   ; generate error
                      (       ddos12.asm):05067                 
D7B6 C1A0             (       ddos12.asm):05068                 CMPB    #ErrNE                  ; Error from open "Not exist"?
D7B8 260A             (       ddos12.asm):05069                 BNE     LD7C4                   ; no, real error
                      (       ddos12.asm):05070                 
D7BA 3502             (       ddos12.asm):05071                 PULS    A                       ; restore FCB no
D7BC BDD0CF           (       ddos12.asm):05072                 JSR     >DOSRename              ; go change the name.
D7BF 2603             (       ddos12.asm):05073                 BNE     LD7C4                   ; deal with error
D7C1 39               (       ddos12.asm):05074                 RTS
                      (       ddos12.asm):05075         
D7C2 C69E             (       ddos12.asm):05076         LD7C2   LDB     #ErrFE                  ; File exists error for destinatiion file
D7C4 7EC69E           (       ddos12.asm):05077         LD7C4   JMP     >DosHookSysError        ; deal with errors
                      (       ddos12.asm):05078         
                      (       ddos12.asm):05079         ;
                      (       ddos12.asm):05080         ; Basic FLREAD.
                      (       ddos12.asm):05081         ; 
                      (       ddos12.asm):05082         
D7C7                  (       ddos12.asm):05083         CmdFLRead   
D7C7 8D0D             (       ddos12.asm):05084                 BSR     FLReadSetup             ; get setup for read open file etc
D7C9 86FF             (       ddos12.asm):05085                 LDA     #$FF                    ; flag FLREAD
D7CB B70612           (       ddos12.asm):05086                 STA     DosFlFreadFlag
D7CE BDD969           (       ddos12.asm):05087                 JSR     >LD969                  ; do the read
D7D1 8D30             (       ddos12.asm):05088                 BSR     LD803                   ; fix the pointers
D7D3 7E9DD9           (       ddos12.asm):05089                 JMP     >BasLineInputEntry      ; finish off input put it into string
                      (       ddos12.asm):05090                 
                      (       ddos12.asm):05091         
D7D6                  (       ddos12.asm):05092         FLReadSetup   
D7D6 BDD6C8           (       ddos12.asm):05093                 JSR     >DosValidateAndOpenDAT  ; validate filename and open it
D7D9 2652             (       ddos12.asm):05094                 BNE     LD82D                   ; error, exit
                      (       ddos12.asm):05095                 
D7DB BDD830           (       ddos12.asm):05096                 JSR     >FLRWGetNamePos         ; get name of file, and filepointer pos
D7DE BDCEAC           (       ddos12.asm):05097                 JSR     >DosFCBNoToAddr         ; get address of FCB in X
                      (       ddos12.asm):05098                 
D7E1 7D067E           (       ddos12.asm):05099                 TST     DosTemp2                ; did we set the filepointer
D7E4 270A             (       ddos12.asm):05100                 BEQ     LD7F0                   ; branch if not
                      (       ddos12.asm):05101                 
D7E6 FE0664           (       ddos12.asm):05102                 LDU     DosFWriteAddr           ; get offset to read from
D7E9 F60666           (       ddos12.asm):05103                 LDB     DosFWriteAddr+2
D7EC EF0C             (       ddos12.asm):05104                 STU     FCBFilePointer,X        ; copy to FCB
D7EE E70E             (       ddos12.asm):05105                 STB     FCBFilePointer+2,X
                      (       ddos12.asm):05106                 
D7F0 BDD9DC           (       ddos12.asm):05107         LD7F0   JSR     >LD9DC                  ; check and read file
D7F3 8E02DC           (       ddos12.asm):05108                 LDX     #BasLinInpBuff          ; point at basic input buffer
D7F6 6F84             (       ddos12.asm):05109                 CLR     ,X                      ; clear fist byte
D7F8 9D9F             (       ddos12.asm):05110                 JSR     <BasChrGet              ; go read from buffer.
D7FA 39               (       ddos12.asm):05111                 RTS                             
                      (       ddos12.asm):05112         
                      (       ddos12.asm):05113         ;
                      (       ddos12.asm):05114         ; Basic FREAD command
                      (       ddos12.asm):05115         ;
                      (       ddos12.asm):05116         ; FREAD "filename",FROM xx, FOR yy; variable list
                      (       ddos12.asm):05117         ;
                      (       ddos12.asm):05118         ;       0 > xx > 350208
                      (       ddos12.asm):05119         ;       0 > yy > 255
                      (       ddos12.asm):05120         ;
                      (       ddos12.asm):05121          
D7FB                  (       ddos12.asm):05122         CmdFRead   
D7FB 8DD9             (       ddos12.asm):05123                 BSR     FLReadSetup             ; get setup for read open file etc
D7FD 7F0612           (       ddos12.asm):05124                 CLR     DosFlFreadFlag          ; flag FREAD
                      (       ddos12.asm):05125                 
D800 BD877A           (       ddos12.asm):05126                 JSR     >CmdReadFromX           ; read  the input
                      (       ddos12.asm):05127         
                      (       ddos12.asm):05128         ; give what we didn't use back... this relies on TempL and TempC
                      (       ddos12.asm):05129         ; being in conecutive memory locations.
                      (       ddos12.asm):05130         ; Count of read bytes ios in TempC:TempL
                      (       ddos12.asm):05131         ;
D803 BDCEAC           (       ddos12.asm):05132         LD803   JSR     >DosFCBNoToAddr         ; get address of FCB
D806 F60604           (       ddos12.asm):05133                 LDB     TempL                   ; is there anything left?       
D809 270E             (       ddos12.asm):05134                 BEQ     LD819                   ; no
                      (       ddos12.asm):05135                 
D80B 7F0603           (       ddos12.asm):05136                 CLR     TempL-1                 ; clear remainder count MSB
D80E EC0D             (       ddos12.asm):05137                 LDD     FCBFilePointer+1,X      ; get filepointer
D810 B30603           (       ddos12.asm):05138                 SUBD    TempL-1                 ; subtract ammount read
D813 ED0D             (       ddos12.asm):05139                 STD     FCBFilePointer+1,X      ; save it back
D815 2402             (       ddos12.asm):05140                 BCC     LD819                   ; any carry to MSB?
D817 6A0C             (       ddos12.asm):05141                 DEC     FCBFilePointer,X        ; yes do carry
                      (       ddos12.asm):05142                 
D819 0DF4             (       ddos12.asm):05143         LD819   TST     <DosRecLenFlag          ; test record length flag       
D81B 270D             (       ddos12.asm):05144                 BEQ     LD82A                   ; zero, exit, no FOR statement
                      (       ddos12.asm):05145                 
D81D D6F3             (       ddos12.asm):05146                 LDB     <DosNoBytesMove         ; check number of bytes specified in FOR
D81F 2709             (       ddos12.asm):05147                 BEQ     LD82A                   ; zero, exit
                      (       ddos12.asm):05148                 
D821 4F               (       ddos12.asm):05149                 CLRA                            ; clear MSB
D822 E30D             (       ddos12.asm):05150                 ADDD    FCBFilePointer+1,X      ; add FOR to filepointer
D824 ED0D             (       ddos12.asm):05151                 STD     FCBFilePointer+1,X
D826 2402             (       ddos12.asm):05152                 BCC     LD82A                   ; branch if no carry
D828 6C0C             (       ddos12.asm):05153                 INC     FCBFilePointer,X        ; do carry
                      (       ddos12.asm):05154         
D82A 0F6F             (       ddos12.asm):05155         LD82A   CLR     <TextDevN               ; input back to console
D82C 39               (       ddos12.asm):05156         LD82C   RTS
                      (       ddos12.asm):05157         
D82D 7EC69E           (       ddos12.asm):05158         LD82D   JMP     >DosHookSysError        ; call error handler
                      (       ddos12.asm):05159         
D830                  (       ddos12.asm):05160         FLRWGetNamePos   
D830 BD9C76           (       ddos12.asm):05161                 JSR     >BasChkDirect           ; check for direct mode, error if so
D833 96F1             (       ddos12.asm):05162                 LDA     <DosCurrCtrlBlk         ; get current FCB no
D835 BDCE79           (       ddos12.asm):05163                 JSR     >DOSGetFLen             ; get file length
D838 26F3             (       ddos12.asm):05164                 BNE     LD82D                   ; branch if error
                      (       ddos12.asm):05165                 
D83A FF0664           (       ddos12.asm):05166                 STU     DosFWriteAddr           ; save file length, as write address
D83D B70666           (       ddos12.asm):05167                 STA     DosFWriteAddr+2         ; so we default to appending to the file
                      (       ddos12.asm):05168                 
D840 0FF4             (       ddos12.asm):05169                 CLR     <DosRecLenFlag          ; clear record length
D842 7F067E           (       ddos12.asm):05170                 CLR     DosTemp2                ; clear temp var
D845 8601             (       ddos12.asm):05171                 LDA     #DevDisk                ; set device number to disk                     
D847 976F             (       ddos12.asm):05172                 STA     <TextDevN
                      (       ddos12.asm):05173                 
D849 9DA5             (       ddos12.asm):05174         LD849   JSR     <BasChrGetCurr          ; get current character from basic
D84B 813B             (       ddos12.asm):05175                 CMPA    #';'                    ; is it a semicolon?    
D84D 27DD             (       ddos12.asm):05176                 BEQ     LD82C                   ; yep get data to read/write
                      (       ddos12.asm):05177                 
D84F BD89AA           (       ddos12.asm):05178                 JSR     >VarCKComma             ; syntax check for comma
D852 81E5             (       ddos12.asm):05179                 CMPA    #DDTokFROM              ; is it 'FROM' token?
D854 2614             (       ddos12.asm):05180                 BNE     LD86A                   ; no, deal with it
                      (       ddos12.asm):05181                 
D856 9D9F             (       ddos12.asm):05182                 JSR     <BasChrGet              ; get next character from basic
D858 BD8887           (       ddos12.asm):05183                 JSR     >VarGetStr              ; get filepointer pos to read/write
D85B 8D27             (       ddos12.asm):05184                 BSR     Get24bitUA              ; convert it to 24 bit in U:A
                      (       ddos12.asm):05185                 
D85D FF0664           (       ddos12.asm):05186                 STU     DosFWriteAddr           ; update the write address
D860 B70666           (       ddos12.asm):05187                 STA     DosFWriteAddr+2         ; 
D863 86FF             (       ddos12.asm):05188                 LDA     #$FF                    ; set DosTemp2 flag
D865 B7067E           (       ddos12.asm):05189                 STA     DosTemp2
D868 20DF             (       ddos12.asm):05190                 BRA     LD849                   ; loop again
                      (       ddos12.asm):05191         
D86A 8180             (       ddos12.asm):05192         LD86A   CMPA    #DTokFOR                ; for token?
D86C 260D             (       ddos12.asm):05193                 BNE     GenBasSNError           ; nope, generate SN error
                      (       ddos12.asm):05194                 
D86E 9D9F             (       ddos12.asm):05195                 JSR     <BasChrGet              ; get it from basic
D870 BDC63F           (       ddos12.asm):05196                 JSR     >Get8BitorError         ; go get an 8 bit record size
                      (       ddos12.asm):05197                 
D873 D7F3             (       ddos12.asm):05198                 STB     <DosNoBytesMove         ; save record size
D875 C6FF             (       ddos12.asm):05199                 LDB     #$FF                    ; flag record size used
D877 D7F4             (       ddos12.asm):05200                 STB     <DosRecLenFlag          
D879 20CE             (       ddos12.asm):05201                 BRA     LD849
                      (       ddos12.asm):05202         
D87B                  (       ddos12.asm):05203         GenBasSNError   
D87B 7E89B4           (       ddos12.asm):05204                 JMP     >BasSNError             ; generate syntax error
                      (       ddos12.asm):05205         
D87E                  (       ddos12.asm):05206         GenBasFCError   
D87E 7E8B8D           (       ddos12.asm):05207                 JMP     >BasFCError             ; generate FC error
                      (       ddos12.asm):05208         
D881                  (       ddos12.asm):05209         GenBasTMError   
D881 7E8882           (       ddos12.asm):05210                 JMP     >BasTMError             ; generate TM error
                      (       ddos12.asm):05211         
                      (       ddos12.asm):05212         ; Get a 24 bit number in U:A ?
D884                  (       ddos12.asm):05213         Get24bitUA   
D884 0D54             (       ddos12.asm):05214                 TST     <FP0SGN                 ; test sign of mantissa
D886 2BF6             (       ddos12.asm):05215                 BMI     GenBasFCError           ; if minus, generate FC error
                      (       ddos12.asm):05216                 
D888 0D06             (       ddos12.asm):05217                 TST     <BasVarType             ; test variable type
D88A 26F5             (       ddos12.asm):05218                 BNE     GenBasTMError           ; if not numeric generate TM error
                      (       ddos12.asm):05219                 
D88C 86A0             (       ddos12.asm):05220                 LDA     #$A0                                            
D88E 904F             (       ddos12.asm):05221                 SUBA    <FP0EXP                 ; calculate number of shifts to do
D890 270B             (       ddos12.asm):05222                 BEQ     LD89D                   ; branch if zero, no ajustment needed
                      (       ddos12.asm):05223                 
D892 0450             (       ddos12.asm):05224         LD892   LSR     <FPA0                   ; rotate / shift FPA0, A times
D894 0651             (       ddos12.asm):05225                 ROR     <FPA0+1
D896 0652             (       ddos12.asm):05226                 ROR     <FPA0+2
D898 0653             (       ddos12.asm):05227                 ROR     <FPA0+3
D89A 4A               (       ddos12.asm):05228                 DECA
D89B 26F5             (       ddos12.asm):05229                 BNE     LD892
                      (       ddos12.asm):05230                 
D89D DE51             (       ddos12.asm):05231         LD89D   LDU     <FPA0+1                 ; return in U:A
D89F 9653             (       ddos12.asm):05232                 LDA     <FPA0+3
D8A1 39               (       ddos12.asm):05233                 RTS
                      (       ddos12.asm):05234         
D8A2 7EC69E           (       ddos12.asm):05235         LD8A2   JMP     >DosHookSysError        ; call error handler
                      (       ddos12.asm):05236         
                      (       ddos12.asm):05237         ; 
                      (       ddos12.asm):05238         ; basic FWRITE command
                      (       ddos12.asm):05239         ;
                      (       ddos12.asm):05240         ; FWRITE "filename",AT xx, FOR yy; variable list
                      (       ddos12.asm):05241         ;
                      (       ddos12.asm):05242         ;       0 > xx > 350208
                      (       ddos12.asm):05243         ;       0 > yy > 255
                      (       ddos12.asm):05244         ;
                      (       ddos12.asm):05245         
D8A5                  (       ddos12.asm):05246         CmdFWrite   
D8A5 BDD6C8           (       ddos12.asm):05247                 JSR     >DosValidateAndOpenDAT  ; open and validate file
D8A8 2709             (       ddos12.asm):05248                 BEQ     LD8B3                   ; no error, branch on
                      (       ddos12.asm):05249                 
D8AA C1A0             (       ddos12.asm):05250                 CMPB    #ErrNE                  ; Does the file not exist?
D8AC 26F4             (       ddos12.asm):05251                 BNE     LD8A2                   ; no it was another, error handle it.
                      (       ddos12.asm):05252                 
D8AE BDCF14           (       ddos12.asm):05253                 JSR     >DOSCreateFile          ; create the file if it does not exist
D8B1 26EF             (       ddos12.asm):05254                 BNE     LD8A2                   ; error handle it
                      (       ddos12.asm):05255                 
D8B3 BDD830           (       ddos12.asm):05256         LD8B3   JSR     >FLRWGetNamePos         ; get name and filepointer to start writing at
D8B6 BDD274           (       ddos12.asm):05257                 JSR     >FindFreeDiskBuffer     ; find a free disk buffer, to write data into
D8B9 26E7             (       ddos12.asm):05258                 BNE     LD8A2                   ; error, exit
                      (       ddos12.asm):05259                 
D8BB BF060B           (       ddos12.asm):05260                 STX     DosFWriteBPtr           ; save the buffer pointer 
D8BE 8655             (       ddos12.asm):05261                 LDA     #BuffInUse              ; mark disk buffer in use       
D8C0 A702             (       ddos12.asm):05262                 STA     BuffFlag,X              
D8C2 0FF2             (       ddos12.asm):05263                 CLR     <DosBytesInDTA          ; no bytes ready to write       
                      (       ddos12.asm):05264                 
D8C4 9D9F             (       ddos12.asm):05265                 JSR     <BasChrGet              ; get next character from basic
D8C6 BD903D           (       ddos12.asm):05266                 JSR     >CmdPrint               ; write it
                      (       ddos12.asm):05267                 
D8C9 0DF4             (       ddos12.asm):05268                 TST     <DosRecLenFlag          ; test record length
D8CB 270B             (       ddos12.asm):05269                 BEQ     LD8D8                   ; not used, skip on
                      (       ddos12.asm):05270                 
D8CD D6F3             (       ddos12.asm):05271                 LDB     <DosNoBytesMove         ; get record size
D8CF 2707             (       ddos12.asm):05272                 BEQ     LD8D8                   ; branch if buffer full?
                      (       ddos12.asm):05273                 
D8D1 8620             (       ddos12.asm):05274                 LDA     #' '                    ; else fill remaing buffer with spaces
D8D3 8D48             (       ddos12.asm):05275         LD8D3   BSR     LD91D                   ; put in buffer
D8D5 5A               (       ddos12.asm):05276                 DECB                            ; decrement count
D8D6 26FB             (       ddos12.asm):05277                 BNE     LD8D3                   ; branch if any left
                      (       ddos12.asm):05278                 
D8D8 0DF2             (       ddos12.asm):05279         LD8D8   TST     <DosBytesInDTA          ; any bytes in buffer?
D8DA 2718             (       ddos12.asm):05280                 BEQ     LD8F4                   ; nope, skip
                      (       ddos12.asm):05281                 
D8DC BE060B           (       ddos12.asm):05282                 LDX     DosFWriteBPtr           ; get pointer to buffer details
D8DF AE05             (       ddos12.asm):05283                 LDX     BuffAddr,X              ; get buffer address
D8E1 4F               (       ddos12.asm):05284                 CLRA                            ; set D to bytes in buffer
D8E2 D6F2             (       ddos12.asm):05285                 LDB     <DosBytesInDTA
D8E4 1F03             (       ddos12.asm):05286                 TFR     D,U                     ; transfer it to U
D8E6 96F1             (       ddos12.asm):05287                 LDA     <DosCurrCtrlBlk         ; get current file no
D8E8 10BE0664         (       ddos12.asm):05288                 LDY     DosFWriteAddr           ; get filepointer to write at
D8EC F60666           (       ddos12.asm):05289                 LDB     DosFWriteAddr+2
                      (       ddos12.asm):05290                 
D8EF BDCB59           (       ddos12.asm):05291                 JSR     >DOSFWrite              ; go write to the file
D8F2 26AE             (       ddos12.asm):05292                 BNE     LD8A2                   ; branch on error
                      (       ddos12.asm):05293                 
D8F4 BE060B           (       ddos12.asm):05294         LD8F4   LDX     DosFWriteBPtr           ; get pointer to buffer details
D8F7 6F02             (       ddos12.asm):05295                 CLR     BuffFlag,X              ; mark buffer as free
D8F9 39               (       ddos12.asm):05296         LD8F9   RTS
                      (       ddos12.asm):05297         
                      (       ddos12.asm):05298         ;
                      (       ddos12.asm):05299         ; Check validity of device number
                      (       ddos12.asm):05300         ;
                      (       ddos12.asm):05301         
D8FA                  (       ddos12.asm):05302         DosHookCheckIONum   
D8FA 2FFD             (       ddos12.asm):05303                 BLE     LD8F9                   ; 0 or less, not disk....
D8FC C104             (       ddos12.asm):05304                 CMPB    #$04                    ; we only use 1
D8FE 2214             (       ddos12.asm):05305                 BHI     LD914                   ; higher, generate DN error
D900 3590             (       ddos12.asm):05306                 PULS    X,PC                    ; restore and return
                      (       ddos12.asm):05307         
                      (       ddos12.asm):05308         ;
                      (       ddos12.asm):05309         ; Check for device open.
                      (       ddos12.asm):05310         ;   If device number is greater than zero, the a DN error is called for.
                      (       ddos12.asm):05311         ;
                      (       ddos12.asm):05312         
D902                  (       ddos12.asm):05313         DosHookOpenDev   
D902 3262             (       ddos12.asm):05314                 LEAS    2,S                     ; drop return address
D904 BD8887           (       ddos12.asm):05315                 JSR     >VarGetStr              ; evaluate expression
D907 BD8DEA           (       ddos12.asm):05316                 JSR     >BasGetStrFirst         ; get first byte of string in B
D90A 3404             (       ddos12.asm):05317                 PSHS    B                       ; save b
D90C BDB7D4           (       ddos12.asm):05318                 JSR     >BasGetDevNo            ; get device number
D90F 5D               (       ddos12.asm):05319                 TSTB                            ; check device number
D910 102FDF21         (       ddos12.asm):05320                 LBLE    CmdOpenEntry            ; >=0, go open it
                      (       ddos12.asm):05321                 
D914 7EB851           (       ddos12.asm):05322         LD914   JMP     >BasDNError             ; device number error
                      (       ddos12.asm):05323         
                      (       ddos12.asm):05324         ;
                      (       ddos12.asm):05325         ; Character output hook.
                      (       ddos12.asm):05326         ;  The hook routine for writing a single byte to a data file.
                      (       ddos12.asm):05327         ;
                      (       ddos12.asm):05328         
D917                  (       ddos12.asm):05329         DosHookCharOut   
D917 0D6F             (       ddos12.asm):05330                 TST     <TextDevN               ; test device number
D919 2FDE             (       ddos12.asm):05331                 BLE     LD8F9                   ; brance if 0 or -ve, not ours                          
                      (       ddos12.asm):05332                 
D91B 3262             (       ddos12.asm):05333                 LEAS    2,S                     ; discard return address
D91D 3476             (       ddos12.asm):05334         LD91D   PSHS    D,X,Y,U                 ; save regs
                      (       ddos12.asm):05335         
D91F D6F4             (       ddos12.asm):05336                 LDB     <DosRecLenFlag          ; buffering flag?
D921 2704             (       ddos12.asm):05337                 BEQ     LD927                   ; no length
                      (       ddos12.asm):05338         
D923 D6F3             (       ddos12.asm):05339                 LDB     <DosNoBytesMove         ; at end of buffer?
D925 2737             (       ddos12.asm):05340                 BEQ     LD95E                   ; write no more
                      (       ddos12.asm):05341         
D927 BE060B           (       ddos12.asm):05342         LD927   LDX     DosFWriteBPtr           ; get buffer detail pointer
D92A AE05             (       ddos12.asm):05343                 LDX     BuffAddr,X              ; get buffer address    
D92C D6F2             (       ddos12.asm):05344                 LDB     <DosBytesInDTA          ; get buffer offset write pointer
D92E 3A               (       ddos12.asm):05345                 ABX                             ; add to buffer pointer
D92F A784             (       ddos12.asm):05346                 STA     ,X                      ; save byte in buffer
                      (       ddos12.asm):05347                 
D931 0AF3             (       ddos12.asm):05348                 DEC     <DosNoBytesMove         ; decrement bytes left counter
D933 0CF2             (       ddos12.asm):05349                 INC     <DosBytesInDTA          ; increment bytes in buffer counter
D935 2627             (       ddos12.asm):05350                 BNE     LD95E                   ; branch if still space in buffer
                      (       ddos12.asm):05351                 
D937 96F1             (       ddos12.asm):05352                 LDA     <DosCurrCtrlBlk         ; get current file no
D939 BE060B           (       ddos12.asm):05353                 LDX     DosFWriteBPtr           ; get buffer detail pointer
D93C AE05             (       ddos12.asm):05354                 LDX     BuffAddr,X              ; get buffer address    
D93E CE0100           (       ddos12.asm):05355                 LDU     #$0100                  ; write 256 bytes
D941 10BE0664         (       ddos12.asm):05356                 LDY     DosFWriteAddr           ; get filepointer
D945 F60666           (       ddos12.asm):05357                 LDB     DosFWriteAddr+2
                      (       ddos12.asm):05358                 
D948 BDCB59           (       ddos12.asm):05359                 JSR     >DOSFWrite              ; go write it
D94B 2703             (       ddos12.asm):05360                 BEQ     LD950                   ; branch if no error
                      (       ddos12.asm):05361                 
D94D 7EC69E           (       ddos12.asm):05362                 JMP     >DosHookSysError        ; call error handler
                      (       ddos12.asm):05363         
D950 FC0665           (       ddos12.asm):05364         LD950   LDD     DosFWriteAddr+1         ; move filepointer on
D953 C30100           (       ddos12.asm):05365                 ADDD    #$0100
D956 2403             (       ddos12.asm):05366                 BCC     LD95B                   ; branch if no carry
D958 7C0664           (       ddos12.asm):05367                 INC     DosFWriteAddr           ; carry if needed
D95B FD0665           (       ddos12.asm):05368         LD95B   STD     DosFWriteAddr+1         ; save pilepointer
                      (       ddos12.asm):05369         
D95E 35F6             (       ddos12.asm):05370         LD95E   PULS    D,X,Y,U,PC              ; resore and return
                      (       ddos12.asm):05371         
                      (       ddos12.asm):05372         ;
                      (       ddos12.asm):05373         ; Hook to scan input from disk.
                      (       ddos12.asm):05374         ;
                      (       ddos12.asm):05375         ; Should do:
                      (       ddos12.asm):05376         ;   If string:
                      (       ddos12.asm):05377         ;     do not remove leading spaces.
                      (       ddos12.asm):05378         ;     Terminate input on:
                      (       ddos12.asm):05379         ;       $0D - CR
                      (       ddos12.asm):05380         ;       $2C - comma
                      (       ddos12.asm):05381         ;       EOF
                      (       ddos12.asm):05382         ;
                      (       ddos12.asm):05383         ;   If numeric:
                      (       ddos12.asm):05384         ;     remove leading spaces
                      (       ddos12.asm):05385         ;     Terminate on:
                      (       ddos12.asm):05386         ;       Any character less than or equal to space.
                      (       ddos12.asm):05387         ;
                      (       ddos12.asm):05388         
     879A             (       ddos12.asm):05389         L879A   EQU     $879A                   ; return point (Dragon)
                      (       ddos12.asm):05390                 
D960                  (       ddos12.asm):05391         DosHookDiskItem   
D960 0D6F             (       ddos12.asm):05392                 TST     <TextDevN               ; test device number
D962 2F95             (       ddos12.asm):05393                 BLE     LD8F9                   ; 0 or -ve, not ours
                      (       ddos12.asm):05394                 
D964 8E879A           (       ddos12.asm):05395                 LDX     #L879A                  ; return point in basic ROM
D967 AFE4             (       ddos12.asm):05396                 STX     ,S                      ; stack it
                      (       ddos12.asm):05397                 
D969 96F4             (       ddos12.asm):05398         LD969   LDA     <DosRecLenFlag          ; reading?
D96B 2704             (       ddos12.asm):05399                 BEQ     LD971                   ; yep
                      (       ddos12.asm):05400                 
D96D 96F3             (       ddos12.asm):05401                 LDA     <DosNoBytesMove         ; check bytes in buffer
D96F 274D             (       ddos12.asm):05402                 BEQ     LD9BE                   ; read no more
                      (       ddos12.asm):05403                 
D971 8E02DD           (       ddos12.asm):05404         LD971   LDX     #BasLinInpBuff+1        ; point at basic line input buffer
D974 D6F2             (       ddos12.asm):05405                 LDB     <DosBytesInDTA          ; current input pointer
D976 F70603           (       ddos12.asm):05406                 STB     TempC                   ; save it in count
D979 3A               (       ddos12.asm):05407                 ABX                             ; add to buffer base
                      (       ddos12.asm):05408                 
D97A F60604           (       ddos12.asm):05409                 LDB     TempL                   ; save number of bytes in buffer
D97D F70611           (       ddos12.asm):05410                 STB     DosRunLoadFlag
D980 5F               (       ddos12.asm):05411                 CLRB                            ; clear byte before current input
D981 E71F             (       ddos12.asm):05412                 STB     -1,X
                      (       ddos12.asm):05413                 
D983 D700             (       ddos12.asm):05414                 STB     <BasBreakFlag           ; clear flag
D985 0AF3             (       ddos12.asm):05415         LD985   DEC     <DosNoBytesMove         
D987 7A0604           (       ddos12.asm):05416                 DEC     TempL
D98A 0CF2             (       ddos12.asm):05417                 INC     <DosBytesInDTA
D98C A680             (       ddos12.asm):05418                 LDA     ,X+                     ; get a byte from buffer
D98E 272E             (       ddos12.asm):05419                 BEQ     LD9BE                   ; done if EOF
                      (       ddos12.asm):05420                 
D990 810D             (       ddos12.asm):05421                 CMPA    #$0D                    ; is it CR?
D992 272A             (       ddos12.asm):05422                 BEQ     LD9BE                   ; yep deal with it
                      (       ddos12.asm):05423                 
D994 7D0612           (       ddos12.asm):05424                 TST     DosFlFreadFlag          ; are we reading a number?
D997 2608             (       ddos12.asm):05425                 BNE     LD9A1                   ; yes, don't check for string terminators
                      (       ddos12.asm):05426                 
D999 812C             (       ddos12.asm):05427                 CMPA    #','                    ; check for comma
D99B 2721             (       ddos12.asm):05428                 BEQ     LD9BE                   ; yep deal with it
                      (       ddos12.asm):05429                 
D99D 813A             (       ddos12.asm):05430                 CMPA    #':'                    ; check for colon
D99F 271D             (       ddos12.asm):05431                 BEQ     LD9BE                   ; yep deal with it
                      (       ddos12.asm):05432                 
D9A1 96F4             (       ddos12.asm):05433         LD9A1   LDA     <DosRecLenFlag          ; get bytes to read     
D9A3 2704             (       ddos12.asm):05434                 BEQ     LD9A9                   ; zero, read no more
                      (       ddos12.asm):05435                 
D9A5 96F3             (       ddos12.asm):05436                 LDA     <DosNoBytesMove         ; 
D9A7 2715             (       ddos12.asm):05437                 BEQ     LD9BE
                      (       ddos12.asm):05438                 
D9A9 5C               (       ddos12.asm):05439         LD9A9   INCB                            ; number of bytes in string
D9AA C1FF             (       ddos12.asm):05440                 CMPB    #$FF                    ; max string length
D9AC 270E             (       ddos12.asm):05441                 BEQ     LD9BC                   ; yep! string full
                      (       ddos12.asm):05442                 
D9AE B60604           (       ddos12.asm):05443                 LDA     TempL                                           
D9B1 26D2             (       ddos12.asm):05444                 BNE     LD985
                      (       ddos12.asm):05445                 
                      (       ddos12.asm):05446         ; read a new buffer of data     
D9B3 D600             (       ddos12.asm):05447                 LDB     <BasBreakFlag           ; 
D9B5 2605             (       ddos12.asm):05448                 BNE     LD9BC
                      (       ddos12.asm):05449                 
D9B7 8D0F             (       ddos12.asm):05450                 BSR     LD9C8
D9B9 5F               (       ddos12.asm):05451                 CLRB
D9BA 20C9             (       ddos12.asm):05452                 BRA     LD985
                      (       ddos12.asm):05453         
                      (       ddos12.asm):05454         ; return to input (basic)
D9BC 3001             (       ddos12.asm):05455         LD9BC   LEAX    1,X                     ; increment past last byte              
D9BE F60603           (       ddos12.asm):05456         LD9BE   LDB     TempC                   ; get count
D9C1 6F1F             (       ddos12.asm):05457                 CLR     -1,X                    ; clear line termination byte
D9C3 8E02DC           (       ddos12.asm):05458                 LDX     #BasLinInpBuff          ; point at buffer
D9C6 3A               (       ddos12.asm):05459                 ABX                             ; add offset
D9C7 39               (       ddos12.asm):05460                 RTS
                      (       ddos12.asm):05461         
D9C8 BDCEAC           (       ddos12.asm):05462         LD9C8   JSR     >DosFCBNoToAddr         ; get address of FCB for file
D9CB 4F               (       ddos12.asm):05463                 CLRA                            ; clear MSB
D9CC F60611           (       ddos12.asm):05464                 LDB     DosRunLoadFlag          ; load B with ammount to read
D9CF 12               (       ddos12.asm):05465                 NOP
D9D0 3406             (       ddos12.asm):05466                 PSHS    D                       ; save D
D9D2 EC0D             (       ddos12.asm):05467                 LDD     FCBFilePointer+1,X      ; get filepointer
D9D4 A3E1             (       ddos12.asm):05468                 SUBD    ,S++                    ; move it back?
D9D6 ED0D             (       ddos12.asm):05469                 STD     FCBFilePointer+1,X
D9D8 2402             (       ddos12.asm):05470                 BCC     LD9DC
D9DA 6A0C             (       ddos12.asm):05471                 DEC     FCBFilePointer,X
                      (       ddos12.asm):05472                 
D9DC 3460             (       ddos12.asm):05473         LD9DC   PSHS    Y,U                     ; save regs
D9DE CE00FF           (       ddos12.asm):05474                 LDU     #$00FF                  ; ammount to try reading
D9E1 8D1E             (       ddos12.asm):05475                 BSR     LDA01                   ; check enough bytes left
                      (       ddos12.asm):05476                 
D9E3 CE02DD           (       ddos12.asm):05477                 LDU     #DBasLinInpBuff+1       ; point at basicline buffer
D9E6 6FCB             (       ddos12.asm):05478                 CLR     D,U                     ; clear byte..... (after end?)
D9E8 96F1             (       ddos12.asm):05479                 LDA     <DosCurrCtrlBlk         ; get current file no
D9EA E60E             (       ddos12.asm):05480                 LDB     FCBFilePointer+2,X      ; get filepointer
D9EC AE0C             (       ddos12.asm):05481                 LDX     FCBFilePointer,X
D9EE 1E13             (       ddos12.asm):05482                 EXG     X,U                     ; swap X and U to get buffer & offset in correct regs
D9F0 BDC991           (       ddos12.asm):05483                 JSR     >DOSFRead               ; go read the file
D9F3 2609             (       ddos12.asm):05484                 BNE     LD9FE                   ; error, exit
                      (       ddos12.asm):05485                 
D9F5 8E02DD           (       ddos12.asm):05486                 LDX     #DBasLinInpBuff+1       ; point at basicline buffer
D9F8 6F1F             (       ddos12.asm):05487                 CLR     -1,X                    ; clear byte before read data
D9FA 35E0             (       ddos12.asm):05488                 PULS    Y,U,PC                  ; restore and return
                      (       ddos12.asm):05489         
D9FC C69A             (       ddos12.asm):05490         LD9FC   LDB     #ErrPE                  ; read past end of file
D9FE 7EC69E           (       ddos12.asm):05491         LD9FE   JMP     >DosHookSysError        ; call error handler    
                      (       ddos12.asm):05492         
                      (       ddos12.asm):05493         ; take an ammount of bytes we want to read in U, and work out if there
                      (       ddos12.asm):05494         ; are still U bytes in the file to read. This is doen by adding U to
                      (       ddos12.asm):05495         ; the current file pointer, and then comparing it to the file length.
                      (       ddos12.asm):05496         
DA01 3440             (       ddos12.asm):05497         LDA01   PSHS    U                       ; save ammount to load?
DA03 EC0D             (       ddos12.asm):05498                 LDD     FCBFilePointer+1,X      ; get LSW of filepointer
DA05 E3E4             (       ddos12.asm):05499                 ADDD    ,S                      ; add ammount to filepointer
DA07 3406             (       ddos12.asm):05500                 PSHS    D                       ; save it
DA09 A60C             (       ddos12.asm):05501                 LDA     FCBFilePointer,X        ; get MSB of filepointer        
DA0B 8900             (       ddos12.asm):05502                 ADCA    #$00                    ; propagate carry
DA0D A08810           (       ddos12.asm):05503                 SUBA    FCBFileLen,X            ; subtract file length msb
DA10 3506             (       ddos12.asm):05504                 PULS    D                       ; restore LSW of difference, flags untouched
DA12 2512             (       ddos12.asm):05505                 BCS     LDA26                   ; was much at least 64K lower so safe to read
DA14 22E6             (       ddos12.asm):05506                 BHI     LD9FC                   ; error will read past EOF
                      (       ddos12.asm):05507                 
DA16 A38811           (       ddos12.asm):05508                 SUBD    FCBFileLen+1,X          ; sheck the LSW of the filepointer
DA19 230B             (       ddos12.asm):05509                 BLS     LDA26                   ; was lower so safe to read
                      (       ddos12.asm):05510                 
                      (       ddos12.asm):05511         ; if we still have bytes that can be read but have not reached EOF, then work
                      (       ddos12.asm):05512         ; out how many bytes left       
                      (       ddos12.asm):05513                 
DA1B EC8811           (       ddos12.asm):05514                 LDD     FCBFileLen+1,X          ; get the file length
DA1E A30D             (       ddos12.asm):05515                 SUBD    FCBFilePointer+1,X      ; subtract filepointer
DA20 27DA             (       ddos12.asm):05516                 BEQ     LD9FC                   ; special case exactly at EOF
DA22 EDE4             (       ddos12.asm):05517                 STD     ,S                      ; save ammount we can read
DA24 0300             (       ddos12.asm):05518                 COM     <BasBreakFlag           ; ????
                      (       ddos12.asm):05519                 
DA26 ECE4             (       ddos12.asm):05520         LDA26   LDD     ,S                      ; get ammount we can read
DA28 F70604           (       ddos12.asm):05521                 STB     TempL                   ; save LSB (ammount read?)
DA2B F70611           (       ddos12.asm):05522                 STB     DosRunLoadFlag          ; ???
DA2E 7F0603           (       ddos12.asm):05523                 CLR     TempL-1                 ; MSB that we read
DA31 0FF2             (       ddos12.asm):05524                 CLR     <DosBytesInDTA          
DA33 35A0             (       ddos12.asm):05525                 PULS    Y,PC                    ; restore and return
                      (       ddos12.asm):05526         
                      (       ddos12.asm):05527         ;
                      (       ddos12.asm):05528         ; Dir command dispatch routine
                      (       ddos12.asm):05529         ;
                      (       ddos12.asm):05530         ; Syntax :
                      (       ddos12.asm):05531         ;       DIR drivenum    
                      (       ddos12.asm):05532         ;
                      (       ddos12.asm):05533         
DA35 2705             (       ddos12.asm):05534         CmdDir  BEQ     LDA3C                   ; No drive specified, use default
DA37 BDC68F           (       ddos12.asm):05535                 JSR     >GetDriveNoInB          ; Else get from command 
DA3A 2003             (       ddos12.asm):05536                 BRA     LDA3F
                      (       ddos12.asm):05537         
DA3C F6060A           (       ddos12.asm):05538         LDA3C   LDB     DosDefDriveNo           ; Get default drive
                      (       ddos12.asm):05539         
DA3F D7EB             (       ddos12.asm):05540         LDA3F   STB     <DosDriveNo             ; Flag as last drive used
DA41 6FE2             (       ddos12.asm):05541                 CLR     ,-S                     ; make temp on stack (file number on disk counter)
DA43 5F               (       ddos12.asm):05542                 CLRB
                      (       ddos12.asm):05543                 
DA44 BD851B           (       ddos12.asm):05544         LDA44   JSR     >BasPollKeyboard        ; poll keyboard
DA47 BDD1D4           (       ddos12.asm):05545                 JSR     >DOSGetDirEntry         ; go get next entry
DA4A 1026EC50         (       ddos12.asm):05546                 LBNE    DosHookSysError         ; error : exit
                      (       ddos12.asm):05547                 
DA4E A684             (       ddos12.asm):05548                 LDA     ,X                      ; Get Attribute byte
DA50 8508             (       ddos12.asm):05549                 BITA    #AttrEndOfDir           ; Check for end of directory $08
DA52 2646             (       ddos12.asm):05550                 BNE     CmdDirDoneAll           ; Yes : stop processing
                      (       ddos12.asm):05551                 
DA54 8581             (       ddos12.asm):05552                 BITA    #AttrDeleted+AttrIsCont ; Is entry a deleted file, or continuation entry ? $81                          ; and another thing
DA56 263A             (       ddos12.asm):05553                 BNE     CmdDirDoNextEntry       ; yes : do next
                      (       ddos12.asm):05554                 
DA58 3001             (       ddos12.asm):05555                 LEAX    1,X                     ; Point at filename
DA5A C608             (       ddos12.asm):05556                 LDB     #$08                    ; Up to 8 chars
DA5C 8D4C             (       ddos12.asm):05557                 BSR     PrintBCharsFromX        ; Print it
DA5E 862E             (       ddos12.asm):05558                 LDA     #$2E                    ; '.'
DA60 BDB54A           (       ddos12.asm):05559                 JSR     >TextOutChar            ; output period
DA63 C603             (       ddos12.asm):05560                 LDB     #$03                    ; print extension
DA65 8D43             (       ddos12.asm):05561                 BSR     PrintBCharsFromX
                      (       ddos12.asm):05562                 
DA67 A614             (       ddos12.asm):05563                 LDA     -12,X                   ; Point at attributes
DA69 8502             (       ddos12.asm):05564                 BITA    #AttrWriteProt          ; Is this a protected file ?
DA6B 2703             (       ddos12.asm):05565                 BEQ     LDA70                   ; no skip on
DA6D 8670             (       ddos12.asm):05566                 LDA     #'p'                    ; Flag protected $70
DA6F 8C               (       ddos12.asm):05567                 FCB     Skip2
DA70 8620             (       ddos12.asm):05568         LDA70   LDA     #$20                    ; space
DA72 BDB54A           (       ddos12.asm):05569                 JSR     >TextOutChar            ; output attribute byte
DA75 BD90F5           (       ddos12.asm):05570                 JSR     >TextOutSpace           ; And a space
DA78 CEFFFF           (       ddos12.asm):05571                 LDU     #$FFFF
DA7B 8E06BD           (       ddos12.asm):05572                 LDX     #DosFCB0Addr            ; Point at first FCB
DA7E E6E4             (       ddos12.asm):05573                 LDB     ,S                      ; Get file number
DA80 E7881D           (       ddos12.asm):05574                 STB     FCBDiskFileNo,X         ; Save in FCB
                      (       ddos12.asm):05575         
DA83 BDCAF9           (       ddos12.asm):05576                 JSR     >FindFSNinU             ; find last File sector
DA86 1026EC14         (       ddos12.asm):05577                 LBNE    DosHookSysError         ; error : exit
                      (       ddos12.asm):05578         
DA8A BDCE99           (       ddos12.asm):05579                 JSR     >LCE99                  ; add last bytes to length
DA8D 8D28             (       ddos12.asm):05580                 BSR     LDAB7                   ; Print filesize
                      (       ddos12.asm):05581                 
DA8F BD90A1           (       ddos12.asm):05582                 JSR     TextOutCRLF             ; Output EOL
                      (       ddos12.asm):05583         
DA92                  (       ddos12.asm):05584         CmdDirDoNextEntry   
DA92 6CE4             (       ddos12.asm):05585                 INC     ,S                      ; do next
DA94 E6E4             (       ddos12.asm):05586                 LDB     ,S                      ; Get disk file number counter
                      (       ddos12.asm):05587         ;***       CMPB    #$A0                 ; More than max files on disk ?
DA96 C1B4             (       ddos12.asm):05588                 CMPB    #$B4                    ; More than max files on disk ?
DA98 25AA             (       ddos12.asm):05589                 BCS     LDA44                   ; Less, loop again.     
                      (       ddos12.asm):05590         
                      (       ddos12.asm):05591         ;
                      (       ddos12.asm):05592         ; We come here either when we have processed $A0 entries, which is the maximum,
                      (       ddos12.asm):05593         ; or we have reached an entry with the AttrEndOfDir bit set which signals the end
                      (       ddos12.asm):05594         ; of the directory.
                      (       ddos12.asm):05595         ;
                      (       ddos12.asm):05596         
DA9A                  (       ddos12.asm):05597         CmdDirDoneAll   
DA9A 3502             (       ddos12.asm):05598                 PULS    A
DA9C BDD14D           (       ddos12.asm):05599                 JSR     >DOSGetFree             ; Get free bytes on drive
DA9F 4F               (       ddos12.asm):05600                 CLRA
DAA0 1F13             (       ddos12.asm):05601                 TFR     X,U
DAA2 8D13             (       ddos12.asm):05602                 BSR     LDAB7                   ; Display free bytes
DAA4 8EDACD           (       ddos12.asm):05603                 LDX     #BytesFreeMess-1        ; Point to message
DAA7 7E90E5           (       ddos12.asm):05604                 JMP     >TextOutString          ; print it, and return
                      (       ddos12.asm):05605         
                      (       ddos12.asm):05606         ; Print B chars pointed to by X, if char is $00, then output a space.
                      (       ddos12.asm):05607         ; Used to print filenames.
                      (       ddos12.asm):05608         
DAAA                  (       ddos12.asm):05609         PrintBCharsFromX   
DAAA A680             (       ddos12.asm):05610                 LDA     ,X+                     ; Fetch a char
DAAC 2602             (       ddos12.asm):05611                 BNE     PrintBCharsFromX2       ; Is it zero ? no : skip
DAAE 8620             (       ddos12.asm):05612                 LDA     #$20                    ; Replace it with a space
                      (       ddos12.asm):05613         
DAB0                  (       ddos12.asm):05614         PrintBCharsFromX2   
DAB0 BDB54A           (       ddos12.asm):05615                 JSR     >TextOutChar            ; Output it
DAB3 5A               (       ddos12.asm):05616                 DECB                            ; Decrement count
DAB4 26F4             (       ddos12.asm):05617                 BNE     PrintBCharsFromX        ; any left yes : loop again
DAB6 39               (       ddos12.asm):05618                 RTS
                      (       ddos12.asm):05619         
DAB7                  (       ddos12.asm):05620         LDAB7   
                      (       ddos12.asm):05621                 ifdef   PGSFix
                      (       ddos12.asm):05622                 JSR     LDD95                   ; put number in FPA0, normalize it
                      (       ddos12.asm):05623                 JMP     TextOutNumFPA0          ; output it
                      (       ddos12.asm):05624         
DAB7                  (       ddos12.asm):05625         DosHookReadInputFix
                      (       ddos12.asm):05626                 PSHS    U,X,D                   ; save regs
                      (       ddos12.asm):05627                 LDX     #$837D                  ; check source PC on stack
                      (       ddos12.asm):05628                 CMPX    8,S
                      (       ddos12.asm):05629                 BNE     LDACB                   ; nope restore & return
                      (       ddos12.asm):05630                 JSR     DosCloseAllFiles        ; close all files
                      (       ddos12.asm):05631                 BRA     CheckAndDoAutoFix       ; jump to Auto check
DAB7                  (       ddos12.asm):05632         LDACB   PULS    U,X,D,PC                ; restore & return
                      (       ddos12.asm):05633                 NOP
                      (       ddos12.asm):05634                 else
DAB7 DF51             (       ddos12.asm):05635                 STU     <FPA0+1
DAB9 9753             (       ddos12.asm):05636                 STA     <FPA0+3
DABB 0F54             (       ddos12.asm):05637                 CLR     <FP0SGN
DABD 0F50             (       ddos12.asm):05638                 CLR     <FPA0
DABF 0F63             (       ddos12.asm):05639                 CLR     <FPSByte
DAC1 86A0             (       ddos12.asm):05640                 LDA     #$A0
DAC3 974F             (       ddos12.asm):05641                 STA     <FP0EXP
DAC5 BD9165           (       ddos12.asm):05642                 JSR     >VarNormFPA0
DAC8 BD9587           (       ddos12.asm):05643                 JSR     >TextOutNumFPA0+5       ; $9587
DACB 7E90E5           (       ddos12.asm):05644                 JMP     >TextOutString
                      (       ddos12.asm):05645                 endc
                      (       ddos12.asm):05646         
DACE                  (       ddos12.asm):05647         BytesFreeMess
DACE 2046524545204259 (       ddos12.asm):05648                 FCC     / FREE BYTES/
     544553
DAD9 0D0D00           (       ddos12.asm):05649                 FCB     $0D,$0D,$00
                      (       ddos12.asm):05650         
                      (       ddos12.asm):05651         ;
                      (       ddos12.asm):05652         ; Auto command dispatch routine
                      (       ddos12.asm):05653         ;
                      (       ddos12.asm):05654         ; Syntax :
                      (       ddos12.asm):05655         ;
                      (       ddos12.asm):05656         ;       AUTO startline,increment
                      (       ddos12.asm):05657         ;
                      (       ddos12.asm):05658         
DADC                  (       ddos12.asm):05659         CmdAuto 
DADC DC68             (       ddos12.asm):05660                 LDD     <BasCurrentLine         ; Get current line number
DADE 1083FFFF         (       ddos12.asm):05661                 CMPD    #$FFFF                  ; Direct mode ?
DAE2 2703             (       ddos12.asm):05662                 BEQ     LDAE7                   ; yep start numbering
DAE4 7E8B8D           (       ddos12.asm):05663                 JMP     >DBasFCError            ; nope : error
                      (       ddos12.asm):05664         
DAE7 CC0064           (       ddos12.asm):05665         LDAE7   LDD     #AutoStartLine          ; set default start line
DAEA 3406             (       ddos12.asm):05666                 PSHS    D
DAEC C60A             (       ddos12.asm):05667                 LDB     #AutoIncrement          ; set default increment
DAEE 3406             (       ddos12.asm):05668                 PSHS    D
DAF0 9DA5             (       ddos12.asm):05669                 JSR     <BasChrGetCurr          ; get current character
DAF2 271E             (       ddos12.asm):05670                 BEQ     CmdAutoDoAuto           ; nothing, used defaults                
                      (       ddos12.asm):05671                 
DAF4 BD8E83           (       ddos12.asm):05672                 JSR     >VarGet16Bit            ; get startline
DAF7 DC52             (       ddos12.asm):05673                 LDD     <FPA0+2
DAF9 ED62             (       ddos12.asm):05674                 STD     2,S                     ; update value on stack
DAFB 9DA5             (       ddos12.asm):05675                 JSR     <BasChrGetCurr          ; any more parameters ?
DAFD 2713             (       ddos12.asm):05676                 BEQ     CmdAutoDoAuto           ; nope use default increment
                      (       ddos12.asm):05677                 
DAFF BD89AA           (       ddos12.asm):05678                 JSR     >VarCKComma             ; get comma, error if not
DB02 BD8E83           (       ddos12.asm):05679                 JSR     >DVarGet16Bit           ; get increment
DB05 DC52             (       ddos12.asm):05680                 LDD     <FPA0+2
DB07 2706             (       ddos12.asm):05681                 BEQ     CmdAutoErrorExit                        ; increment is zero : error
DB09 EDE4             (       ddos12.asm):05682                 STD     ,S                      ; update increment value
DB0B 9DA5             (       ddos12.asm):05683                 JSR     <BasChrGetCurr          ; get current char
DB0D 2703             (       ddos12.asm):05684                 BEQ     CmdAutoDoAuto           ; no more : do it !
                      (       ddos12.asm):05685                 
DB0F                  (       ddos12.asm):05686         CmdAutoErrorExit   
DB0F 7E89B4           (       ddos12.asm):05687                 JMP     >BasSNError             ; More chars left, SN? error
                      (       ddos12.asm):05688         
DB12                  (       ddos12.asm):05689         CmdAutoDoAuto   
DB12 1A50             (       ddos12.asm):05690                 ORCC    #(FlagIRQ+FlagFIRQ)     ; Disable interrupts    
DB14 ECE1             (       ddos12.asm):05691                 LDD     ,S++                    ; Get Increment off stack               
DB16 FD060F           (       ddos12.asm):05692                 STD     DosAutoInc
DB19 ECE1             (       ddos12.asm):05693                 LDD     ,S++                    ; Get start line off stack
DB1B B3060F           (       ddos12.asm):05694                 SUBD    DosAutoInc              ; Subtrack increment
DB1E FD060D           (       ddos12.asm):05695                 STD     DosAutoCurrent          ; Save in current
DB21 86FF             (       ddos12.asm):05696                 LDA     #AutoFlag               ; Flag in AUTO mode
DB23 B70613           (       ddos12.asm):05697                 STA     DosAutoFlag
DB26 39               (       ddos12.asm):05698                 RTS
                      (       ddos12.asm):05699         
DB27                  (       ddos12.asm):05700         CheckAndDoAuto   
DB27 3456             (       ddos12.asm):05701                 PSHS    D,X,U
DB29                  (       ddos12.asm):05702         CheckAndDoAutoFix   
DB29 7D0613           (       ddos12.asm):05703                 TST     DosAutoFlag             ; is auto enabled ?
DB2C 2602             (       ddos12.asm):05704                 BNE     LDB30                   ; yes : handle it
DB2E 35D6             (       ddos12.asm):05705         LDB2E   PULS    D,X,U,PC
                      (       ddos12.asm):05706         
DB30 FC060D           (       ddos12.asm):05707         LDB30   LDD     DosAutoCurrent          ; get current line no
DB33 F3060F           (       ddos12.asm):05708                 ADDD    DosAutoInc              ; add increment
DB36 1083F9FF         (       ddos12.asm):05709                 CMPD    #BasMaxLineNo           ; greater than max line no ?
DB3A 22F2             (       ddos12.asm):05710                 BHI     LDB2E                   ; yep : exit
                      (       ddos12.asm):05711                 
DB3C EDE4             (       ddos12.asm):05712                 STD     ,S                      ; save new line on stack
DB3E BD957A           (       ddos12.asm):05713                 JSR     >TextOutNum16           ; output line no
DB41 8620             (       ddos12.asm):05714                 LDA     #$20                    ; output a space
DB43 BDB54A           (       ddos12.asm):05715                 JSR     TextOutChar             
                      (       ddos12.asm):05716                 
DB46 CE03DA           (       ddos12.asm):05717                 LDU     #BasBuffer+3            ; point at basic buffer
DB49 ECE4             (       ddos12.asm):05718                 LDD     ,S                      ; get current line no
DB4B FD060D           (       ddos12.asm):05719                 STD     DosAutoCurrent          ; save it
DB4E 8E02DD           (       ddos12.asm):05720                 LDX     #BasLinInpBuff+1        ; point to line input buffer
DB51 C600             (       ddos12.asm):05721                 LDB     #$00
DB53 A6C0             (       ddos12.asm):05722         LDB53   LDA     ,U+                     ; get byte from basic buffer
DB55 2705             (       ddos12.asm):05723                 BEQ     LDB5C                   ; zero ?
                      (       ddos12.asm):05724                 
DB57 A780             (       ddos12.asm):05725                 STA     ,X+                     ; nope put in buffer
DB59 5C               (       ddos12.asm):05726                 INCB
DB5A 20F7             (       ddos12.asm):05727                 BRA     LDB53
                      (       ddos12.asm):05728         
DB5C 8620             (       ddos12.asm):05729         LDB5C   LDA     #$20                    ; store space
DB5E A780             (       ddos12.asm):05730                 STA     ,X+
DB60 5C               (       ddos12.asm):05731                 INCB                    
DB61 BDB505           (       ddos12.asm):05732         LDB61   JSR     TextWaitKeyCurs2        ; Wait with cursor
DB64 810D             (       ddos12.asm):05733                 CMPA    #$0D                    ; return ?
DB66 2704             (       ddos12.asm):05734                 BEQ     LDB6C                   
                      (       ddos12.asm):05735                 
DB68 8103             (       ddos12.asm):05736                 CMPA    #$03                    ; break ?
DB6A 2616             (       ddos12.asm):05737                 BNE     LDB82
                      (       ddos12.asm):05738                 
DB6C 7F0613           (       ddos12.asm):05739         LDB6C   CLR     DosAutoFlag             ; clear auto flag
DB6F 860D             (       ddos12.asm):05740                 LDA     #$0D                    ; output a return
DB71 BDB54A           (       ddos12.asm):05741                 JSR     TextOutChar
                      (       ddos12.asm):05742                 
DB74 3268             (       ddos12.asm):05743                 LEAS    8,S                     ; drop stack frame
DB76 0F85             (       ddos12.asm):05744                 CLR     <CasLastSine
DB78 8E02DD           (       ddos12.asm):05745                 LDX     #DBasLinInpBuff+1       ; point at input buffer
DB7B 860D             (       ddos12.asm):05746                 LDA     #$0D
DB7D C601             (       ddos12.asm):05747                 LDB     #$01
DB7F 7EB5D3           (       ddos12.asm):05748                 JMP     >BasInBuffFromX         ; input it
                      (       ddos12.asm):05749         
DB82 8120             (       ddos12.asm):05750         LDB82   CMPA    #$20                    ; space ?
DB84 25DB             (       ddos12.asm):05751                 BCS     LDB61                   ; yep keep going
                      (       ddos12.asm):05752         
DB86 817B             (       ddos12.asm):05753                 CMPA    #$7B                    ; max ascii char ?
DB88 24D7             (       ddos12.asm):05754                 BCC     LDB61                   ; yep keep going
                      (       ddos12.asm):05755         
DB8A 3268             (       ddos12.asm):05756                 LEAS    8,S                     ; drop stack frame
DB8C 0F85             (       ddos12.asm):05757                 CLR     <CasLastSine
DB8E 7EB5D3           (       ddos12.asm):05758                 JMP     >BasInBuffFromX         
                      (       ddos12.asm):05759         
DB91 4F               (       ddos12.asm):05760         DoBeep  CLRA                            ; A=0   
DB92 8E0008           (       ddos12.asm):05761                 LDX     #$0008                  ; Repeat 8 times
DB95 BDBE12           (       ddos12.asm):05762         LDB95   JSR     >CasByteOut             ; Output A to cassette
DB98 301F             (       ddos12.asm):05763                 LEAX    -1,X                    ; Decrement count
DB9A 26F9             (       ddos12.asm):05764                 BNE     LDB95                   ; Loop again if all not done
DB9C 39               (       ddos12.asm):05765         LDB9C   RTS
                      (       ddos12.asm):05766         
                      (       ddos12.asm):05767         ;
                      (       ddos12.asm):05768         ; Beep command dispatch routine
                      (       ddos12.asm):05769         ;
                      (       ddos12.asm):05770         ; Syntax :
                      (       ddos12.asm):05771         ;       BEEP nobeeps
                      (       ddos12.asm):05772         ;
                      (       ddos12.asm):05773         
DB9D                  (       ddos12.asm):05774         CmdBeep   
DB9D 2704             (       ddos12.asm):05775                 BEQ     CmdBeepDef              ; if no params, default to 1 beep
DB9F BDC63F           (       ddos12.asm):05776                 JSR     >Get8BitorError         ; get beep count 
                      (       ddos12.asm):05777         
DBA2 8C               (       ddos12.asm):05778                 FCB     Skip2
DBA3                  (       ddos12.asm):05779         CmdBeepDef
DBA3 C601             (       ddos12.asm):05780                 LDB     #$01                    ; Default beep count
                      (       ddos12.asm):05781         
DBA5 3404             (       ddos12.asm):05782                 PSHS    B                       ; save count on stack
DBA7 5F               (       ddos12.asm):05783                 CLRB
DBA8 BDBAED           (       ddos12.asm):05784                 JSR     >SndDTOAOn              ; switch sound to D to A
DBAB BDDB91           (       ddos12.asm):05785         LDBAB   JSR     DoBeep
DBAE BD851B           (       ddos12.asm):05786                 JSR     >BasPollKeyboard        ; check for key
DBB1 6AE4             (       ddos12.asm):05787                 DEC     ,S                      ; decrement beep count
DBB3 270A             (       ddos12.asm):05788                 BEQ     LDBBF                   ; done all : restore and exit
DBB5 108E6000         (       ddos12.asm):05789                 LDY     #$6000                  ; wait a short while
DBB9 313F             (       ddos12.asm):05790         LDBB9   LEAY    -1,Y
DBBB 27EE             (       ddos12.asm):05791                 BEQ     LDBAB                   ; loop back and do next beep
DBBD 20FA             (       ddos12.asm):05792                 BRA     LDBB9
                      (       ddos12.asm):05793         
DBBF 3584             (       ddos12.asm):05794         LDBBF   PULS    B,PC
                      (       ddos12.asm):05795         
                      (       ddos12.asm):05796         ;
                      (       ddos12.asm):05797         ; Wait command dispatch routine.
                      (       ddos12.asm):05798         ;
                      (       ddos12.asm):05799         ; Syntax :
                      (       ddos12.asm):05800         ;       WAIT miliseconds
                      (       ddos12.asm):05801         ;
                      (       ddos12.asm):05802         
DBC1                  (       ddos12.asm):05803         CmdWait   
DBC1 27D9             (       ddos12.asm):05804                 BEQ     LDB9C                   ; no params : exit
DBC3 BD8E83           (       ddos12.asm):05805                 JSR     >VarGet16Bit            ; get no of ms to wait
DBC6 9E52             (       ddos12.asm):05806                 LDX     <FPA0+2
DBC8 BD851B           (       ddos12.asm):05807         LDBC8   JSR     >BasPollKeyboard        ; scan keyboard
DBCB C6A0             (       ddos12.asm):05808                 LDB     #$A0                    ; loop to delay
DBCD 5A               (       ddos12.asm):05809         LDBCD   DECB
DBCE 26FD             (       ddos12.asm):05810                 BNE     LDBCD                   ; keep going
                      (       ddos12.asm):05811                 
DBD0 301F             (       ddos12.asm):05812                 LEAX    -1,X                    ; decrement ms counter
DBD2 26F4             (       ddos12.asm):05813                 BNE     LDBC8                   ; keep going if not zero
DBD4 39               (       ddos12.asm):05814                 RTS
                      (       ddos12.asm):05815         
                      (       ddos12.asm):05816         ;
                      (       ddos12.asm):05817         ; Swap command dispatch routine.
                      (       ddos12.asm):05818         ;
                      (       ddos12.asm):05819         ; Syntax :
                      (       ddos12.asm):05820         ;       SWAP var1,var2
                      (       ddos12.asm):05821         ;
                      (       ddos12.asm):05822         
DBD5                  (       ddos12.asm):05823         CmdSwap   
DBD5 BD8A94           (       ddos12.asm):05824                 JSR     >VarGetVar              ; Get var from basic
DBD8 9E39             (       ddos12.asm):05825                 LDX     <BasVarPtrLast          ; get variable pointer and type
DBDA 9606             (       ddos12.asm):05826                 LDA     <BasVarType
DBDC 3412             (       ddos12.asm):05827                 PSHS    A,X                     ; save them
DBDE BD89AA           (       ddos12.asm):05828                 JSR     >VarCKComma             ; check for comma
DBE1 BD8A94           (       ddos12.asm):05829                 JSR     >VarGetVar              ; get second var
DBE4 3522             (       ddos12.asm):05830                 PULS    A,Y                     ; recover pointer and type of first
DBE6 9106             (       ddos12.asm):05831                 CMPA    <BasVarType             ; var types the same ?
DBE8 1026AC96         (       ddos12.asm):05832                 LBNE    BasTMError              ; nope : error
                      (       ddos12.asm):05833                 
DBEC DE39             (       ddos12.asm):05834                 LDU     <BasVarPtrLast          ; get pointer to second var
DBEE 8E0005           (       ddos12.asm):05835                 LDX     #$0005                  ; 5 bytes for var discriptor
DBF1 A6C4             (       ddos12.asm):05836         LDBF1   LDA     ,U                      ; swap a pair of bytes
DBF3 E6A4             (       ddos12.asm):05837                 LDB     ,Y
DBF5 E7C0             (       ddos12.asm):05838                 STB     ,U+                     ; increment pointers
DBF7 A7A0             (       ddos12.asm):05839                 STA     ,Y+
DBF9 301F             (       ddos12.asm):05840                 LEAX    -1,X                    ; decrement count
DBFB 26F4             (       ddos12.asm):05841                 BNE     LDBF1                   ; keep going if more bytes
DBFD 39               (       ddos12.asm):05842                 RTS
                      (       ddos12.asm):05843         
DBFE C68E             (       ddos12.asm):05844         LDBFE   LDB     #ErrBT                  ; flag boot error
DC00 7EC69E           (       ddos12.asm):05845         LDC00   JMP     >DosHookSysError
                      (       ddos12.asm):05846         
                      (       ddos12.asm):05847         
                      (       ddos12.asm):05848         ;
                      (       ddos12.asm):05849         ; If assembling for the DragonDos cartrage, this is the dispatch for
                      (       ddos12.asm):05850         ; the boot command, if assembling for the dragon Alpha, I have used
                      (       ddos12.asm):05851         ; the space occupied by the boot command to store the code used to
                      (       ddos12.asm):05852         ; activate the Alpha's drive selects and motor on, this is reasonable
                      (       ddos12.asm):05853         ; because the Alpha has a graphical boot menu, which allows it to boot
                      (       ddos12.asm):05854         ; from disk, so this routine seemed expendable.
                      (       ddos12.asm):05855         ;
                      (       ddos12.asm):05856         
                      (       ddos12.asm):05857                         ifdef   DragonAlpha
                      (       ddos12.asm):05858         
                      (       ddos12.asm):05859         ; Translate DragonDos Drive select mechinisim to work on Alpha 
                      (       ddos12.asm):05860         ; Takes byte that would be output to $FF48, reformats it and 
                      (       ddos12.asm):05861         ; outputs to Alpha AY-8912's IO port, which is connected to 
                      (       ddos12.asm):05862         ; Drive selects, motor on and enable precomp.
                      (       ddos12.asm):05863         ; We do not need to preserve the ROM select bit as this code
                      (       ddos12.asm):05864         ; operates in RAM only mode.
                      (       ddos12.asm):05865         
                      (       ddos12.asm):05866         
DC03                  (       ddos12.asm):05867         AlphaDskCtl     
                      (       ddos12.asm):05868                 PSHS    x,A,B,CC,DP
                      (       ddos12.asm):05869         
                      (       ddos12.asm):05870                 pshs    a               ; Convert drives
                      (       ddos12.asm):05871                 anda    #%00000011      ; mask out drive number
                      (       ddos12.asm):05872                 leax    ADriveTab,pcr   ; point at table
                      (       ddos12.asm):05873                 lda     a,x             ; get bitmap
                      (       ddos12.asm):05874                 ldb     ,s
                      (       ddos12.asm):05875                 andb    #%11111100      ; mask out drive number
                      (       ddos12.asm):05876                 stb     ,s
                      (       ddos12.asm):05877                 ora     ,s              ; recombine
                      (       ddos12.asm):05878         
                      (       ddos12.asm):05879                 bita    #MotorOn        ; test motor on ?
                      (       ddos12.asm):05880                 bne     MotorRunning
                      (       ddos12.asm):05881         
                      (       ddos12.asm):05882                 clra                    ; No, turn off other bits.
DC03                  (       ddos12.asm):05883         MotorRunning
                      (       ddos12.asm):05884                 anda    #KnownBits      ; Mask out bits we do not know the function of
                      (       ddos12.asm):05885                 sta     ,s
                      (       ddos12.asm):05886                         
                      (       ddos12.asm):05887                 lda     #AYIOREG        ; AY-8912 IO register
                      (       ddos12.asm):05888                 sta     PIA2DB          ; Output to PIA
                      (       ddos12.asm):05889                 ldb     #AYREGLatch     ; Latch register to modify
                      (       ddos12.asm):05890                 stb     PIA2DA
                      (       ddos12.asm):05891                         
                      (       ddos12.asm):05892                 clr     PIA2DA          ; Idle AY
                      (       ddos12.asm):05893                         
                      (       ddos12.asm):05894                 lda     ,s+             ; Fetch saved Drive Selects
                      (       ddos12.asm):05895                 sta     PIA2DB          ; output to PIA
                      (       ddos12.asm):05896                 ldb     #AYWriteReg     ; Write value to latched register
                      (       ddos12.asm):05897                 stb     PIA2DA          ; Set register
                      (       ddos12.asm):05898         
                      (       ddos12.asm):05899                 clr     PIA2DA          ; Idle AY
                      (       ddos12.asm):05900                                         
                      (       ddos12.asm):05901                 PULS    dp,x,A,B,CC,pc
                      (       ddos12.asm):05902         
                      (       ddos12.asm):05903                 else
                      (       ddos12.asm):05904         ;               
                      (       ddos12.asm):05905         ; Boot command dispatch routine (DragonDos only).
                      (       ddos12.asm):05906         ;
                      (       ddos12.asm):05907         ; Syntax :
                      (       ddos12.asm):05908         ;       BOOT drivenum   
                      (       ddos12.asm):05909         ;
                      (       ddos12.asm):05910         
DC03                  (       ddos12.asm):05911         CmdBoot   
DC03 2705             (       ddos12.asm):05912                 BEQ     LDC0A                   ; No drive supplied, use default
DC05 BDC68F           (       ddos12.asm):05913                 JSR     >GetDriveNoInB          ; Get drive number 
DC08 2003             (       ddos12.asm):05914                 BRA     LDC0D
                      (       ddos12.asm):05915         
DC0A F6060A           (       ddos12.asm):05916         LDC0A   LDB     DosDefDriveNo           ; use default drive no
DC0D 8603             (       ddos12.asm):05917         LDC0D   LDA     #BootFirstSector        ; Read boot sector      
DC0F 97ED             (       ddos12.asm):05918                 STA     <DskSectorNo
DC11 D7EB             (       ddos12.asm):05919                 STB     <DosDriveNo             ; Set drive number
                      (       ddos12.asm):05920         
DC13 17E54F           (       ddos12.asm):05921                 LBSR    DosDoRestore            ; Restore to track 0
DC16 25E8             (       ddos12.asm):05922                 BCS     LDC00                   ; Error : exit
                      (       ddos12.asm):05923                 
DC18 17E544           (       ddos12.asm):05924                 LBSR     DosDoReadSec2          ; Read first 2 chars of boot sec
DC1B 25E3             (       ddos12.asm):05925                 BCS     LDC00                   ; error : exit
                      (       ddos12.asm):05926                 
DC1D CC4F53           (       ddos12.asm):05927                 LDD     #BootSignature          ; Boot signature found ?
DC20 10934F           (       ddos12.asm):05928                 CMPD    <FP0EXP
DC23 26D9             (       ddos12.asm):05929                 BNE     LDBFE                   ; no : error
                      (       ddos12.asm):05930                 
DC25 CC2600           (       ddos12.asm):05931                 LDD     #BootLoadAddr           ; start at boot load address
DC28 DDEE             (       ddos12.asm):05932                 STD     <DiskBuffPtr            ; Set disk buffer to point there
                      (       ddos12.asm):05933                 
DC2A BDC104           (       ddos12.asm):05934         LDC2A   JSR     >DosDoReadSec           ; Read a sector
DC2D 25D1             (       ddos12.asm):05935                 BCS     LDC00                   ; Error : exit
                      (       ddos12.asm):05936                 
DC2F 0CEE             (       ddos12.asm):05937                 INC     <DiskBuffPtr            ; increment page of buffer pointer      
DC31 0CED             (       ddos12.asm):05938                 INC     <DskSectorNo            ; increment sector number
DC33 96ED             (       ddos12.asm):05939                 LDA     <DskSectorNo            ; get sector number
DC35 8112             (       ddos12.asm):05940                 CMPA    #BootLastSector         ; Read the whole boot area ?
DC37 23F1             (       ddos12.asm):05941                 BLS     LDC2A                   ; no : read next sector
                      (       ddos12.asm):05942                 
DC39 7E2602           (       ddos12.asm):05943                 JMP     >BootEntryAddr          ; jump to loaded boot cod
                      (       ddos12.asm):05944         
                      (       ddos12.asm):05945                         ENDC
                      (       ddos12.asm):05946                         
                      (       ddos12.asm):05947         ;
                      (       ddos12.asm):05948         ;Drive command dispatch routine.
                      (       ddos12.asm):05949         ;
                      (       ddos12.asm):05950         ; Syntax :
                      (       ddos12.asm):05951         ;       DRIVE drivenum  
                      (       ddos12.asm):05952         ;
                      (       ddos12.asm):05953         
DC3C                  (       ddos12.asm):05954         CmdDrive
DC3C 2708             (       ddos12.asm):05955                 BEQ     LDC46                   ; If no parameters : error
DC3E BDC68F           (       ddos12.asm):05956                 JSR     >GetDriveNoInB          ; Get drive number      
DC41 F7060A           (       ddos12.asm):05957                 STB     DosDefDriveNo           ; set it
DC44 0E9F             (       ddos12.asm):05958                 JMP     <BasChrGet              ; back to interpreter loop
                      (       ddos12.asm):05959         
DC46 7E89B4           (       ddos12.asm):05960         LDC46   JMP     >BasSNError
                      (       ddos12.asm):05961         
                      (       ddos12.asm):05962         ;
                      (       ddos12.asm):05963         ; Error command dispatch routine.
                      (       ddos12.asm):05964         ;
                      (       ddos12.asm):05965         ; Syntax :
                      (       ddos12.asm):05966         ;       ERROR GOTO lineno
                      (       ddos12.asm):05967         ;
                      (       ddos12.asm):05968         
                      (       ddos12.asm):05969                 ifdef   Dragon
     0081             (       ddos12.asm):05970         TokGO   equ     DTokGO
     00BC             (       ddos12.asm):05971         TokTO   equ     DTokTO
                      (       ddos12.asm):05972                 else
DC49                  (       ddos12.asm):05973         TokGO   equ     CTokGO
DC49                  (       ddos12.asm):05974         TokTO   equ     CTokTO
                      (       ddos12.asm):05975                 endc
                      (       ddos12.asm):05976         
DC49                  (       ddos12.asm):05977         CmdError   
DC49 8181             (       ddos12.asm):05978                 CMPA    #TokGO                  ; Check next token is GO
DC4B 26F9             (       ddos12.asm):05979                 BNE     LDC46                   ; Error if not
                      (       ddos12.asm):05980                 
DC4D 9D9F             (       ddos12.asm):05981                 JSR     <BasChrGet              ; get next char from basic
                      (       ddos12.asm):05982                 
DC4F 81BC             (       ddos12.asm):05983                 CMPA    #TokTO                  ; check next token is TO
DC51 26F3             (       ddos12.asm):05984                 BNE     LDC46                   ; Error if not TO
                      (       ddos12.asm):05985                 
DC53 9D9F             (       ddos12.asm):05986                 JSR     <BasChrGet              ; skip to token
DC55 BD869A           (       ddos12.asm):05987                 JSR     >BasGetLineNo           ; get line number for error handler
DC58 9E2B             (       ddos12.asm):05988                 LDX     <BasTempLine            
DC5A 8CF9FF           (       ddos12.asm):05989                 CMPX    #BasMaxLineNo           ; if bigger than max line no : FCer
DC5D 1022AF2C         (       ddos12.asm):05990                 LBHI    BasFCError              
                      (       ddos12.asm):05991                 
DC61 BF0615           (       ddos12.asm):05992                 STX     DosErrDestLine          ; save in error handler line 
DC64 2706             (       ddos12.asm):05993                 BEQ     LDC6C                   ; if Zero : clear error handler flag
DC66 86FF             (       ddos12.asm):05994                 LDA     #ErrGotoEnabled         ; flag goto enabled
DC68 B70614           (       ddos12.asm):05995                 STA     DosErrGotoFlag
DC6B 39               (       ddos12.asm):05996                 RTS
                      (       ddos12.asm):05997         
DC6C 7F0614           (       ddos12.asm):05998         LDC6C   CLR     DosErrGotoFlag          ; Turn off error goto
DC6F 39               (       ddos12.asm):05999                 RTS
                      (       ddos12.asm):06000         
                      (       ddos12.asm):06001         ;
                      (       ddos12.asm):06002         ; Gets address of a string  supplied on command line into X
                      (       ddos12.asm):06003         ;
                      (       ddos12.asm):06004         
DC70                  (       ddos12.asm):06005         DosGetStr   
DC70 BD89AA           (       ddos12.asm):06006                 JSR     >VarCKComma             ; Check for a comma
DC73 BD8A94           (       ddos12.asm):06007                 JSR     >VarGetVar              ; get next variable
DC76 7E8877           (       ddos12.asm):06008                 JMP     >VarGetExpr             ; and evaluate it
                      (       ddos12.asm):06009         
                      (       ddos12.asm):06010         ;
                      (       ddos12.asm):06011         ;Sread command dispatch routine.
                      (       ddos12.asm):06012         ;
                      (       ddos12.asm):06013         ; Syntax :
                      (       ddos12.asm):06014         ;       SREAD driveno,trackno,secno,part1$,part2$
                      (       ddos12.asm):06015         ;
                      (       ddos12.asm):06016         
DC79                  (       ddos12.asm):06017         CmdSread   
DC79 17009E           (       ddos12.asm):06018                 LBSR    GetSreadWriteParams     ; Get drive,track,secno
DC7C 8DF2             (       ddos12.asm):06019                 BSR     DosGetStr               ; Get address of first 128 bytes to read
DC7E 3410             (       ddos12.asm):06020                 PSHS    X                       ; save on stack
DC80 8DEE             (       ddos12.asm):06021                 BSR     DosGetStr               ; Get address of second 128 bytes to read
DC82 3410             (       ddos12.asm):06022                 PSHS    X
                      (       ddos12.asm):06023                 
DC84 C6FF             (       ddos12.asm):06024                 LDB     #DosFlagTrue
DC86 D7F6             (       ddos12.asm):06025                 STB     <DosIOInProgress        ; Flag Dos IO in progress
DC88 BDD274           (       ddos12.asm):06026                 JSR     >FindFreeDiskBuffer     ; Find a buffer to read sector into
DC8B 2624             (       ddos12.asm):06027                 BNE     LDCB1                   ; Error : exit
                      (       ddos12.asm):06028                 
DC8D 6F02             (       ddos12.asm):06029                 CLR     BuffFlag,X              ; Clear buffer flag
DC8F AE05             (       ddos12.asm):06030                 LDX     BuffAddr,X              ; Get buffer address
DC91 9FEE             (       ddos12.asm):06031                 STX     <DiskBuffPtr            ; Save as pointer to do read
DC93 BDC104           (       ddos12.asm):06032                 JSR     >DosDoReadSec           ; Read the sector
                      (       ddos12.asm):06033                 
DC96 F70603           (       ddos12.asm):06034                 STB     DosErrorCode            ; Save error code in temp storage
DC99 DEEE             (       ddos12.asm):06035                 LDU     <DiskBuffPtr            ; Get pointer to read data
DC9B 33C90080         (       ddos12.asm):06036                 LEAU    $0080,U                 ; Point to second half of sector
DC9F 3510             (       ddos12.asm):06037                 PULS    X                       ; Get address of second string
DCA1 8D11             (       ddos12.asm):06038                 BSR     LDCB4                   ; Copy bytes to string
                      (       ddos12.asm):06039                 
DCA3 DEEE             (       ddos12.asm):06040                 LDU     <DiskBuffPtr            ; Point at begining of disk buffer
DCA5 3510             (       ddos12.asm):06041                 PULS    X                       ; Get address of first string
DCA7 8D0B             (       ddos12.asm):06042                 BSR     LDCB4                   ; Copy bytes to string
                      (       ddos12.asm):06043                 
DCA9 0FF6             (       ddos12.asm):06044                 CLR     <DosIOInProgress        ; Flag Dos IO not in progress
DCAB F60603           (       ddos12.asm):06045                 LDB     DosErrorCode            ; Retrieve error code from read
DCAE 2601             (       ddos12.asm):06046                 BNE     LDCB1                   ; Error : go to error handler
DCB0 39               (       ddos12.asm):06047                 RTS                             ; return to caller
                      (       ddos12.asm):06048         
DCB1 7EC69E           (       ddos12.asm):06049         LDCB1   JMP     >DosHookSysError        ; Jump to error hook
                      (       ddos12.asm):06050         
DCB4 3450             (       ddos12.asm):06051         LDCB4   PSHS    X,U                     ; save regs             
DCB6 C680             (       ddos12.asm):06052                 LDB     #$80                    ; Make room for 128 bytes
DCB8 BD8C52           (       ddos12.asm):06053                 JSR     >BasResStr              ; resize the string
DCBB 3384             (       ddos12.asm):06054                 LEAU    ,X
DCBD 3510             (       ddos12.asm):06055                 PULS    X
DCBF E784             (       ddos12.asm):06056                 STB     ,X
DCC1 EF02             (       ddos12.asm):06057                 STU     2,X
DCC3 3510             (       ddos12.asm):06058                 PULS    X
DCC5 7EB7CC           (       ddos12.asm):06059                 JMP     >UtilCopyBXtoU          ; copy the bytes, return to caller
                      (       ddos12.asm):06060         
                      (       ddos12.asm):06061         ;
                      (       ddos12.asm):06062         ; Swrite command dispatch routine.
                      (       ddos12.asm):06063         ;
                      (       ddos12.asm):06064         ; Syntax :
                      (       ddos12.asm):06065         ;       SWRITE driveno,side,sector,part1$,part2$
                      (       ddos12.asm):06066         ;
                      (       ddos12.asm):06067         
DCC8                  (       ddos12.asm):06068         CmdSwrite   
DCC8 8D50             (       ddos12.asm):06069                 BSR     GetSreadWriteParams     ; get parameters
DCCA 8D48             (       ddos12.asm):06070                 BSR     LDD14                   ; get first half of sector
DCCC BD8877           (       ddos12.asm):06071                 JSR     >VarGetExpr
DCCF 9E52             (       ddos12.asm):06072                 LDX     <FPA0+2                 ; get address of string
DCD1 3410             (       ddos12.asm):06073                 PSHS    X
DCD3 8D3F             (       ddos12.asm):06074                 BSR     LDD14                   ; get second half of sector
DCD5 BD8D9A           (       ddos12.asm):06075                 JSR     >BasGetStrLenAddr       ; get length & addr
DCD8 3414             (       ddos12.asm):06076                 PSHS    B,X
                      (       ddos12.asm):06077                 
DCDA C6FF             (       ddos12.asm):06078                 LDB     #IOInProgress           ; flag that IO is in progress
DCDC D7F6             (       ddos12.asm):06079                 STB     <DosIOInProgress
DCDE BDD274           (       ddos12.asm):06080                 JSR     FindFreeDiskBuffer      ; Go find a disk buffer to use
DCE1 26CE             (       ddos12.asm):06081                 BNE     LDCB1                   ; error : exit
                      (       ddos12.asm):06082                 
DCE3 6F02             (       ddos12.asm):06083                 CLR     BuffFlag,X              ; make buffer free
DCE5 AE05             (       ddos12.asm):06084                 LDX     BuffAddr,X              ; get buffer address
DCE7 9FEE             (       ddos12.asm):06085                 STX     <DiskBuffPtr            ; use this for disk io
DCE9 5F               (       ddos12.asm):06086                 CLRB
DCEA 6F80             (       ddos12.asm):06087         LDCEA   CLR     ,X+                     ; Clear buffer
DCEC 5A               (       ddos12.asm):06088                 DECB
DCED 26FB             (       ddos12.asm):06089                 BNE     LDCEA
                      (       ddos12.asm):06090                 
DCEF 3514             (       ddos12.asm):06091                 PULS    B,X                     ; get saved string pointers for second half of sec
DCF1 DEEE             (       ddos12.asm):06092                 LDU     <DiskBuffPtr            ; point to disk buffer
DCF3 33C90080         (       ddos12.asm):06093                 LEAU    $0080,U                 ; start halfway through
DCF7 5D               (       ddos12.asm):06094                 TSTB                            ; any bytes to transfer ?
DCF8 2703             (       ddos12.asm):06095                 BEQ     LDCFD                   ; nope skip on
DCFA BDB7CC           (       ddos12.asm):06096                 JSR     UtilCopyBXtoU           ; copy bytes
                      (       ddos12.asm):06097         
DCFD 3510             (       ddos12.asm):06098         LDCFD   PULS    X                       ; recover pointer to fist half of sector
DCFF BD8D9F           (       ddos12.asm):06099                 JSR     >VarDelVar              ; delete var
DD02 DEEE             (       ddos12.asm):06100                 LDU     <DiskBuffPtr            ; recover disk buffer ptr
DD04 5D               (       ddos12.asm):06101                 TSTB                            ; any bytes to transfer ?
DD05 2703             (       ddos12.asm):06102                 BEQ     LDD0A                   ; nope skip
                      (       ddos12.asm):06103                 
DD07 BDB7CC           (       ddos12.asm):06104                 JSR     >UtilCopyBXtoU          ; copy first half of sector
                      (       ddos12.asm):06105                 
DD0A BDC101           (       ddos12.asm):06106         LDD0A   JSR     DosDoWriteSecV          ; go write it
DD0D 1025E98D         (       ddos12.asm):06107                 LBCS    DosHookSysError         ; error : exit
DD11 0FF6             (       ddos12.asm):06108                 CLR     <DosIOInProgress        ; flag no io in progresss       
DD13 39               (       ddos12.asm):06109                 RTS
                      (       ddos12.asm):06110         
DD14 BD89AA           (       ddos12.asm):06111         LDD14   JSR     VarCKComma              ; check for comma
DD17 7E8887           (       ddos12.asm):06112                 JMP     >VarGetStr              ; get string
                      (       ddos12.asm):06113         
DD1A                  (       ddos12.asm):06114         GetSreadWriteParams   
DD1A 2603             (       ddos12.asm):06115                 BNE     LDD1F                   ; params, read them
DD1C 7E89B4           (       ddos12.asm):06116                 JMP     >BasSNError             ; none : SN Error
                      (       ddos12.asm):06117         
                      (       ddos12.asm):06118         ;
                      (       ddos12.asm):06119         ; Get params for Sread/Swrite
                      (       ddos12.asm):06120         ;
                      (       ddos12.asm):06121         
DD1F BDC68F           (       ddos12.asm):06122         LDD1F   JSR     GetDriveNoInB           ; Drive number
DD22 D7EB             (       ddos12.asm):06123                 STB     <DosDriveNo
DD24 BD8E7E           (       ddos12.asm):06124                 JSR     >VarGetComma8           ; Track number
DD27 C14F             (       ddos12.asm):06125                 CMPB    #MaxTrack               ; greater than track 80 ?
DD29 2208             (       ddos12.asm):06126                 BHI     LDD33                   ; Yes : error
                      (       ddos12.asm):06127                 
DD2B D7EC             (       ddos12.asm):06128                 STB     <DskTrackNo             ; Save track number
DD2D BD8E7E           (       ddos12.asm):06129                 JSR     >VarGetComma8           ; Get sector number
DD30 D7ED             (       ddos12.asm):06130                 STB     <DskSectorNo            ; save it
DD32 39               (       ddos12.asm):06131         LDD32   RTS
                      (       ddos12.asm):06132         
DD33 7E8B8D           (       ddos12.asm):06133         LDD33   JMP     >BasFCError             ; Error!
                      (       ddos12.asm):06134         
                      (       ddos12.asm):06135         ;
                      (       ddos12.asm):06136         ; Verify command dispatch routine.
                      (       ddos12.asm):06137         ;
                      (       ddos12.asm):06138         ; Syntax :
                      (       ddos12.asm):06139         ;       VERIFY ON
                      (       ddos12.asm):06140         ;       VERIFY OFF
                      (       ddos12.asm):06141         ;
                      (       ddos12.asm):06142         
DD36                  (       ddos12.asm):06143         CmdVerify   
DD36 270E             (       ddos12.asm):06144                 BEQ     LDD46                   ; end of command : error
                      (       ddos12.asm):06145                 ifndef  Tandy
DD38 81C2             (       ddos12.asm):06146                 CMPA    #DTokOFF                ; is next token 'OFF'
                      (       ddos12.asm):06147                 else
                      (       ddos12.asm):06148                 CMPA    #CTokOFF                ; is next token 'OFF'
                      (       ddos12.asm):06149                 endc
DD3A 2603             (       ddos12.asm):06150                 BNE     LDD3F                   ; no : check for 'ON'
DD3C 5F               (       ddos12.asm):06151                 CLRB                            ; set verify off
DD3D 2009             (       ddos12.asm):06152                 BRA     LDD48
                      (       ddos12.asm):06153         
DD3F 8188             (       ddos12.asm):06154         LDD3F   CMPA    #DTokON                 ; is next token 'ON' ?
DD41 2703             (       ddos12.asm):06155                 BEQ     LDD46                   ; yes : skip
DD43 7E89B4           (       ddos12.asm):06156                 JMP     >BasSNError             ; return error
                      (       ddos12.asm):06157         
DD46 C6FF             (       ddos12.asm):06158         LDD46   LDB     #$FF                    ; set verify flag
DD48 F70608           (       ddos12.asm):06159         LDD48   STB     DosVerifyFlag
DD4B 0E9F             (       ddos12.asm):06160                 JMP     <BasChrGet              ; go get char from basic
                      (       ddos12.asm):06161         
DD4D                  (       ddos12.asm):06162         DosHookEOF   
DD4D 0D06             (       ddos12.asm):06163                 TST     <BasVarType             ; check var type
DD4F 27E1             (       ddos12.asm):06164                 BEQ     LDD32                   ; if numeric exit
                      (       ddos12.asm):06165                 
DD51 0F06             (       ddos12.asm):06166                 CLR     <BasVarType             ; set var type numeric !
DD53 3262             (       ddos12.asm):06167                 LEAS    2,S                     ; drop return addresss
DD55 108EDF8A         (       ddos12.asm):06168                 LDY     #DosExtDat
DD59 BDD6E2           (       ddos12.asm):06169                 JSR     DosOpenFileExtY         ; validate and open file
DD5C 2619             (       ddos12.asm):06170                 BNE     JMPSysErrHook           ; Error : exit
                      (       ddos12.asm):06171                 
DD5E BDCE79           (       ddos12.asm):06172                 JSR     DOSGetFLen              ; get file length
DD61 2614             (       ddos12.asm):06173                 BNE     JMPSysErrHook           ; Error : exit
                      (       ddos12.asm):06174                 
DD63 BDCEAC           (       ddos12.asm):06175                 JSR     DosFCBNoToAddr          ; get address of FCB
DD66 11A30C           (       ddos12.asm):06176                 CMPU    FCBFilePointer,X        ; check to see if file pointer is same as length, so EOF
DD69 2204             (       ddos12.asm):06177                 BHI     LDD6F                   ; nope
DD6B A10E             (       ddos12.asm):06178                 CMPA    FCBFilePointer+2,X      
DD6D 2302             (       ddos12.asm):06179                 BLS     LDD71                   
                      (       ddos12.asm):06180                 
DD6F 4F               (       ddos12.asm):06181         LDD6F   CLRA                            ; return false
DD70 8C               (       ddos12.asm):06182                 FCB     Skip2
DD71 8601             (       ddos12.asm):06183         LDD71   LDA     #$01                    ; return true
DD73 DE8A             (       ddos12.asm):06184                 LDU     <DBZero
DD75 201B             (       ddos12.asm):06185                 BRA     ReturnFP
                      (       ddos12.asm):06186         
DD77                  (       ddos12.asm):06187         JMPSysErrHook   
DD77 7EC69E           (       ddos12.asm):06188                 JMP     >DosHookSysError        ; Deal with errors
                      (       ddos12.asm):06189         
                      (       ddos12.asm):06190         ;
                      (       ddos12.asm):06191         ; LOC "filename" get file pointer
                      (       ddos12.asm):06192         ; 
DD7A                  (       ddos12.asm):06193         FuncLoc
DD7A BDD6C8           (       ddos12.asm):06194                 JSR     DosValidateAndOpenDAT   ; Validate and open file
DD7D 26F8             (       ddos12.asm):06195                 BNE     JMPSysErrHook                   ; error : exit
                      (       ddos12.asm):06196                 
DD7F BDCEAC           (       ddos12.asm):06197                 JSR     DosFCBNoToAddr          ; get address of current FCB
DD82 EE0C             (       ddos12.asm):06198                 LDU     FCBFilePointer,X        ; get filepointer from FCB
DD84 A60E             (       ddos12.asm):06199                 LDA     FCBFilePointer+2,X
DD86 200A             (       ddos12.asm):06200                 BRA     ReturnFP                ; return as float in fpa0
                      (       ddos12.asm):06201         
                      (       ddos12.asm):06202         ;
                      (       ddos12.asm):06203         ; Function LOF "filename" get length of file.
                      (       ddos12.asm):06204         ; bug: file is left open.
                      (       ddos12.asm):06205         ; 
DD88                  (       ddos12.asm):06206         FuncLof 
DD88 BDD6C8           (       ddos12.asm):06207                 JSR     DosValidateAndOpenDAT   ; Validate and open file
DD8B 26EA             (       ddos12.asm):06208                 BNE     JMPSysErrHook                   ; error : exit
                      (       ddos12.asm):06209                 
DD8D BDCE79           (       ddos12.asm):06210                 JSR     DOSGetFLen              ; get file length
DD90 26E5             (       ddos12.asm):06211                 BNE     JMPSysErrHook                   ; error : exit
                      (       ddos12.asm):06212         
DD92                  (       ddos12.asm):06213         ReturnFP   
DD92 0F06             (       ddos12.asm):06214                 CLR     <BasVarType             ; numeric var type
DD94 9753             (       ddos12.asm):06215                 STA     <FPA0+3                 ; setup as fp var
                      (       ddos12.asm):06216         
                      (       ddos12.asm):06217                 ifdef   PGSFix
DD96                  (       ddos12.asm):06218         LDD95   CLRB
                      (       ddos12.asm):06219                 NOP
                      (       ddos12.asm):06220                 CLR     <FPA0
                      (       ddos12.asm):06221                 STD     <FPA0+3
                      (       ddos12.asm):06222                 LDA     #$A0                    ; Exponent
                      (       ddos12.asm):06223                 STD     <FP0EXP
                      (       ddos12.asm):06224                 else
DD96 DF51             (       ddos12.asm):06225                 STU     <FPA0+1
DD98 0F50             (       ddos12.asm):06226                 CLR     <FPA0
DD9A 0F63             (       ddos12.asm):06227                 CLR     <FPSByte
DD9C 86A0             (       ddos12.asm):06228                 LDA     #$A0                    ; Exponent
DD9E 974F             (       ddos12.asm):06229                 STA     <FP0EXP
                      (       ddos12.asm):06230                 endc
                      (       ddos12.asm):06231                 
DDA0 7E9165           (       ddos12.asm):06232                 JMP     >VarNormFPA0            ; normalize FPA0
                      (       ddos12.asm):06233         
DDA3                  (       ddos12.asm):06234         FuncFree   
DDA3 9DA5             (       ddos12.asm):06235                 JSR     <BasChrGetCurr          ; get current bas char
DDA5 2705             (       ddos12.asm):06236                 BEQ     LDDAC                   ; none, use default drive no
DDA7 BDC68F           (       ddos12.asm):06237                 JSR     GetDriveNoInB           ; else get drive from command line
DDAA 2003             (       ddos12.asm):06238                 BRA     LDDAF                   ; skip on
                      (       ddos12.asm):06239         
DDAC F6060A           (       ddos12.asm):06240         LDDAC   LDB     DosDefDriveNo           ; get default drive
DDAF D7EB             (       ddos12.asm):06241         LDDAF   STB     <DosDriveNo             ; set it as current
DDB1 BDD14D           (       ddos12.asm):06242                 JSR     DOSGetFree              ; go get free space
DDB4 26C1             (       ddos12.asm):06243                 BNE     JMPSysErrHook                   ; error : exit
DDB6 1F13             (       ddos12.asm):06244                 TFR     X,U                     
DDB8 4F               (       ddos12.asm):06245                 CLRA
DDB9 20D7             (       ddos12.asm):06246                 BRA     ReturnFP                ; return as float in fpa0
                      (       ddos12.asm):06247         
DDBB                  (       ddos12.asm):06248         FuncErl   
DDBB FC0617           (       ddos12.asm):06249                 LDD     DosErrLineNo            ; get last error line
DDBE                  (       ddos12.asm):06250         FuncRetVal   
DDBE 7E8C37           (       ddos12.asm):06251                 JMP     >VarAssign16Bit2        ; return value to basic
                      (       ddos12.asm):06252         
DDC1                  (       ddos12.asm):06253         FuncErr   
DDC1 4F               (       ddos12.asm):06254                 CLRA                            ; msb=0
DDC2 F60619           (       ddos12.asm):06255                 LDB     DosErrLast              ; get last error no
DDC5 20F7             (       ddos12.asm):06256                 BRA     FuncRetVal                      ; return it to basic
                      (       ddos12.asm):06257         
DDC7                  (       ddos12.asm):06258         FuncHimem   
DDC7 DC27             (       ddos12.asm):06259                 LDD     <AddrFWareRamTop        ; get hardware ramtop
DDC9 20F3             (       ddos12.asm):06260                 BRA     FuncRetVal                      ; return it to basic
                      (       ddos12.asm):06261         
DDCB                  (       ddos12.asm):06262         FuncFres   
DDCB BD8CD7           (       ddos12.asm):06263                 JSR     >VarGarbageCollect      ; collect garbage...defrag string space !
DDCE DC23             (       ddos12.asm):06264                 LDD     <BasVarStrTop           ; work out size of string space
DDD0 9321             (       ddos12.asm):06265                 SUBD    <BasVarStringBase
DDD2 20EA             (       ddos12.asm):06266                 BRA     FuncRetVal              ; return it to basic
                      (       ddos12.asm):06267         
                      (       ddos12.asm):06268         ;
                      (       ddos12.asm):06269         ; The actual core disk IO routine, accepts a function code $00..$07
                      (       ddos12.asm):06270         ; these are dispatched through this table
                      (       ddos12.asm):06271         ;
                      (       ddos12.asm):06272         
DDD4                  (       ddos12.asm):06273         DosFunctionTable   
DDD4 C2A1             (       ddos12.asm):06274                 FDB     DosFunctionRestore      ; Restore to track 0
DDD6 C2A7             (       ddos12.asm):06275                 FDB     DosFunctionSeek         ; Seek to a track
DDD8 C2D3             (       ddos12.asm):06276                 FDB     DosFunctionReadSec      ; Read a sector
DDDA C33E             (       ddos12.asm):06277                 FDB     DosFunctionWriteSec     ; Write a sector
DDDC C33B             (       ddos12.asm):06278                 FDB     DosFunctionWriteSec2
DDDE C361             (       ddos12.asm):06279                 FDB     DosFunctionWriteTrack   ; Write (format) track
DDE0 C2D0             (       ddos12.asm):06280                 FDB     DosFunctionReadAddr     ; Read address mark
DDE2 C2FB             (       ddos12.asm):06281                 FDB     DosFunctionReadSec2     ; Read first two bytes of a sector
                      (       ddos12.asm):06282         
                      (       ddos12.asm):06283         ;
                      (       ddos12.asm):06284         ; Data table for Format ?
                      (       ddos12.asm):06285         ;
                      (       ddos12.asm):06286                 
DDE4                  (       ddos12.asm):06287         SectorIDTable   
DDE4 010A             (       ddos12.asm):06288                 FCB     $01,$0A                 ; Sector layout table for format ?
DDE6 020B             (       ddos12.asm):06289                 FCB     $02,$0B
DDE8 030C             (       ddos12.asm):06290                 FCB     $03,$0C
DDEA 040D             (       ddos12.asm):06291                 FCB     $04,$0D
DDEC 050E             (       ddos12.asm):06292                 FCB     $05,$0E
DDEE 060F             (       ddos12.asm):06293                 FCB     $06,$0F
DDF0 0710             (       ddos12.asm):06294                 FCB     $07,$10
DDF2 0811             (       ddos12.asm):06295                 FCB     $08,$11
DDF4 0912             (       ddos12.asm):06296                 FCB     $09,$12
DDF6 00               (       ddos12.asm):06297                 FCB     $00
                      (       ddos12.asm):06298         
                      (       ddos12.asm):06299         ; Track header
DDF7                  (       ddos12.asm):06300         TrackHeaderTable        
DDF7 354E             (       ddos12.asm):06301                 FCB     $35,$4E                 ; 54 bytes of $4E Gap 0
DDF9 4E               (       ddos12.asm):06302                 FCB     $4E                     ; terminator $4E
DDFA 0800             (       ddos12.asm):06303                 FCB     $08,$00                 ; 8 bytes of $00 Preamble
DDFC 00               (       ddos12.asm):06304                 FCB     $00                     ; terminator $00        
DDFD 03F6             (       ddos12.asm):06305                 FCB     $03,$F6                 ; 3 bytes of $F6 Index maek IDAM
DDFF FC               (       ddos12.asm):06306                 FCB     $FC                     ; terminator $FC
DE00 1F4E             (       ddos12.asm):06307                 FCB     $1F,$4E                 ; 31 bytes of $4E Gap 1
DE02 4E               (       ddos12.asm):06308                 FCB     $4E                     ; terminator $4E
                      (       ddos12.asm):06309         
     000C             (       ddos12.asm):06310         TrackHeaderSize EQU     *-TrackHeaderTable      ; size of track header table
                      (       ddos12.asm):06311         
DE03                  (       ddos12.asm):06312         SectorIDLayout  
DE03 0700             (       ddos12.asm):06313                 FCB     $07,$00                 ; 7 bytes of $00, Sector ID gap
DE05 00               (       ddos12.asm):06314                 FCB     $00                     ; terminator $00
DE06 03F5             (       ddos12.asm):06315                 FCB     $03,$F5                 ; 3 bytes of $F5, ID mark IDAM
DE08 FE               (       ddos12.asm):06316                 FCB     $FE                     ; terminator $FE
                      (       ddos12.asm):06317                 
     0006             (       ddos12.asm):06318         SectorIDP1Len   equ     *-SectorIDLayout        ; size of first part of sector ID
                      (       ddos12.asm):06319                 
DE09                  (       ddos12.asm):06320         SectorIDLayout2
DE09 01F7             (       ddos12.asm):06321                 FCB     $01,$F7                 ; 1 byte of $F7, generates CRC bytes
DE0B 4E               (       ddos12.asm):06322                 FCB     $4E                     ; terminator $4E        
DE0C 144E             (       ddos12.asm):06323                 FCB     $14,$4E                 ; 20 bytes of $4E Gap 2
DE0E 4E               (       ddos12.asm):06324                 FCB     $4E                     ; terminator $4E
                      (       ddos12.asm):06325                 
                      (       ddos12.asm):06326         ; the sector data starts here   
DE0F 0B00             (       ddos12.asm):06327                 FCB     $0B,$00                 ; 11 bytes of $00
DE11 00               (       ddos12.asm):06328                 FCB     $00                     ; terminator $00
DE12 03F5             (       ddos12.asm):06329                 FCB     $03,$F5                 ; 3 bytes of $F5 Data IDAM
DE14 FB               (       ddos12.asm):06330                 FCB     $FB                     ; terminator $FB
DE15 00E5             (       ddos12.asm):06331                 FCB     $00,$E5                 ; 256 bytes of $E5 sector data
DE17 F7               (       ddos12.asm):06332                 FCB     $F7                     ; terminator $F7, generates 2 CRC bytes
DE18 174E             (       ddos12.asm):06333                 FCB     $17,$4E                 ; 23 bytes of $4E
DE1A 4E               (       ddos12.asm):06334                 FCB     $4E                     ; terminator $4E
     0012             (       ddos12.asm):06335         SectorIDP2Len   equ     *-SectorIDLayout2
                      (       ddos12.asm):06336         
                      (       ddos12.asm):06337         ; this data is used at the end of the scrtor data for this track
DE1B                  (       ddos12.asm):06338         TrackFiller
DE1B 004E             (       ddos12.asm):06339                 FCB     $00,$4E                 ; 256 bytes of $4E
DE1D 4E               (       ddos12.asm):06340                 FCB     $4E                     ; terminator $4E
                      (       ddos12.asm):06341         
     0003             (       ddos12.asm):06342         TrackFillerLen  EQU     *-TrackFiller   ; length of filler bytes        
                      (       ddos12.asm):06343         
                      (       ddos12.asm):06344         ; Replacement secondary interrupt vectors       
DE1E                  (       ddos12.asm):06345         NewVectorTable   
DE1E 09               (       ddos12.asm):06346                 FCB     (L2@-L1@)               
DE1F 0109             (       ddos12.asm):06347                 FDB     SecVecNMI
DE21 7EC6F7           (       ddos12.asm):06348         L1@     JMP     >NMISrv
DE24 7EC700           (       ddos12.asm):06349                 JMP     >IRQSrv
DE27 7EC7B0           (       ddos12.asm):06350                 JMP     >FIRQSrv
DE2A                  (       ddos12.asm):06351         L2@
                      (       ddos12.asm):06352         
                      (       ddos12.asm):06353         ; Dos vars, step rates for drives
                      (       ddos12.asm):06354         
DE2A 04               (       ddos12.asm):06355                 FCB     (EndStep-BeginStep)     ; No bytes
DE2B 069F             (       ddos12.asm):06356                 FDB     DosD0StepRate           ; address to copy
                      (       ddos12.asm):06357         
DE2D                  (       ddos12.asm):06358         BeginStep
DE2D 02               (       ddos12.asm):06359                 FCB     StepRateDefault
DE2E 02               (       ddos12.asm):06360                 FCB     StepRateDefault
DE2F 02               (       ddos12.asm):06361                 FCB     StepRateDefault
DE30 02               (       ddos12.asm):06362                 FCB     StepRateDefault
DE31                  (       ddos12.asm):06363         EndStep
                      (       ddos12.asm):06364         
                      (       ddos12.asm):06365         ; New basic dispatch stub
                      (       ddos12.asm):06366                 
DE31 1E               (       ddos12.asm):06367                 FCB     (EndStub-BeginStub)     ; No bytes
                      (       ddos12.asm):06368                 ifndef  Tandy
DE32 012A             (       ddos12.asm):06369                 FDB     BasStub1                ; Copy to stub 1 ($012A) on Dragons
                      (       ddos12.asm):06370                 ELSE    
                      (       ddos12.asm):06371                 FDB     BasStub2                ; Copy to stub 1 ($0134) on Tandy 
                      (       ddos12.asm):06372                 ENDC
                      (       ddos12.asm):06373         
DE34                  (       ddos12.asm):06374         BeginStub       
DE34 1A               (       ddos12.asm):06375                 FCB     DDTokCountC             ; Count of new commands 
DE35 DED4             (       ddos12.asm):06376                 FDB     DosCmdNames             ; Pointer to command name table
DE37 C64C             (       ddos12.asm):06377                 FDB     DosCmdDispatch          ; Pointer to command dispatch routine
DE39 07               (       ddos12.asm):06378                 FCB     DDTokCountF             ; Count of new functions
DE3A DEBB             (       ddos12.asm):06379                 FDB     DosFuncNames            ; Pointer to function name table
DE3C C667             (       ddos12.asm):06380                 FDB     DosFuncDispatch         ; Pointer to function dispatch table
                      (       ddos12.asm):06381         
                      (       ddos12.asm):06382         ; dummy stub to terminate
                      (       ddos12.asm):06383         
DE3E 00               (       ddos12.asm):06384                 FCB     $00
DE3F 0000             (       ddos12.asm):06385                 FDB     $0000
DE41 89B4             (       ddos12.asm):06386                 FDB     BasSNError
DE43 00               (       ddos12.asm):06387                 FCB     $00
DE44 0000             (       ddos12.asm):06388                 FDB     $0000
DE46 89B4             (       ddos12.asm):06389                 FDB     BasSNError
DE48 0000000000       (       ddos12.asm):06390                 FCB     $00,$00,$00,$00,$00
DE4D 0000000000       (       ddos12.asm):06391                 FCB     $00,$00,$00,$00,$00             
DE52                  (       ddos12.asm):06392         EndStub
                      (       ddos12.asm):06393         
DE52 00               (       ddos12.asm):06394                 FCB     $00             ; No bytes : terminate
                      (       ddos12.asm):06395         
DE53                  (       ddos12.asm):06396         CommandDispatchTable   
DE53 DADC             (       ddos12.asm):06397                 FDB     CmdAuto
DE55 C520             (       ddos12.asm):06398                 FDB     CmdBackup
DE57 DB9D             (       ddos12.asm):06399                 FDB     CmdBeep
                      (       ddos12.asm):06400         
                      (       ddos12.asm):06401                 ifdef   DragonAlpha
                      (       ddos12.asm):06402                 FDB     BasSNError      ; If assembling for Alpha, just redirect to ?SN error
                      (       ddos12.asm):06403                 else
DE59 DC03             (       ddos12.asm):06404                 FDB     CmdBoot         ; Else, if dragondos, boot command 
                      (       ddos12.asm):06405                 endc
                      (       ddos12.asm):06406         
DE5B D5D3             (       ddos12.asm):06407                 FDB     CmdChain
DE5D D332             (       ddos12.asm):06408                 FDB     CmdCopy
DE5F D725             (       ddos12.asm):06409                 FDB     CmdCreate
DE61 DA35             (       ddos12.asm):06410                 FDB     CmdDir
DE63 DC3C             (       ddos12.asm):06411                 FDB     CmdDrive
DE65 C397             (       ddos12.asm):06412                 FDB     CmdDskInit
DE67 D7FB             (       ddos12.asm):06413                 FDB     CmdFRead
DE69 D8A5             (       ddos12.asm):06414                 FDB     CmdFWrite
DE6B DC49             (       ddos12.asm):06415                 FDB     CmdError
DE6D D774             (       ddos12.asm):06416                 FDB     CmdKill
DE6F D4A7             (       ddos12.asm):06417                 FDB     CmdLoad
DE71 D3E5             (       ddos12.asm):06418                 FDB     CmdMerge
DE73 D781             (       ddos12.asm):06419                 FDB     CmdProtect
DE75 DBC1             (       ddos12.asm):06420                 FDB     CmdWait
DE77 D7A5             (       ddos12.asm):06421                 FDB     CmdRename
DE79 D53F             (       ddos12.asm):06422                 FDB     CmdSave
DE7B DC79             (       ddos12.asm):06423                 FDB     CmdSread
DE7D DCC8             (       ddos12.asm):06424                 FDB     CmdSwrite
DE7F DD36             (       ddos12.asm):06425                 FDB     CmdVerify
DE81 89B4             (       ddos12.asm):06426                 FDB     BasSNError
DE83 D7C7             (       ddos12.asm):06427                 FDB     CmdFLRead
DE85 DBD5             (       ddos12.asm):06428                 FDB     CmdSwap
                      (       ddos12.asm):06429                         
DE87                  (       ddos12.asm):06430         FunctionDipatchTable   
DE87 DD88             (       ddos12.asm):06431                 FDB     FuncLof
DE89 DDA3             (       ddos12.asm):06432                 FDB     FuncFree
DE8B DDBB             (       ddos12.asm):06433                 FDB     FuncErl
DE8D DDC1             (       ddos12.asm):06434                 FDB     FuncErr
DE8F DDC7             (       ddos12.asm):06435                 FDB     FuncHimem
DE91 DD7A             (       ddos12.asm):06436                 FDB     FuncLoc
DE93 DDCB             (       ddos12.asm):06437                 FDB     FuncFres
                      (       ddos12.asm):06438         
DE95                  (       ddos12.asm):06439         RamHookTable   
DE95 D902             (       ddos12.asm):06440                 FDB     DosHookOpenDev          ; open dev/file
DE97 D8FA             (       ddos12.asm):06441                 FDB     DosHookCheckIONum       ; check io num
DE99 C27E             (       ddos12.asm):06442                 FDB     DosHookRetDevParam      ; return dev parameters
DE9B D917             (       ddos12.asm):06443                 FDB     DosHookCharOut          ; char output   
DE9D C27E             (       ddos12.asm):06444                 FDB     DosHookRetDevParam      ; char input
DE9F C27E             (       ddos12.asm):06445                 FDB     DosHookRetDevParam      ; check dev open for input
DEA1 C27E             (       ddos12.asm):06446                 FDB     DosHookRetDevParam      ; check dev open for output
DEA3 C27E             (       ddos12.asm):06447                 FDB     DosHookRetDevParam      ; close all devs and files
DEA5 D6FB             (       ddos12.asm):06448                 FDB     DosCloseAllFiles        ; close single dev/file
DEA7 C27E             (       ddos12.asm):06449                 FDB     DosHookRetDevParam      ; first char of new statement
DEA9 D960             (       ddos12.asm):06450                 FDB     DosHookDiskItem         ; Disk file item scanner
DEAB C27E             (       ddos12.asm):06451                 FDB     DosHookRetDevParam      ; poll for break
                      (       ddos12.asm):06452         
                      (       ddos12.asm):06453                 ifdef   PGSFix
                      (       ddos12.asm):06454                 FDB     DosHookReadInputFix     ; read line of input (fixed)
                      (       ddos12.asm):06455                 else
DEAD D720             (       ddos12.asm):06456                 FDB     DosHookReadInput        ; read line of input
                      (       ddos12.asm):06457                 endc
                      (       ddos12.asm):06458                 
DEAF C27E             (       ddos12.asm):06459                 FDB     DosHookRetDevParam      ; finish loading ASCII program
DEB1 DD4D             (       ddos12.asm):06460                 FDB     DosHookEOF              ; EOF function
DEB3 C27E             (       ddos12.asm):06461                 FDB     DosHookRetDevParam      ; Eval expression
DEB5 C27E             (       ddos12.asm):06462                 FDB     DosHookRetDevParam      ; User error trap
DEB7 C69E             (       ddos12.asm):06463                 FDB     DosHookSysError         ; System error trap
DEB9 D490             (       ddos12.asm):06464                 FDB     DosHookRun              ; run statement
                      (       ddos12.asm):06465                         
                      (       ddos12.asm):06466         ;
                      (       ddos12.asm):06467                 
DEBB                  (       ddos12.asm):06468         DosFuncNames   
DEBB 4C4FC6           (       ddos12.asm):06469                 FCS     /LOF/
DEBE 465245C5         (       ddos12.asm):06470                 FCS     /FREE/
DEC2 4552CC           (       ddos12.asm):06471                 FCS     /ERL/
DEC5 4552D2           (       ddos12.asm):06472                 FCS     /ERR/
DEC8 48494D45CD       (       ddos12.asm):06473                 FCS     /HIMEM/
DECD 4C4FC3           (       ddos12.asm):06474                 FCS     /LOC/
DED0 465245A4         (       ddos12.asm):06475                 FCS     /FRE$/
                      (       ddos12.asm):06476                 
                      (       ddos12.asm):06477         ;
                      (       ddos12.asm):06478         ; New Command names table
                      (       ddos12.asm):06479         ;
                      (       ddos12.asm):06480                 
DED4                  (       ddos12.asm):06481         DosCmdNames   
DED4 415554CF         (       ddos12.asm):06482                 FCS     /AUTO/
DED8 4241434B55D0     (       ddos12.asm):06483                 FCS     /BACKUP/
DEDE 424545D0         (       ddos12.asm):06484                 FCS     /BEEP/
DEE2 424F4FD4         (       ddos12.asm):06485                 FCS     /BOOT/
DEE6 43484149CE       (       ddos12.asm):06486                 FCS     /CHAIN/
DEEB 434F50D9         (       ddos12.asm):06487                 FCS     /COPY/
DEEF 4352454154C5     (       ddos12.asm):06488                 FCS     /CREATE/
DEF5 4449D2           (       ddos12.asm):06489                 FCS     /DIR/
DEF8 44524956C5       (       ddos12.asm):06490                 FCS     /DRIVE/
DEFD 44534B494E49D4   (       ddos12.asm):06491                 FCS     /DSKINIT/
DF04 46524541C4       (       ddos12.asm):06492                 FCS     /FREAD/
DF09 4657524954C5     (       ddos12.asm):06493                 FCS     /FWRITE/
DF0F 4552524FD2       (       ddos12.asm):06494                 FCS     /ERROR/
DF14 4B494CCC         (       ddos12.asm):06495                 FCS     /KILL/
DF18 4C4F41C4         (       ddos12.asm):06496                 FCS     /LOAD/
DF1C 4D455247C5       (       ddos12.asm):06497                 FCS     /MERGE/
DF21 50524F544543D4   (       ddos12.asm):06498                 FCS     /PROTECT/
DF28 574149D4         (       ddos12.asm):06499                 FCS     /WAIT/
DF2C 52454E414DC5     (       ddos12.asm):06500                 FCS     /RENAME/
DF32 534156C5         (       ddos12.asm):06501                 FCS     /SAVE/
DF36 53524541C4       (       ddos12.asm):06502                 FCS     /SREAD/
DF3B 5357524954C5     (       ddos12.asm):06503                 FCS     /SWRITE/
DF41 5645524946D9     (       ddos12.asm):06504                 FCS     /VERIFY/
DF47 46524FCD         (       ddos12.asm):06505                 FCS     /FROM/
DF4B 464C524541C4     (       ddos12.asm):06506                 FCS     /FLREAD/
DF51 535741D0         (       ddos12.asm):06507                 FCS     /SWAP/
                      (       ddos12.asm):06508         
                      (       ddos12.asm):06509         ;
                      (       ddos12.asm):06510         ; Some mesagaes
                      (       ddos12.asm):06511         ;
DF55                  (       ddos12.asm):06512         MessInsertSource
DF55 494E534552542053 (       ddos12.asm):06513                 FCC     /INSERT SOURCE/
     4F55524345
DF62 0D00             (       ddos12.asm):06514                 FCB     $0D,$00
                      (       ddos12.asm):06515                 
DF64                  (       ddos12.asm):06516         MessInsertDest
DF64 494E534552542044 (       ddos12.asm):06517                 FCC     /INSERT DESTINATION/
     455354494E415449
     4F4E
DF76 0D00             (       ddos12.asm):06518                 FCB     $0D,$00
                      (       ddos12.asm):06519                 
DF78                  (       ddos12.asm):06520         MessPressAnyKey   
DF78 505245535320414E (       ddos12.asm):06521                 FCC     /PRESS ANY KEY/
     59204B4559
DF85 0D00             (       ddos12.asm):06522                 FCB     $0D,$00
                      (       ddos12.asm):06523         
DF87                  (       ddos12.asm):06524         DosExtBas   
DF87 424153           (       ddos12.asm):06525                 FCC     /BAS/
DF8A                  (       ddos12.asm):06526         DosExtDat       
DF8A 444154           (       ddos12.asm):06527                 FCC     /DAT/
DF8D                  (       ddos12.asm):06528         DosExtBin       
DF8D 42494E           (       ddos12.asm):06529                 FCC     /BIN/
DF90                  (       ddos12.asm):06530         DosExtNone      
DF90 202020           (       ddos12.asm):06531                 FCC     /   /
                      (       ddos12.asm):06532         
DF93                  (       ddos12.asm):06533         DosErrorCodeTable
DF93 4E52             (       ddos12.asm):06534                 FCC     /NR/                    ; $80 : not ready
DF95 534B             (       ddos12.asm):06535                 FCC     /SK/                    ; $82 : seek
DF97 5750             (       ddos12.asm):06536                 FCC     /WP/                    ; $84 : write protect
DF99 5254             (       ddos12.asm):06537                 FCC     /RT/                    ; $86 : record type
DF9B 5246             (       ddos12.asm):06538                 FCC     /RF/                    ; $88 : record not found
DF9D 4343             (       ddos12.asm):06539                 FCC     /CC/                    ; $8A : CRC
DF9F 4C44             (       ddos12.asm):06540                 FCC     /LD/                    ; $8C : Lost data
DFA1 4254             (       ddos12.asm):06541                 FCC     /BT/                    ; $8E : boot
DFA3 4956             (       ddos12.asm):06542                 FCC     /IV/                    ; $90 : invalid volume / directory
DFA5 4644             (       ddos12.asm):06543                 FCC     /FD/                    ; $92 : Full directory
DFA7 4446             (       ddos12.asm):06544                 FCC     /DF/                    ; $94 : Disk full
DFA9 4653             (       ddos12.asm):06545                 FCC     /FS/                    ; $96 : File spec
DFAB 5054             (       ddos12.asm):06546                 FCC     /PT/                    ; $98 : Protection
DFAD 5045             (       ddos12.asm):06547                 FCC     /PE/                    ; $9A : (read) Past end 
DFAF 4646             (       ddos12.asm):06548                 FCC     /FF/                    ; $9C : File not Found 
DFB1 4645             (       ddos12.asm):06549                 FCC     /FE/                    ; $9E : File exists
DFB3 4E45             (       ddos12.asm):06550                 FCC     /NE/                    ; $A0 : (file does) Not Exist
DFB5 5446             (       ddos12.asm):06551                 FCC     /TF/                    ; $A2 : Too many Files open
DFB7 5052             (       ddos12.asm):06552                 FCC     /PR/                    ; $A4 : Parameter
DFB9 3F3F             (       ddos12.asm):06553                 FCC     /??/                    ; $A6 : Undefined
                      (       ddos12.asm):06554         
                      (       ddos12.asm):06555         
                      (       ddos12.asm):06556                 ifdef   DragonAlpha
DFBB                  (       ddos12.asm):06557         DosSignonMess   FCC             /ALPHA-DOS/
                      (       ddos12.asm):06558                 ELSE
DFBB 445241474F4E444F (       ddos12.asm):06559         DosSignonMess   FCC             /DRAGONDOS/
     53
                      (       ddos12.asm):06560                 ENDC
                      (       ddos12.asm):06561         
                      (       ddos12.asm):06562                 ifdef   PGSFix
                      (       ddos12.asm):06563                 FCC     / 1.2/
                      (       ddos12.asm):06564                 FCB     $0D
                      (       ddos12.asm):06565                 FCB     $00
                      (       ddos12.asm):06566                 else
DFC4 20312E30         (       ddos12.asm):06567                 FCC     / 1.0/
DFC8 0D               (       ddos12.asm):06568                 FCB     $0D
DFC9 0D               (       ddos12.asm):06569                 FCB     $0D
                      (       ddos12.asm):06570                 endif
                      (       ddos12.asm):06571                 
                      (       ddos12.asm):06572         
                      (       ddos12.asm):06573                 ifdef   PGSFix
DFCA                  (       ddos12.asm):06574         LDFCA   LDA     DosTempFCBNo            ; recover fileno
                      (       ddos12.asm):06575                 TST     [DosSaveFCB]            ; test first character of filename
                      (       ddos12.asm):06576                 rts
                      (       ddos12.asm):06577                 else
DFCA 0000000000000000 (       ddos12.asm):06578                 FCB     $00,$00,$00,$00,$00,$00,$00,$00
                      (       ddos12.asm):06579                 endc
                      (       ddos12.asm):06580                 
                      (       ddos12.asm):06581         ; Set PIAs, called with X=FF01 or X=FF21
                      (       ddos12.asm):06582         ; Called with EXG as that way we can return and still leave things on the stack.
                      (       ddos12.asm):06583         ; Returns saved PIA registers on the stack
                      (       ddos12.asm):06584         
DFD2 A684             (       ddos12.asm):06585         SetPIA  LDA     ,X                      ; get control register side A
DFD4 3402             (       ddos12.asm):06586                 PSHS    A                       ; save on stack
DFD6 E781             (       ddos12.asm):06587                 STB     ,X++                    ; set control register side A, advance pointer
DFD8 A684             (       ddos12.asm):06588                 LDA     ,X                      ; get control register side B
DFDA 3402             (       ddos12.asm):06589                 PSHS    A                       ; save it in stack
DFDC E784             (       ddos12.asm):06590                 STB     ,X                      ; set control register side B
DFDE 8EFF21           (       ddos12.asm):06591                 LDX     #PIA1CRA                ; point to PIA 1
DFE1 1F35             (       ddos12.asm):06592                 TFR     U,PC                    ; return
                      (       ddos12.asm):06593         
                      (       ddos12.asm):06594         ; Reset PIAs from registers saved on the satack, uses same EXG trick as above
                      (       ddos12.asm):06595         
DFE3                  (       ddos12.asm):06596         ResetPIA   
DFE3 8EFF25           (       ddos12.asm):06597                 LDX     #PIA1CRB+2              ; point to 2 after control reg, as we use pre-decrement below
DFE6                  (       ddos12.asm):06598         ResetPIA2   
DFE6 3502             (       ddos12.asm):06599                 PULS    A                       ; get saved control register B value
DFE8 A783             (       ddos12.asm):06600                 STA     ,--X                    ; decrement pointer then write it
DFEA 3502             (       ddos12.asm):06601                 PULS    A                       ; get saved control register A value
DFEC A783             (       ddos12.asm):06602                 STA     ,--X                    ; decrement pointer then write it
DFEE 8EFF05           (       ddos12.asm):06603                 LDX     #PIA0CRB+2              ; point to 2 after PIA0 CRB
DFF1 1F35             (       ddos12.asm):06604                 TFR     U,PC                    ; return
                      (       ddos12.asm):06605         
                      (       ddos12.asm):06606                 ifdef   DragonAlpha
DFF3                  (       ddos12.asm):06607         ADriveTab
                      (       ddos12.asm):06608                 FCB     Drive0,Drive1,Drive2,Drive3
                      (       ddos12.asm):06609                 ENDC
                      (       ddos12.asm):06610         
                      (       ddos12.asm):06611                 ifdef   PGSFix
DFF3                  (       ddos12.asm):06612         LDFF3   TSTB                            ; check for zero length filename
                      (       ddos12.asm):06613                 BNE     LDFF9                   ; no, save it and return
                      (       ddos12.asm):06614                 LDB     #ErrFS                  ; else generate FS error
                      (       ddos12.asm):06615                 RTS
DFF3                  (       ddos12.asm):06616         LDFF9
                      (       ddos12.asm):06617                 LDA     DosDefDriveNo           ; get dos default drive number
                      (       ddos12.asm):06618                 JMP     LC7C1                   ; return to patched code
                      (       ddos12.asm):06619                 endc            
                      (       ddos12.asm):06620                 
DFF3 0000000000000000 (       ddos12.asm):06621                 ZMB     $E000-*
     0000000000
                      (       ddos12.asm):06622         ;DE000   END
